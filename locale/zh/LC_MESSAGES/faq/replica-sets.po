# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/replica-sets.txt:3
msgid "FAQ: Replication and Replica Sets"
msgstr "FAQ:复制和复制集"

#: ../source/faq/replica-sets.txt:7
msgid ""
"This document answers common questions about database replication in "
"MongoDB."
msgstr ""
"这篇文档回答了MongoDB数据库复制的常见问题。 "

#: ../source/faq/replica-sets.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""
"如果在这里没有找到你需要的答案,请检查 :doc:`complete "
"list of FAQs </faq>` 或者在 `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_  提交你的问题。"

#: ../source/faq/replica-sets.txt:15
msgid "What kinds of replication does MongoDB support?"
msgstr "MongoDB 支持那些类型的复制？"

#: ../source/faq/replica-sets.txt:17
msgid ""
"MongoDB supports master-slave replication and a variation on master-slave "
"replication known as replica sets. Replica sets are the recommended "
"replication topology."
msgstr ""
"MongoDB 支持主-从复制和由主-从复制演化而来的复制集。 "
"推荐使用复制集为复制拓扑。"

#: ../source/faq/replica-sets.txt:22
msgid "What do the terms \"primary\" and \"master\" mean?"
msgstr "\"primary\"和\"master\"是什么意思？"

#: ../source/faq/replica-sets.txt:24
msgid ""
":term:`Primary` and :term:`master` nodes are the nodes that can accept "
"writes. MongoDB's replication is \"single-master:\" only one node can accept"
" write operations at a time."
msgstr ""
":term:`Primary` 和 :term:`master` 节点是可以接受写操作的节点。 "
"MongoDB 的复制是 \"single-master:\" 一次只有一个节点可以接受写操作。 "

#: ../source/faq/replica-sets.txt:28
msgid ""
"In a replica set, if the current \"primary\" node fails or becomes "
"inaccessible, the other members can autonomously :term:`elect <election>` "
"one of the other members of the set to be the new \"primary\"."
msgstr ""
"在一个复制集中, 如果当前的 \"primary\" 节点出错或者无法访问， "
"其他的节点可以自主的从中 :term:`选举 <election>` 出一个节点"
"并设定为新的 \"primary\"."

#: ../source/faq/replica-sets.txt:32
msgid ""
"By default, clients send all reads to the primary; however, :term:`read "
"preference` is configurable at the client level on a per-connection basis, "
"which makes it possible to send reads to secondary nodes instead."
msgstr ""
"默认情况下，客户端向主节点发送所有的读操作；然而 :term:`read preference` "
"（读选项）以每个连接为基础，在客户端级别是可配置的， "
"这使得在\"从节点\"上进行读操作成为可能。"

#: ../source/faq/replica-sets.txt:38
msgid "What do the terms \"secondary\" and \"slave\" mean?"
msgstr " \"secondary\" 和 \"slave\" 是什么意思？"

#: ../source/faq/replica-sets.txt:40
msgid ""
":term:`Secondary` and :term:`slave` nodes are read-only nodes that replicate"
" from the :term:`primary`."
msgstr ""
":term:`Secondary` 和 :term:`slave` 节点是从 :term:`primary` 复制而来"
"的只读节点。"

#: ../source/faq/replica-sets.txt:43
msgid ""
"Replication operates by way of an :term:`oplog`, from which secondary/slave "
"members apply new operations to themselves. This replication process is "
"asynchronous, so secondary/slave nodes may not always reflect the latest "
"writes to the primary. But usually, the gap between the primary and "
"secondary nodes is just few milliseconds on a local network connection."
msgstr ""
"复制集中的 secondary/slave 节点自身申请新的操作，通过 :term:`oplog` 进行"
"复制操作。这个复制过程是异步的, 所以主节点上最新的写入不会立即反映在secondary/slave"
"节点上。通常, 在本地网络环境中，主从节点间的差距只有几毫秒。 "

#: ../source/faq/replica-sets.txt:50
msgid "How long does replica set failover take?"
msgstr "复制集故障转移需要多久？"

#: ../source/faq/replica-sets.txt:52
msgid ""
"It varies, but a replica set will select a new primary within a minute."
msgstr ""
"这是不确定的，通常复制集会在 1 分钟内选择一个新的主节点。"

#: ../source/faq/replica-sets.txt:54
msgid ""
"It may take 10-30 seconds for the members of a :term:`replica set` to "
"declare a :term:`primary` inaccessible. This triggers an :term:`election`. "
"During the election, the cluster is unavailable for writes."
msgstr ""
" :term:`复制集` 中的节点大约花费 10-30 秒来宣布 :term:`primary` 无法访问。"
"这会触发一次 :term:`选举` 。在选举过程中，集群无法进行写操作。"

#: ../source/faq/replica-sets.txt:59
msgid "The election itself may take another 10-30 seconds."
msgstr "选举过程自身需要消耗额外的 10-30秒。"

#: ../source/faq/replica-sets.txt:63
msgid ""
":term:`Eventually consistent <eventual consistency>` reads, like the ones "
"that will return from a replica set are only possible with a :term:`write "
"concern` that permits reads from :term:`secondary` members."
msgstr ""
" :term:`最终一致性 <eventual consistency>` 读操作，像那些 "
"从复制集中返回结果只可能与 :term:`写关注` "
"在 :term:`secondary` 节点上进行读操作的权限有关。"

#: ../source/faq/replica-sets.txt:69
msgid "Does replication work over the Internet and WAN connections?"
msgstr "可以在互联网和广域网（WAN）上进行复制吗？"

#: ../source/faq/replica-sets.txt:71 ../source/faq/replica-sets.txt:141
#: ../source/faq/replica-sets.txt:259
msgid "Yes."
msgstr "可以。"

#: ../source/faq/replica-sets.txt:73
msgid ""
"For example, a deployment may maintain a :term:`primary` and "
":term:`secondary` in an East-coast data center along with a "
":term:`secondary` member for disaster recovery in a West-coast data center."
msgstr ""
"例如，可能在东海岸的数据中心部署维护了一个 :term:`primary` 和 :term:`secondary` ，"
"在遥远的西海岸，部署了一个 :term:`secondary` 节点用于灾难恢复。"

#: ../source/faq/replica-sets.txt:77
msgid ":doc:`/tutorial/deploy-geographically-distributed-replica-set`"
msgstr ":doc:`/tutorial/deploy-geographically-distributed-replica-set`"


#: ../source/faq/replica-sets.txt:80
msgid "Can MongoDB replicate over a \"noisy\" connection?"
msgstr "MongoDB的复制可以部署在较差的网络环境中吗？"

#: ../source/faq/replica-sets.txt:82
msgid "Yes, but not without connection failures and the obvious latency."
msgstr "可以，但是并不是没有连接失败和明显的延迟。"

#: ../source/faq/replica-sets.txt:84
msgid ""
"Members of the set will attempt to reconnect to the other members of the set"
" in response to networking flaps. This does not require administrator "
"intervention. However, if the network connections among the nodes in the "
"replica set are very slow, it might not be possible for the members of the "
"node to keep up with the replication."
msgstr ""
"复制集中的节点将根据所在网络瓣(networking flaps)的回应,尝试重新连接其他的"
"复制集节点。这不需要管理员的干预。然而，如果复制集内节点之间的连接速度非常"
"慢，对节点上的节点可能无法保持复制操作。"

#: ../source/faq/replica-sets.txt:90
msgid ""
"If the TCP connection between the secondaries and the :term:`primary` "
"instance breaks, a :term:`replica set` will automatically elect one of the "
":term:`secondary` members of the set as primary."
msgstr ""
"如果子节点和 :term:`主节点` 的TCP连接被破坏， :term:`复制集` 将自动从复制集中选举出"
"一个 term:`子节点` 并且将它设置为主节点。"

#: ../source/faq/replica-sets.txt:95
msgid ""
"What is the preferred replication method: master/slave or replica sets?"
msgstr ""
"主/从复制和复制集哪一个是首选的方法？"

#: ../source/faq/replica-sets.txt:99
msgid ""
"In MongoDB 3.0.0, replica sets can have up to :ref:`50 nodes <3.0-replica-"
"sets-max-members>`. Previous versions limited the maximum number of replica "
"set members to 12."
msgstr ""

#: ../source/faq/replica-sets.txt:103
msgid ""
":term:`Replica sets <replica set>` are the preferred :term:`replication` "
"mechanism in MongoDB. However, if your deployment requires more than 50 "
"nodes, you must use master/slave replication."
msgstr ""
"在MongoDB中，:term:`复制集 <replica set>` 是首选的 :term:`复制` 机制。"
"然而，如果在你的部署中需要的节点数大于12个，必须使用 主/从 复制。"

#: ../source/faq/replica-sets.txt:108
msgid ""
"What is the preferred replication method: replica sets or replica pairs?"
msgstr ""
"主/从复制和复制集哪一个是首选的方法？"

#: ../source/faq/replica-sets.txt:112
msgid ""
":term:`Replica sets <replica set>` replaced :term:`replica pairs` in version"
" 1.6. :term:`Replica sets <replica set>` are the preferred "
":term:`replication` mechanism in MongoDB."
msgstr ""
":term:`复制集 <replica set>` 在1.6版本取代了 :term:`replica pairs` ，"
"成为了MongoDB  :term:`复制` 机制的首选。"

#: ../source/faq/replica-sets.txt:117
msgid "Why use journaling if replication already provides data redundancy?"
msgstr "既然复制已经提供了数据冗余，为什么还要使用日志？"

#: ../source/faq/replica-sets.txt:119
msgid ""
":term:`Journaling <journal>` facilitates faster crash recovery. Prior to "
"journaling, crashes often required :dbcommand:`database repairs "
"<repairDatabase>` or full data resync. Both were slow, and the first was "
"unreliable."
msgstr ""
":term:`日志 <journal>` 有助于系统崩溃后更快的恢复。在日志出现之前，系统崩溃"
"往往需要  :dbcommand:`数据库修复 <repairDatabase>` 或者全部数据重新同步。这"
"两种方法都很慢，第一种方法是不可靠的。"

#: ../source/faq/replica-sets.txt:123
msgid ""
"Journaling is particularly useful for protection against power failures, "
"especially if your replica set resides in a single data center or power "
"circuit."
msgstr ""
"日志可以特别有效的预防电源故障，特别是如果你的复制集部署在一个单一的数据中"
"心或单一的电源电路上。"

#: ../source/faq/replica-sets.txt:127
msgid ""
"When a :term:`replica set` runs with journaling, :program:`mongod` instances"
" can safely restart without any administrator intervention."
msgstr ""
"如果一个 :term:`复制集` 运行了日志， :program:`mongod` 实例可以安全的"
"重启，不需要任何管理员的干预。"

#: ../source/faq/replica-sets.txt:132
msgid ""
"Journaling requires some resource overhead for write operations. Journaling "
"has no effect on read performance, however."
msgstr ""
"日志需要占用一些写操作的资源，但是，日志不会影响读操作的性能。"

#: ../source/faq/replica-sets.txt:135
msgid ""
"Journaling is enabled by default on all 64-bit builds of MongoDB v2.0 and "
"greater."
msgstr ""
"所有的 MongoDB 64 位 v2.0 或 v2.0 以上版本上，默认是启动日志的。"

#: ../source/faq/replica-sets.txt:139
msgid ""
"Are write operations durable if write concern does not acknowledge writes?"
msgstr ""
"如果写关注没有确认写操作，写操作会持续吗？"

#: ../source/faq/replica-sets.txt:143
msgid ""
"However, if you want confirmation that a given write has arrived at the "
"server, use :ref:`write concern <write-concern>`."
msgstr ""
"然而，如果你希望确认一个给定的写操作到达了服务器上，使用 :ref:`写关注 <write-concern>`."

#: ../source/faq/replica-sets.txt:146
msgid ""
"After the :ref:`default write concern change <driver-write-concern-change>`,"
" the default write concern acknowledges all write operations, and "
"unacknowledged writes must be explicitly configured. See the "
":doc:`/applications/drivers` documentation for your driver for more "
"information."
msgstr ""
"在 :ref:`改变默认写关注 <driver-write-concern-change>` 后，默认的写关注"
"会确认所有写操作，确认的写操作必须有一个明确的配置。参见： :doc:`/"
"applications/drivers` 文档获得更多的驱动器信息。"

#: ../source/faq/replica-sets.txt:154
msgid ""
"The :program:`mongo` shell now defaults to use :doc:`safe writes </core"
"/write-concern>`. See :ref:`write-methods-incompatibility` for more "
"information."
msgstr ""
" :program:`mongo` 命令解析器(shell)现在默认的使用 :doc:`安全写 </core/"
"write-concern>`。 参见 :ref:`write-methods-incompatibility` 以获得更多信息。"

#: ../source/faq/replica-sets.txt:158
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations. Previous versions "
"issued a :dbcommand:`getLastError` command after a write to specify a write "
"concern."
msgstr ""
" :ref:`写操作 <rel-notes-write-operations>` 的一个新协议使写关注与写操作"
"整合起来。早先的版本在写入后使用 :dbcommand:`getLastError` 命令来指定写关"
"注。"

#: ../source/faq/replica-sets.txt:165
msgid "How many arbiters do replica sets need?"
msgstr "复制集需要多少个投票节点？"

#: ../source/faq/replica-sets.txt:167
msgid ""
"Some configurations do not require any :term:`arbiter` instances. Arbiters "
"vote in :term:`elections <election>` for :term:`primary` but do not "
"replicate the data like :term:`secondary` members."
msgstr ""
"某些配置中不需要任何 :term:`投票节点` 实例。投票节点投票 :term:`选举 <election>` "
" :term:`主节点` ，但是不会像 :term:`子节点` 节点一样复制数据。"

#: ../source/faq/replica-sets.txt:172
msgid ""
":term:`Replica sets <replica set>` require a majority of the remaining nodes"
" present to elect a primary. Arbiters allow you to construct this majority "
"without the overhead of adding replicating nodes to the system."
msgstr ""
":term:`复制集 <replica set>`需要剩余的节点中多数的投票来选举出主节点。 "
"投票节点允许你在不增加复制节点的情况下，构建出多数票数。"

#: ../source/faq/replica-sets.txt:177
msgid ""
"There are many possible replica set :doc:`architectures </core/replica-set-"
"architectures>`."
msgstr ""
" :doc:`复制集架构 </core/replica-set-architectures>` 有很多可能性。"

#: ../source/faq/replica-sets.txt:180
msgid ""
"A replica set with an odd number of voting nodes does not need an arbiter."
msgstr ""
"一个复制集在投票时如果节点的数量是奇数，不需要投票节点。"

#: ../source/faq/replica-sets.txt:182
msgid ""
"A common configuration consists of two replicating nodes that include a "
":term:`primary` and a :term:`secondary`, as well as an :term:`arbiter` for "
"the third node. This configuration makes it possible for the set to elect a "
"primary in the event of failure, without requiring three replicating nodes."
msgstr ""
"考虑一个常见的配置：两个复制节点包含一个 :term:`主节点` 和一个 :term:`子节点` ，"
" :term:`投票节点` 作为第三个节点。这种配置使出现错误事件时，选举一个主节点"
"成为了可能，不需要三个复制节点。"

#: ../source/faq/replica-sets.txt:188
msgid ""
"You may also consider adding an arbiter to a set if it has an equal number "
"of nodes in two facilities and network partitions between the facilities are"
" possible. In these cases, the arbiter will break the tie between the two "
"facilities and allow the set to elect a new primary."
msgstr ""
"如果一个复制集有相等的数量的节点在两个设施或网络分区在两个设施之间，你也可以"
"考虑在复制集中增加一个投票节点，在这种情况下，投票节点将打破两个设施间的"
"平衡，允许复制集选举出一个新的主节点。"

#: ../source/faq/replica-sets.txt:194
msgid ":doc:`/core/replica-set-architectures`"
msgstr ":doc:`/core/replica-set-architectures`"

#: ../source/faq/replica-sets.txt:197
msgid ""
"What information do arbiters exchange with the rest of the replica set?"
msgstr ""
"投票节点和剩余的复制集节点交换什么信息？"

#: ../source/faq/replica-sets.txt:199
msgid ""
"Arbiters never receive the contents of a collection but do exchange the "
"following data with the rest of the replica set:"
msgstr ""
"投票节点从不接收任何数据集的内容，除了和其余的复制集节点交换以下数据："

#: ../source/faq/replica-sets.txt:202
msgid ""
"Credentials used to authenticate the arbiter with the replica set. All "
"MongoDB processes within a replica set use keyfiles. These exchanges are "
"encrypted."
msgstr ""
"用于验证复制集中投票节点的证书。复制集中所有的 MongoDB 进程使用密钥文件，"
"交换信息是加密的。"

#: ../source/faq/replica-sets.txt:206
msgid ""
"Replica set configuration data and voting data. This information is not "
"encrypted. Only credential exchanges are encrypted."
msgstr ""
"复制集确认数据和投票数据。这些信息是非加密的，只有证书交换是加密的。"

#: ../source/faq/replica-sets.txt:209
msgid ""
"If your MongoDB deployment uses TLS/SSL, then all communications between "
"arbiters and the other members of the replica set are secure. See the "
"documentation for :doc:`/tutorial/configure-ssl` for more information. Run "
"all arbiters on secure networks, as with all MongoDB components."
msgstr ""
"如果你的 MongoDB 使用 SSL 部署，那么在投票节点和复制集中其他节点的所有"
"通信都是安全的。参见文档： :doc:`/tutorial/configure-ssl` 获得更多信息。"
"像所有的 MongoDB 组件一样，运行所有的投票节点在安全的网络环境中。"

#: ../source/faq/replica-sets.txt:0
msgid "See"
msgstr "参见"

#: ../source/faq/replica-sets.txt:219
msgid "Which members of a replica set vote in elections?"
msgstr "复制集中的哪些节点在选举中投票？"

#: ../source/faq/replica-sets.txt:221
msgid ""
"All members of a replica set, unless the value of :data:`votes "
"<replSetGetConfig.members[n].votes>` is equal to ``0``, vote in elections. "
"This includes all :ref:`delayed <replica-set-delayed-members>`, :ref:`hidden"
" <replica-set-hidden-members>` and :ref:`secondary-only <replica-set-"
"secondary-only-members>` members. :ref:`Arbiters <replica-set-arbiters>` "
"always vote in elections and always have ``1`` vote."
msgstr ""
"除去 :data:`votes <local.system.replset.members[n].votes>` 的值等于 0 的"
"节点，所有的节点都会在选举中投票。包含所有的： :ref:`delayed <replica-set-delayed-members>`，"
" :ref:`hidden <replica-set-hidden-members>` 和 :ref:`secondary-only <replica-set-"
"secondary-only-members>` 节点, 此外，还有 :ref:`arbiters <replica-"
"set-arbiters>` 。"

#: ../source/faq/replica-sets.txt:230
msgid ""
"Additionally, the :data:`~replSetGetStatus.members.state` of the voting "
"members also determine whether the member can vote. Only voting members in "
"the following states are eligible to vote:"
msgstr ""
"此外，投票节点的 :data:`~replSetGetStatus.members.state` 也决定该节点是否"
"可以投票。只有下列的资格中的投票节点才有投票的资格。"

#: ../source/faq/replica-sets.txt:234
msgid "``PRIMARY``"
msgstr "``主节点``"

#: ../source/faq/replica-sets.txt:236
msgid "``SECONDARY``"
msgstr "``子节点``"

#: ../source/faq/replica-sets.txt:238
msgid "``RECOVERING``"
msgstr ""

#: ../source/faq/replica-sets.txt:240
msgid "``ARBITER``"
msgstr ""

#: ../source/faq/replica-sets.txt:242
msgid "``ROLLBACK``"
msgstr ""

#: ../source/faq/replica-sets.txt:244 ../source/faq/replica-sets.txt:254
msgid ":ref:`replica-set-elections`"
msgstr ":ref:`replica-set-elections`"

#: ../source/faq/replica-sets.txt:247
msgid "Do hidden members vote in replica set elections?"
msgstr "复制集的隐藏节点在选举中参与投票吗？"

#: ../source/faq/replica-sets.txt:249
msgid ""
":ref:`Hidden members <replica-set-hidden-members>` of :term:`replica sets "
"<replica set>` *do* vote in elections. To exclude a member from voting in an"
" :term:`election`, change the value of the member's "
":data:`~replSetGetConfig.members[n].votes` configuration to ``0``."
msgstr ""
" :term:`复制集 <replica set>` 的 :ref:`隐藏节点 <replica-set-hidden-members>` "
"在选举中参与投票。如果去除该节点的 :term:`选举` 权限，更改该节点的 :data:`~local.system."
"replset.members[n].votes` 配置为 ``0``."

#: ../source/faq/replica-sets.txt:257
msgid ""
"Is it normal for replica set members to use different amounts of disk space?"
msgstr ""
"复制集中的节点使用磁盘空间数量不同正常吗？"

#: ../source/faq/replica-sets.txt:261
msgid ""
"Factors including: different oplog sizes, different levels of storage "
"fragmentation, and MongoDB's data file pre-allocation can lead to some "
"variation in storage utilization between nodes. Storage use disparities will"
" be most pronounced when you add members at different times."
msgstr ""
"影响因素包括: 不同的 oplog 大小, 不同的存储碎片等级，MongoDB 的数据文件"
"的预分配会导致不同的节点间存储利用率一些变化。在不同时期加入新节点会使存"
"储利用出现明显的不同。"

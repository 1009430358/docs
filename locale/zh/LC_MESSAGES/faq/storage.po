#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: 2015-01-19 12:59-0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.7.3\n"

#: ../source/faq/storage.txt:3
msgid "FAQ: MongoDB Storage"
msgstr "FAQ: MongoDB存储"

#: ../source/faq/storage.txt:7
msgid ""
"This document addresses common questions regarding MongoDB's storage system."
msgstr "这篇文档讲述了与MongoDB存储系统有关的常见问题。"

#: ../source/faq/storage.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing "
"List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""
"假如你没有发现你想要的答案，可以看一下这个页面 :doc:`complete list of FAQs "
"</faq>` 或者把你问题发布到 `MongoDB User Mailing List <https://groups."
"google.com/forum/?fromgroups#!forum/mongodb-user>` 。"

#: ../source/faq/storage.txt:17
msgid "What are memory mapped files?"
msgstr "内存映射文件是什么?"

#: ../source/faq/storage.txt:19
msgid ""
"A memory-mapped file is a file with data that the operating system places "
"in memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the "
"file to a region of virtual memory. Memory-mapped files are the critical "
"piece of the storage engine in MongoDB. By using memory mapped files "
"MongoDB can treat the contents of its data files as if they were in memory. "
"This provides MongoDB with an extremely fast and simple method for "
"accessing and manipulating data."
msgstr ""
"内存映射文件中通过系统调用 ``mmap()``  映射操作系统在内存中存放的数据，因此 "
"*maps* 文件映射了部分虚拟内存。内存映射文件是MongoDB存储引擎中非常重要的一部"
"分。通过使用内存映射文件，数据文件中的信息对MongoDB来说就像在内存中一样。这"
"样MongoDB就可以非常快的连接和操作数据库了。"

#: ../source/faq/storage.txt:28
msgid "How do memory mapped files work?"
msgstr "内存映射文件是如何工作的？"

#: ../source/faq/storage.txt:30
msgid ""
"Memory mapping assigns files to a block of virtual memory with a direct "
"byte-for-byte correlation. Once mapped, the relationship between file and "
"memory allows MongoDB to interact with the data in the file as if it were "
"memory."
msgstr ""
"内存映射会将文件以字节的形式之间分配到虚拟内存。一旦产生映射，MongoDB会通过"
"文件与内存之间的关联与之进行交互，因为文件就像在内存里一样。"

#: ../source/faq/storage.txt:36
msgid "How does MongoDB work with memory mapped files?"
msgstr "MongoDB与内存映射文件是如何工作的？"

#: ../source/faq/storage.txt:38
msgid ""
"MongoDB uses memory mapped files for managing and interacting with all "
"data. MongoDB memory maps data files to memory as it accesses documents. "
"Data that isn't accessed is *not* mapped to memory."
msgstr ""
"MongoDB使用内存映射文件来管理数据并与之进行交互。MongoDB会使内存与数据文件进"
"行关联，就像连接文档。数据也会映射到内存中。"

#: ../source/faq/storage.txt:45
msgid "What are page faults?"
msgstr "什么是缺页中断？"

#: ../source/includes/fact-page-fault.rst:1
msgid ""
"Page faults can occur as MongoDB reads from or writes data to parts of its "
"data files that are not currently located in physical memory. In contrast, "
"operating system page faults happen when physical memory is exhausted and "
"pages of physical memory are swapped to disk."
msgstr ""
"缺页中断会导致MongoDB不在当前的物理内存进行读写操作。然而，操作系统页面错误"
"是因为物理内存被耗尽或超出磁盘空间。"

#: ../source/faq/storage.txt:49
msgid ""
"If there is free memory, then the operating system can find the page on "
"disk and load it to memory directly. However, if there is no free memory, "
"the operating system must:"
msgstr ""
"如果有闲置内存，操作系统将会在磁盘上找到该页面并直接将其加载到内存里。当然，"
"如果没有闲置内存，操作系统将会："

#: ../source/faq/storage.txt:53
msgid ""
"find a page in memory that is stale or no longer needed, and write the page "
"to disk."
msgstr "在内存中找到时效的和很久没有使用的页面，将其写入磁盘。"

#: ../source/faq/storage.txt:56
msgid "read the requested page from disk and load it into memory."
msgstr "从磁盘中读取请求页面并加载到内存中。"

#: ../source/faq/storage.txt:58
msgid ""
"This process, particularly on an active system can take a long time, "
"particularly in comparison to reading a page that is already in memory."
msgstr ""
"在这个过程中，特别是处于活动状态的系统，需要很长时间。可以比较一下读取已经在"
"内存中的页面。"

#: ../source/faq/storage.txt:62 ../source/faq/storage.txt:74
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr "通过 :ref:`administration-monitoring-page-faults` 查看更多信息。"

#: ../source/faq/storage.txt:65
msgid "What is the difference between soft and hard page faults?"
msgstr "软硬缺页中断有什么不同？"

#: ../source/faq/storage.txt:67
msgid ""
":term:`Page faults <page fault>` occur when MongoDB needs access to data "
"that isn't currently in active memory. A \"hard\" page fault refers to "
"situations when MongoDB must access a disk to access the data. A \"soft\" "
"page fault, by contrast, merely moves memory pages from one list to "
"another, such as from an operating system file cache. In production, "
"MongoDB will rarely encounter soft page faults."
msgstr ""
":term:`缺页中断 <page fault>` 会导致MongoDB在需要连接数据时不在当前活动的内"
"存中工作。当MongoDB需要通过磁盘连接数据时，页面\"硬\"错误代表当前的状态。"

#: ../source/faq/storage.txt:79
msgid "What tools can I use to investigate storage use in MongoDB?"
msgstr "在MongoDB中我可以使用什么工具来检测存储的使用情况？"

#: ../source/faq/storage.txt:81
msgid ""
"The :method:`db.stats()` method in the :program:`mongo` shell, returns the "
"current state of the \"active\" database. The :doc:`dbStats command </"
"reference/command/dbStats>` document describes the fields in the :method:"
"`db.stats()` output."
msgstr ""
":program:`mongo` 命令行程序中的 :method:`db.stats()` 就可以返回 \"活跃\"数据"
"库现在的状态。 :doc:`dbStats command </reference/command/dbStats>` 文档解释"
"了 :method:`db.stats()` 输出的字段。"

#: ../source/faq/storage.txt:89
msgid "What is the working set?"
msgstr "什么是工作复制集？"

#: ../source/faq/storage.txt:91
msgid ""
"Working set represents the total body of data that the application uses in "
"the course of normal operation. Often this is a subset of the total data "
"size, but the specific size of the working set depends on actual moment-to-"
"moment use of the database."
msgstr ""
"工作复制集代表应用在正常操作进程中使用的所有数据。大部分情况下它是所有数据大"
"小的子集，但特殊情况下工作复制集的大小取决于当前正在使用的数据库。"

#: ../source/faq/storage.txt:96
msgid ""
"If you run a query that requires MongoDB to scan every document in a "
"collection, the working set will expand to include every document. "
"Depending on physical memory size, this may cause documents in the working "
"set to \"page out,\" or to be removed from physical memory by the operating "
"system. The next time MongoDB needs to access these documents, MongoDB may "
"incur a hard page fault."
msgstr ""
"如果你想让MongoDB扫描集合中的所有文档，工作集将会扩展至每一个文档。基于物理"
"内存的大小，这个可能会导致文档在工作集中 \"溢出,\" 或者被操作系统从物理内存"
"中移除。当下次MongoDB需要连接这些文档时，MongoDB可能会引发一个硬缺页中断。"

#: ../source/faq/storage.txt:103
msgid ""
"If you run a query that requires MongoDB to scan every :term:`document` in "
"a collection, the working set includes every active document in memory."
msgstr ""
"如果你想让MongoDB扫描集合中的所有 :term:`document`， 工作集的内存中会含有所"
"有活动的文档。"

#: ../source/faq/storage.txt:107
msgid ""
"For best performance, the majority of your *active* set should fit in RAM."
msgstr "多数 *active* 配置在RAM中会得到更好的性能。"

#: ../source/faq/storage.txt:113
msgid ""
"Why are the files in my data directory larger than the data in my database?"
msgstr "为什么目录里面的文件比我的数据库还要大？"

#: ../source/faq/storage.txt:115
msgid ""
"The data files in your data directory, which is the :file:`/data/db` "
"directory in default configurations, might be larger than the data set "
"inserted into the database. Consider the following possible causes:"
msgstr ""
"默认存储目录 :file:`/data/db` 中的数据文件可能会比数据库中的数据大，思考一下"
"下面可能的原因："

#: ../source/faq/storage.txt:119
msgid "Preallocated data files."
msgstr "预配置数据文件"

#: ../source/faq/storage.txt:121
msgid ""
"In the data directory, MongoDB preallocates data files to a particular "
"size, in part to prevent file system fragmentation. MongoDB names the first "
"data file ``<databasename>.0``, the next ``<databasename>.1``, etc. The "
"first file :program:`mongod` allocates is 64 megabytes, the next 128 "
"megabytes, and so on, up to 2 gigabytes, at which point all subsequent "
"files are 2 gigabytes. The data files include files with allocated space "
"but that hold no data. :program:`mongod` may allocate a 1 gigabyte data "
"file that may be 90% empty. For most larger databases, unused allocated "
"space is small compared to the database."
msgstr ""
"在数据目录中，MongoDB预配置数据文件为一个指定的大小，这是保护文件系统碎片的"
"一部分。MongoDB将第一个数据文件命名为 ``<databasename>.0``，第二个为 "
"``<databasename>.1``等等。第一个文件 :program:`mongod` 分配了64MB，第二个"
"128MB等等，直到2GB，随后的文件都将是2GB。数据文件包括文件的分配空间但里面没"
"有数据。 :program:`mongod` 可能会出现1G分配空间中90%未使用的情况。对于大部分"
"大数据库来说，不对数据库使用分配空间没什么大的差别。"

#: ../source/faq/storage.txt:132
msgid ""
"On Unix-like systems, :program:`mongod` preallocates an additional data "
"file and initializes the disk space to ``0``.  Preallocating data files in "
"the background prevents significant delays when a new database file is next "
"allocated."
msgstr ""
"在类Unix系统中， :program:`mongod` 预先配置了一个另外的数据文件并将磁盘空间"
"初始化为0。当创建一个新的数据库时，预配置文件对于避免延迟有非常大的作用。"

#: ../source/faq/storage.txt:137
msgid ""
"You can disable preallocation by setting :setting:`~storage."
"preallocDataFiles` to ``false``. However do not disable :setting:`~storage."
"preallocDataFiles` for production environments: only use :setting:`~storage."
"preallocDataFiles` for testing and with small data sets where you "
"frequently drop databases."
msgstr ""
"你可以通过 :setting:`~storage.preallocDataFiles` 设置将预配置设为 "
"``false``。但是千万不要设置 :setting:`~storage.preallocDataFiles` ，只需使"
"用 :setting:`~storage.preallocDataFiles` 调试你经常删除的小数据库。"

#: ../source/faq/storage.txt:144
msgid ""
"On Linux systems you can use ``hdparm`` to get an idea of how costly "
"allocation might be:"
msgstr "在Linux系统上，当你使用 ``hdparm`` 就会知道配置是多么重要了："

#: ../source/faq/storage.txt:151
msgid "The :term:`oplog`."
msgstr ":term:`oplog`"

#: ../source/faq/storage.txt:153
msgid ""
"If this :program:`mongod` is a member of a replica set, the data directory "
"includes the :term:`oplog.rs <oplog>` file, which is a preallocated :term:"
"`capped collection` in the ``local`` database. The default allocation is "
"approximately 5% of disk space on 64-bit installations, see :ref:`Oplog "
"Sizing <replica-set-oplog-sizing>` for more information. In most cases, you "
"should not need to resize the oplog. However, if you do, see :doc:`/"
"tutorial/change-oplog-size`."
msgstr ""
"如果 :program:`mongod` 是复制集成员，数据目录包括 ``local`` 数据库中 :term:`"
"固定集合` 的 :term:`oplog.rs <oplog>` 文件。在64位安装包中，默认分配空间大约"
"为磁盘空间的5%，通过 <replica-set-oplog-sizing>` 查看更多信息。在大部分实例"
"中，你不需要调整oplog的大小。当然，如果你想调整，可以查看 :doc:`/tutorial/"
"change-oplog-size`。"

#: ../source/faq/storage.txt:162
msgid "The :term:`journal`."
msgstr ":term:`journal`"

#: ../source/faq/storage.txt:164
msgid ""
"The data directory contains the journal files, which store write operations "
"on disk prior to MongoDB applying them to databases. See :doc:`/core/"
"journaling`."
msgstr ""
"数据目录含有journal文件，它将MongoDB在操作数据库中的写入操作存储在磁盘上。查"
"看 :doc:`/core/journaling`。"

#: ../source/faq/storage.txt:168
msgid "Empty records."
msgstr "空记录。"

#: ../source/faq/storage.txt:170
msgid ""
"MongoDB maintains lists of empty records in data files when deleting "
"documents and collections. MongoDB can reuse this space, but will never "
"return this space to the operating system."
msgstr ""
"当删除文档和集合时，MongoDB将会继续列出数据文件中的空记录。MongoDB可以重复使"
"用这部分空间，但是不会释放这部分空间给操作系统。"

#: ../source/faq/storage.txt:174
msgid ""
"To de-fragment allocated storage, use :dbcommand:`compact`, which de-"
"fragments allocated space. By de-fragmenting storage, MongoDB can "
"effectively use the allocated space. :dbcommand:`compact` requires up to 2 "
"gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if "
"you are critically low on disk space."
msgstr ""
"使用 :dbcommand:`compact`可以重组分配存储空间。通过重置存储，MongoDB可以有效"
"的利用分配空间。 :dbcommand:`compact` 需要额外2GB磁盘空间来运行。如果磁盘空"
"间较少，禁止使用 :dbcommand:`compact` 。"

#: ../source/faq/storage.txt:180
msgid ""
":dbcommand:`compact` only removes fragmentation from MongoDB data files and "
"does not return any disk space to the operating system."
msgstr ""
" :dbcommand:`compact` 只会移除MongoDB数据文件中的碎片，不会释放磁盘空间给操"
"作系统。"

#: ../source/faq/storage.txt:184
msgid ""
"To reclaim deleted space, use :dbcommand:`repairDatabase`, which rebuilds "
"the database which de-fragments the storage and may release space to the "
"operating system. :dbcommand:`repairDatabase` requires up to 2 gigabytes of "
"extra disk space to run. Do not use :dbcommand:`repairDatabase` if you are "
"critically low on disk space."
msgstr ""
"使用 :dbcommand:`repairDatabase` 重置存储来重建数据库可以再次利用删除的空"
"间。 :dbcommand:`repairDatabase` 需要至少2G额外磁盘空间来运行。如果磁盘空间"
"较少，禁止使用 :dbcommand:`repairDatabase`。"

#: ../source/faq/storage.txt:191
msgid ""
":dbcommand:`repairDatabase` requires enough free disk space to hold both "
"the old and new database files while the repair is running. Be aware that :"
"dbcommand:`repairDatabase` will block all other operations and may take a "
"long time to complete."
msgstr ""
"当使用 :dbcommand:`repairDatabase` 进行修复时，需要足够的磁盘空间来支持新旧"
"数据库。可以使用 :dbcommand:`repairDatabase` 锁定其它操作，可能需要一定的时"
"间。"

#: ../source/faq/storage.txt:197
msgid "How can I check the size of a collection?"
msgstr "如何查看集合的大小？"

#: ../source/faq/storage.txt:199
msgid ""
"To view the size of a collection and other information, use the :method:`db."
"collection.stats()` method from the :program:`mongo` shell. The following "
"example issues :method:`db.collection.stats()` for the ``orders`` "
"collection:"
msgstr ""
"如果想查看集合的大小或其它信息，可以在 :program:`mongo` 命令行中使用 :"
"method:`db.collection.stats()` 。如下面的例子，在 ``orders`` 集合中使用 :"
"method:`db.collection.stats()` ："

#: ../source/faq/storage.txt:208
msgid "To view specific measures of size, use these methods:"
msgstr "通过指定方式查看数据大小，可以使用一下方法："

#: ../source/faq/storage.txt:210
msgid ""
":method:`db.collection.dataSize()`: data size in bytes for the collection."
msgstr ":method:`db.collection.dataSize()`: 集合中数据的大小"

#: ../source/faq/storage.txt:211
msgid ""
":method:`db.collection.storageSize()`: allocation size in bytes, including "
"unused space."
msgstr ":method:`db.collection.storageSize()`: 配置空间，包括未使用的空间"

#: ../source/faq/storage.txt:212
msgid ""
":method:`db.collection.totalSize()`: the data size plus the index size in "
"bytes."
msgstr ":method:`db.collection.totalSize()`: 数据和索引的大小"

#: ../source/faq/storage.txt:213
msgid ":method:`db.collection.totalIndexSize()`: the index size in bytes."
msgstr ":method:`db.collection.totalIndexSize()`: 索引的大小"

#: ../source/faq/storage.txt:215
msgid ""
"Also, the following scripts print the statistics for each database and "
"collection:"
msgstr "当然，下面的脚本可以统计每个数据库和集合："

#: ../source/faq/storage.txt:227
msgid "How can I check the size of indexes?"
msgstr "我将如何查看索引的大小"

#: ../source/faq/storage.txt:229
msgid ""
"To view the size of the data allocated for an index, use one of the "
"following procedures in the :program:`mongo` shell:"
msgstr ""
"如果想查看索引的数据分配大小，可以在 :program:`mongo` 命令行中参照下面的步"
"骤："

#: ../source/faq/storage.txt:232
msgid ""
"Use the :method:`db.collection.stats()` method using the index namespace. "
"To retrieve a list of namespaces, issue the following command:"
msgstr ""
"通过 :method:`db.collection.stats()` 方法使用索引命名空间。使用以下命令可以"
"恢复命名空间列表："

#: ../source/faq/storage.txt:240
msgid ""
"Check the value of :data:`~collStats.indexSizes` in the output of the :"
"method:`db.collection.stats()` command."
msgstr ""
"在 :method:`db.collection.stats()` 命令中查看 :data:`~collStats.indexSizes` "
"的值。"

#: ../source/faq/storage.txt:0
msgid "Example"
msgstr "例子"

#: ../source/faq/storage.txt:249
msgid "The command returns a list similar to the following:"
msgstr "该命令会返回一个类似下面的列表："

#: ../source/faq/storage.txt:257
msgid ""
"View the size of the data allocated for the ``orders.$_id_`` index with the "
"following sequence of operations:"
msgstr "参照下面的操作顺序查看 ``orders.$_id_`` 索引的数据分配大小："

#: ../source/faq/storage.txt:266
msgid "How do I know when the server runs out of disk space?"
msgstr "我将如何知道服务器在运行中磁盘没有空间了？"

#: ../source/faq/storage.txt:268
msgid ""
"If your server runs out of disk space for data files, you will see "
"something like this in the log:"
msgstr ""
"如果你的服务器中的数据文件在运行中超出磁盘空间，你将会看到类似下面的日志："

#: ../source/faq/storage.txt:280
msgid ""
"The server remains in this state forever, blocking all writes including "
"deletes. However, reads still work. To delete some data and compact, using "
"the :dbcommand:`compact` command, you must restart the server first."
msgstr ""
"服务器会一直保持这种状态，锁定所有写入和删除操作。当然，读取还是可以的。如果"
"你想删除一些数据和压缩数据，可以在重启服务器后使用 :dbcommand:`compact` 命"
"令。"

#: ../source/faq/storage.txt:285
msgid ""
"If your server runs out of disk space for journal files, the server process "
"will exit. By default, :program:`mongod` creates journal files in a sub-"
"directory of :setting:`~storage.dbPath` named ``journal``. You may elect to "
"put the journal files on another storage device using a filesystem mount or "
"a symlink."
msgstr ""
"如果journal文件在你的服务运行过程中超出磁盘空间，服务进程将会结束。 :"
"program:`mongod` 默认在:setting:`~storage.dbPath` 目录中创建journal文件。你"
"可以使用资源管理器或symlink将其移动到其它磁盘。"

#: ../source/faq/storage.txt:293
msgid ""
"If you place the journal files on a separate storage device you will not be "
"able to use a file system snapshot tool to capture a valid snapshot of your "
"data files and journal files."
msgstr ""
"如果你将journal文件放置在一个外置存储器中，你将无法使用snapshot tool获得你的"
"数据文件和journal文件。"

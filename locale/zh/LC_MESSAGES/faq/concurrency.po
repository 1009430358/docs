# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
msgid "FAQ: Concurrency"
msgstr "FAQ: 并发"

#: ../source/faq/concurrency.txt:9
msgid ""
"MongoDB allows multiple clients to read and write a single corpus of data "
"using a locking system to ensure that all clients receive the same view of "
"the data *and* to prevent multiple applications from modifying the exact "
"same pieces of data at the same time. Locks help guarantee that all writes "
"to a single document occur either in full or not at all."
msgstr ""
"MongoDB 通过使用系统锁，允许多个客户端同时读写单独的数据库，并且确保"
"所有的客户端得到同样的数据视图，防止多个应用同时修改同一块数据的确切位"
"置，锁机制帮助确保单一文档的所有写操作完全发生或不发生。"

#: ../source/faq/concurrency.txt:16
msgid ""
"`Presentation on Concurrency and Internals in 2.2 "
"<http://www.mongodb.com/presentations/concurrency-internals-mongodb-2-2>`_"
msgstr ""

#: ../source/faq/concurrency.txt:21
msgid "What type of locking does MongoDB use?"
msgstr "MongoDB使用的是什么类型的锁？"

#: ../source/faq/concurrency.txt:23
msgid ""
"MongoDB uses a readers-writer [#multi-reader-lock-names]_ lock that allows "
"concurrent reads access to a database but gives exclusive access to a single"
" write operation."
msgstr ""
"MongoDB 使用一个readers-writer [#multi-reader-lock-names]_ 锁，它允许"
"并发多个读操作访问数据库，但是只提供唯一写操作访问。"

#: ../source/faq/concurrency.txt:27
msgid ""
"When a read lock exists, many read operations may use this lock. However, "
"when a write lock exists, a single write operation holds the lock "
"exclusively, and no other read *or* write operations may share the lock."
msgstr ""
"当一个读操作锁存在时，许多读操作可以使用这个锁。然而，当一个写操作存在时"
"，一个写操作会排他性的保持这个锁，并且不能有其他的读操作或者写操作可以共"
"享这个锁。"

#: ../source/faq/concurrency.txt:31
msgid ""
"Locks are \"writer greedy,\" which means write locks have preference over "
"reads. When both a read and write are waiting for a lock, MongoDB grants the"
" lock to the write."
msgstr ""
"锁是\"写贪婪,\" 这意味着写操作锁比读操作具有优先权，当写操作和读操作同时等待"
"一个锁，MongoDB会授予读操作这个锁。"

#: ../source/faq/concurrency.txt:35
msgid ""
"You may be familiar with a \"readers-writer\" lock as \"multi-reader\" or "
"\"shared exclusive\" lock. See the Wikipedia page on `Readers-Writer Locks "
"<http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ for more "
"information."
msgstr ""
"你可能很熟悉\"readers-writer\"锁， \"multi-reader\"锁或\"shared exclusive\" 锁。"
"参见 Wikipedia 页 `Readers-Writer 锁 "
"<http://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock>`_ 获得更多 "
"信息。"

#: ../source/faq/concurrency.txt:42
msgid "How granular are locks in MongoDB?"
msgstr "MongoDB中锁的颗粒度是什么？"

#: ../source/faq/concurrency.txt:46
msgid ""
"Beginning with version 2.2, MongoDB implements locks on a per-database basis"
" for most read and write operations. Some global operations, typically short"
" lived operations involving multiple databases, still require a global "
"\"instance\" wide lock. Before 2.2, there is only one \"global\" lock per "
":program:`mongod` instance."
msgstr ""
"从2.2版本开始，MongoDB 在每个数据库基础上实现了大多数读操作和写操作的锁。"
"一些全局操作，通常涉及多个数据库的短暂操作，依然需要一个全局实例大锁，在2.2"
"版本之前，这是仅仅是一个全局锁在每个 :program:`mongod` 实例上。"

#: ../source/faq/concurrency.txt:52
msgid ""
"For example, if you have six databases and one takes a database-level write "
"lock, the other five are still available for read and write. A global lock "
"makes all six databases unavailable during the operation."
msgstr ""
"举个例子，如果你有六个数据库和一个数据库级别的写锁，其他的五个数据库的读写"
"依然有效。一个全局锁在操作期间会使所有的六个数据库都不可用。"

#: ../source/faq/concurrency.txt:57
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""
"在我的 :program:`mongod` 实例中如何看到锁的状态？"

#: ../source/faq/concurrency.txt:59
msgid ""
"For reporting on lock utilization information on locks, use any of the "
"following methods:"
msgstr ""
"要获得锁使用信息的报告，使用下列方法："

#: ../source/faq/concurrency.txt:62 ../source/faq/concurrency.txt:149
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:63
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:64
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:65
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:66
msgid "the `MongoDB Management Service (MMS) <http://mms.mongodb.com/>`_"
msgstr ""

#: ../source/faq/concurrency.txt:68
msgid ""
"Specifically, the :data:`~serverStatus.locks` document in the :doc:`output "
"of serverStatus </reference/command/serverStatus>`, or the "
":data:`~currentOp.locks` field in the :doc:`current operation reporting "
"</reference/method/db.currentOp>` provides insight into the type of locks "
"and amount of lock contention in your :program:`mongod` instance."
msgstr ""
"特别的， :data:`~serverStatus.locks` 文档在 "
" serverStatus </reference/command/serverStatus>`, 或者 "
":data:`~currentOp.locks` 字段在 :doc:`current operation reporting "
"提供了锁的类型和锁争夺的数量的观察在你的 :program:`mongod` 实例."

#: ../source/faq/concurrency.txt:74
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr "终止一个操作，使用 :method:`db.killOp()`."

#: ../source/faq/concurrency.txt:79
msgid "Does a read or write operation ever yield the lock?"
msgstr "一个读操作或写操作产生锁吗？"

#: ../source/faq/concurrency.txt:81
msgid "In some situations, read and write operations can yield their locks."
msgstr "在某些情况下，读操作和写操作产生自己的锁。"

#: ../source/faq/concurrency.txt:83
msgid ""
"Long running read and write operations, such as queries, updates, and "
"deletes, yield under many conditions. MongoDB uses an adaptive algorithms to"
" allow operations to yield locks based on predicted disk access patterns "
"(i.e. page faults.)"
msgstr ""
"长期运行的读操作和写操作，比如查询，更新，删除，在很多情况下会产生锁。"
"MongoDB 基于可预测磁盘访问模式使用一个自适应算法允许操作产生锁。（比"
"如：页面错误。）"

#: ../source/faq/concurrency.txt:88
msgid ""
"MongoDB operations can also yield locks between individual document "
"modification in write operations that affect multiple documents like "
":method:`~db.collection.update()` with the ``multi`` parameter."
msgstr ""
"MongoDB 影响到大量文档的独立文档更新的写操作也能产生锁，比如："
"带有多个参数的 :method:`~db.collection.update()` 。"

#: ../source/faq/concurrency.txt:92
msgid ""
"MongoDB uses heuristics based on its access pattern to predict whether data "
"is likely in physical memory before performing a read. If MongoDB *predicts*"
" that the data is not in physical memory an operation will yield its lock "
"while MongoDB loads the data to memory. Once data is available in memory, "
"the operation will reacquire the lock to complete the operation."
msgstr ""
"MongoDB在执行读操作之前， 使用基于访问模式的探查方法来与之数据是否可能在"
"物理内存中。如果MongoDB *预知* 数据不在物理内存中，操作将产生自己的锁当"
"直到MongoDB 加载数据到内存中。一旦数据在内存中是可用的，这个操作将再次"
"获得这个锁来完成本次操作。"

#: ../source/faq/concurrency.txt:99
msgid ""
"MongoDB does not yield locks when scanning an index even if it predicts that"
" the index is not in memory."
msgstr ""
"MongoDB 从扫描一个索引一直到预测出这个索引不在内存中的时候不会产生锁。"

#: ../source/faq/concurrency.txt:106
msgid "Which operations lock the database?"
msgstr "哪些操作会锁住数据库？"

#: ../source/faq/concurrency.txt:110
msgid ""
"The following table lists common database operations and the types of locks "
"they use."
msgstr "下表列出了常用的数据库操作和他们使用锁的类型。"

#: ../source/includes/table/lock-behavior-per-operation.rst:4
msgid "Operation"
msgstr "操作"

#: ../source/includes/table/lock-behavior-per-operation.rst:6
msgid "Lock Type"
msgstr "锁类型"

#: ../source/includes/table/lock-behavior-per-operation.rst:8
msgid "Issue a query"
msgstr "查询操作"

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:60
msgid "Read lock"
msgstr "读锁"

#: ../source/includes/table/lock-behavior-per-operation.rst:12
msgid "Get more data from a :term:`cursor`"
msgstr "从一个 :term:`cursor` 中获得更多数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:16
msgid "Insert data"
msgstr "插入数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
msgid "Write lock"
msgstr "写锁"

#: ../source/includes/table/lock-behavior-per-operation.rst:20
msgid "Remove data"
msgstr "删除数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:24
msgid "Update data"
msgstr "更新数据"

#: ../source/includes/table/lock-behavior-per-operation.rst:28
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
msgid ""
"Read lock and write lock, unless operations are specified as non-atomic. "
"Portions of map-reduce jobs can run concurrently."
msgstr ""
"读锁和写锁，除非被指定为非原子性操作。部分 map-reduce 的工作可以同时运行。"

#: ../source/includes/table/lock-behavior-per-operation.rst:34
msgid "Create an index"
msgstr "创建一个索引"

#: ../source/includes/table/lock-behavior-per-operation.rst:36
msgid ""
"Building an index in the foreground, which is the default, locks the "
"database for extended periods of time."
msgstr ""
"在前台创建一个索引，这是默认的，会长时间的锁定数据库。"

#: ../source/includes/table/lock-behavior-per-operation.rst:40
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:42
msgid ""
"Write lock. The :method:`db.eval()` method takes a global write lock while "
"evaluating the JavaScript function. To avoid taking this global write lock, "
"you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""
"写锁， :method:`db.eval()`  方法在评估JavaScript函数的时候使用了一个全局写锁，"
"你可以使用 :dbcommand:`eval` 命令，带上  ``nolock: true`` 。"

#: ../source/includes/table/lock-behavior-per-operation.rst:48
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:50
msgid ""
"Write lock. By default, :dbcommand:`eval` command takes a global write lock "
"while evaluating the JavaScript function. If used with ``nolock: true``, the"
" :dbcommand:`eval` command does *not* take a global write lock while "
"evaluating the JavaScript function. However, the logic within the JavaScript"
" function may take write locks for write operations."
msgstr ""
"写锁。默认的， :dbcommand:`eval`  命令在评估JavaScript函数的时候使用一个全局"
"写锁。如果使用参数  ``nolock: true`` ， :dbcommand:`eval` 命令在评估JavaScript函"
"数的时候不会使用全局写锁。然而，JavaScript函数可能为写操作接收一个写锁。"


#: ../source/includes/table/lock-behavior-per-operation.rst:58
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:119
msgid "Which administrative commands lock the database?"
msgstr "哪些管理命令会锁定数据库？"

#: ../source/faq/concurrency.txt:121
msgid ""
"Certain administrative commands can exclusively lock the database for "
"extended periods of time. In some deployments, for large databases, you may "
"consider taking the :program:`mongod` instance offline so that clients are "
"not affected. For example, if a :program:`mongod` is part of a "
":term:`replica set`, take the :program:`mongod` offline and let other "
"members of the set service load while maintenance is in progress."
msgstr ""
"某些管理命令会长时间排他性的锁定数据库。在一些部署中，对于大的数据库，"
"你可能会考虑让  :program:`mongod`  实例脱机，这样客户端不会受影响。"
"比如：如果 :program:`mongod` 是一个 :term:`复制集` 的一部分，让"
":program:`mongod` 脱机让集群中的其他成员来负载，当维护进行中的时候。"

#: ../source/faq/concurrency.txt:128
msgid ""
"The following administrative operations require an exclusive (i.e. write) "
"lock on the database for extended periods:"
msgstr ""
"下列的管理命令会在数据库上申请一个排他性的（比如：写操作）锁很长时间。"

#: ../source/faq/concurrency.txt:131
msgid ""
":method:`db.collection.ensureIndex()`, when issued *without* setting "
"``background`` to ``true``,"
msgstr ""
":method:`db.collection.ensureIndex()` ，在不设置``background`` 为 ``true``"
"时候。"

#: ../source/faq/concurrency.txt:133
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:134
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:135
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:136
msgid ""
":method:`db.createCollection()`, when creating a very large (i.e. many "
"gigabytes) capped collection,"
msgstr ""
":method:`db.createCollection()` ， 在创建一个非常大（比如：很多G）的"
"capped collection ，（固定大小集合）"

#: ../source/faq/concurrency.txt:138
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:139
msgid ""
":method:`db.copyDatabase()`. This operation may lock all databases. See :ref"
":`faq-concurrency-lock-multiple-dbs`."
msgstr ""
":method:`db.copyDatabase()` 。这个操作可能锁住所有的数据库。参见 :ref"
":`faq-concurrency-lock-multiple-dbs`."

#: ../source/faq/concurrency.txt:142
msgid ""
"The following administrative commands lock the database but only hold the "
"lock for a very short time:"
msgstr ""
"下列的管理操作会锁住数据库，但是只保持锁非常短的时间："

#: ../source/faq/concurrency.txt:145
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:146
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:147
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:148
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:150
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:151
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:156
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr "MongoDB 操作是否会锁多个数据库?"

#: ../source/faq/concurrency.txt:158
msgid "The following MongoDB operations lock multiple databases:"
msgstr "下列MongoDB 操作会锁多个数据库："

#: ../source/faq/concurrency.txt:160
msgid ""
":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance "
"at once."
msgstr ""
":method:`db.copyDatabase()` 必须一次锁住整个 :program:`mongod` 实例。"

#: ../source/faq/concurrency.txt:163
msgid ""
":method:`db.repairDatabase()` obtains a global write lock and will block "
"other operations until it finishes."
msgstr ""
":method:`db.repairDatabase()` 获得一个全局写锁，将阻止其他的操作，直到完成。"

#: ../source/faq/concurrency.txt:166
msgid ""
":term:`Journaling <journal>`, which is an internal operation, locks all "
"databases for short intervals. All databases share a single journal."
msgstr ""
":term:`Journaling <journal>` ，这是一个内部操作，在很短的时间内锁住所有的数据"
"库，所有的数据库共享一个日志。"

#: ../source/faq/concurrency.txt:170
msgid ""
":doc:`User authentication </core/authentication>` requires a read lock on "
"the ``admin`` database for deployments using :ref:`2.6 user credentials "
"<admin-system-users-collection>`. For deployments using the 2.4 schema for "
"user credentials, authentication locks the ``admin`` database as well as the"
" database the user is accessing."
msgstr ""
":doc:`User authentication </core/authentication>` 请求一个读锁在 "
" ``admin`` 数据库中， 部署使用 :ref:`2.6 user credentials "
"<admin-system-users-collection>`。 使用 2.4 模式来部署用户凭证，验证锁住 "
"``admin`` 数据库，以及用户访问数据库。"

#: ../source/faq/concurrency.txt:176
msgid ""
"All writes to a replica set's :term:`primary` lock both the database "
"receiving the writes and then the ``local`` database for a short time. The "
"lock for the ``local`` database allows the :program:`mongod` to write to the"
" primary's :term:`oplog` and accounts for a small portion of the total time "
"of the operation."
msgstr ""
"所有对复制集的写操作 :term:`primary` 会锁住数据库接收写操作和 ``local`` 数据库很短"
"的时间。``local`` 数据库的锁允许 :program:`mongod` 写入主节点的 :term:`oplog` "
"，这占用整个操作总时间的很小的部分。"

#: ../source/faq/concurrency.txt:183
msgid "How does sharding affect concurrency?"
msgstr "分片如何影响并发？"

#: ../source/faq/concurrency.txt:185
msgid ""
":term:`Sharding <sharding>` improves concurrency by distributing collections"
" over multiple :program:`mongod` instances, allowing shard servers (i.e. "
":program:`mongos` processes) to perform any number of operations "
"concurrently to the various downstream :program:`mongod` instances."
msgstr ""
":term:`Sharding <sharding>` 通过分布数据集在多个  :program:`mongod`  实例"
"上来改善并发，允许分片服务器 (比如：program:`mongos` 进程) 来执行任意数量"
"的操作并发到不同的下游 :program:`mongod` 实例。"

#: ../source/faq/concurrency.txt:191
msgid ""
"Each :program:`mongod` instance is independent of the others in the shard "
"cluster and uses the MongoDB :ref:`readers-writer lock <faq-concurrency-"
"locking>`. The operations on one :program:`mongod` instance do not block the"
" operations on any others."
msgstr ""
"每个 :program:`mongod` 实例不依赖其他的成员在分片集群中，使用 "
"MongoDB :ref:`readers-writer lock <faq-concurrency-"
"locking>` 。这些操作在一个 :program:`mongod` 实例上不会阻止"
" 在其他成员上的操作。"

#: ../source/faq/concurrency.txt:199
msgid "How does concurrency affect a replica set primary?"
msgstr "并发如何影响复制集中的主节点？"

#: ../source/faq/concurrency.txt:201
msgid ""
"In :term:`replication`, when MongoDB writes to a collection on the "
":term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which "
"is a special collection in the ``local`` database.  Therefore, MongoDB must "
"lock both the collection's database and the ``local`` database. The "
":program:`mongod` must lock both databases at the same time to keep the "
"database consistent and ensure that write operations, even with replication,"
" are \"all-or-nothing\" operations."
msgstr ""
"In :term:`replication`, 在 MongoDB 写操作到 :term:`primary` 一个数据集时， "
"MongoDB 同时写入主节点的 :term:`oplog`, 这是一个特别的集合在 ``local`` 数"
"据库中。  因此, MongoDB 必须同时锁住这个数据集所在的数据库和 ``local`` 数"
"据库。 :program:`mongod` 必须在同一时间同时锁住两个数据库以保持数据库"
"的一致性和确保这个写操作，与复制一样，是 \"all-or-nothing\" （全或无） 的操作。"

#: ../source/faq/concurrency.txt:210
msgid "How does concurrency affect secondaries?"
msgstr "并发如何影响从节点？"

#: ../source/faq/concurrency.txt:212
msgid ""
"In :term:`replication`, MongoDB does not apply writes serially to "
":term:`secondaries <secondary>`. Secondaries collect oplog entries in "
"batches and then apply those batches in parallel. Secondaries do not allow "
"reads while applying the write operations, and apply write operations in the"
" order that they appear in the oplog."
msgstr ""
"在 :term:`复制集` 中, MongoDB 不会连续的申请写操作到:term:`子节点 <secondary>`。"
"子节点批量的收集 oplog  记录，然后并行的申请。字节点在申请这个写操作的时候不允许"
"读操作，并根据他们出现在oplog中的顺序应用这些写操作。"

#: ../source/faq/concurrency.txt:218
msgid ""
"MongoDB can apply several writes in parallel on replica set secondaries, in "
"two phases:"
msgstr ""
"MongoDB 可以申请几个并行的写操作在复制集中的子节点上，分两个阶段："

#: ../source/faq/concurrency.txt:221
msgid ""
"During the first *prefer* phase, under a read lock, the :program:`mongod` "
"ensures that all documents affected by the operations are in memory. During "
"this phase, other clients may execute queries against this member."
msgstr ""
"在第一个 *选择* 阶段， 根据读锁， :program:`mongod` "
"确保所有受操作影响的文档在内存中。在这个阶段中，其他的客户端可能对这个成员"
"执行查询。"

#: ../source/faq/concurrency.txt:226
msgid ""
"A thread pool using write locks applies all write operations in the batch as"
" part of a coordinated write phase."
msgstr ""
"一个使用写锁的线程池申请所有的批量写操作，这是协调写操作阶段的一部分。"

#: ../source/faq/concurrency.txt:230
msgid ""
"What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""
"MongoDB 为JavaScript操作提供哪类并发？"

#: ../source/faq/concurrency.txt:232
msgid ""
"The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations "
"to run at the same time. Prior to 2.4, a single :program:`mongod` could only"
" run a *single* JavaScript operation at once."
msgstr ""
"V8 JavaScript 引擎加入2.4版本，允许多个JavaScript操作同时运行。2.4版本之前，"
"一个单独的 :program:`mongod` 一次只能运行一个 JavaScript 操作。"


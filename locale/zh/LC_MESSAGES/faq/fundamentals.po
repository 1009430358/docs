# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/fundamentals.txt:3
msgid "FAQ: MongoDB Fundamentals"
msgstr "FAQ: MongoDB基础知识"

#: ../source/faq/fundamentals.txt:7
msgid ""
"This document addresses basic high level questions about MongoDB and its "
"use."
msgstr "这篇文档讲述了一些概略性的MongoDB问题及其使用。"

#: ../source/faq/fundamentals.txt:10
msgid ""
"If you don't find the answer you're looking for, check the :doc:`complete "
"list of FAQs </faq>` or post your question to the `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""
"加入你没有发现你想要的答案，可以看一下这个页面： :doc:`complete "
"list of FAQs </faq>` 或者把你问题发布到 `MongoDB User Mailing List"
" <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."

#: ../source/faq/fundamentals.txt:15
msgid "What kind of database is MongoDB?"
msgstr "MongoDB是个什么样的数据库？"

#: ../source/faq/fundamentals.txt:17
msgid ""
"MongoDB is a :term:`document`\\-oriented DBMS. Think of MySQL but with "
":term:`JSON`-like objects comprising the data model, rather than RDBMS "
"tables. Significantly, MongoDB supports neither joins nor transactions. "
"However, it features secondary indexes, an expressive query language, atomic"
" writes on a per-document level, and fully-consistent reads."
msgstr ""
"MongoDB是一个文档型的数据库。和MySQL类似但是用JSON作为数据模型，而不是关系型表。"
"MongoDB不支持关联或者强事务。但是MongoDB支持二级索引，丰富的查询语法，在文档级别有"
"原子性写操作，读操作有很好的一致性。"

#: ../source/faq/fundamentals.txt:23
msgid ""
"Operationally, MongoDB features master-slave replication with automated "
"failover and built-in horizontal scaling via automated range-based "
"partitioning."
msgstr ""
"在部署方面，MongoDB支持Master-Slave的复制方式，支持自动failover和以分布数据"
"方式进行水平扩展。"

#: ../source/faq/fundamentals.txt:29
msgid ""
"MongoDB uses :term:`BSON`, a binary object format similar to, but more "
"expressive than :term:`JSON`."
msgstr ""
"MongoDB使用BSON，一种和JSON类似但是比JSON更高效的二进制对象格式，作为存储方式。"
""

#: ../source/faq/fundamentals.txt:33
msgid "Do MongoDB databases have tables?"
msgstr "MongoDB有表吗？"

#: ../source/faq/fundamentals.txt:35
msgid ""
"Instead of tables, a MongoDB database stores its data in :term:`collections "
"<collection>`, which are the rough equivalent of RDBMS tables. A collection "
"holds one or more :term:`documents <document>`, which corresponds to a "
"record or a row in a relational database table, and each document has one or"
" more fields, which corresponds to a column in a relational database table."
msgstr ""
"MongoDB数据库用:term:`集合 <collection>`来组织文档，类似于关系型数据库的表。"
"一个集合内可以有一个或多个:term:`文档 <document>`。文档的概念类似于关系型数据库的一个行,"
"但是有更完整的信息。每个文档有多个字段，一个字段和关系型的一个列类似。"

#: ../source/faq/fundamentals.txt:43
msgid ""
"Collections have important differences from RDBMS tables. Documents in a "
"single collection may have a unique combination and set of fields. Documents"
" need not have identical fields. You can add a field to some documents in a "
"collection without adding that field to all documents in the collection."
msgstr ""
"集合和RDBMS的表很不相同。一个集合内的文档可能会有不同的字段和结构。你可以只对某些"
"文档增加一个字段，而不是所有的文档。"

#: ../source/faq/fundamentals.txt:0 ../source/faq/fundamentals.txt:0
msgid "See"
msgstr "参见"

#: ../source/faq/fundamentals.txt:54
msgid "Do MongoDB databases have schemas?"
msgstr "MongoDB需要模式(schema)吗？"

#: ../source/faq/fundamentals.txt:56
msgid ""
"MongoDB uses dynamic schemas. You can create collections without defining "
"the structure, i.e. the fields or the types of their values, of the "
"documents in the collection. You can change the structure of documents "
"simply by adding new fields or deleting existing ones. Documents in a "
"collection need not have an identical set of fields."
msgstr ""
"MongoDB使用动态模式。你可以建立一个没有预定义模式的集合。你可以通过直接在文档"
"内增加或删除字段的方式修改文档的结构。文档在一个集合内不需要有相同的字段集。"

#: ../source/faq/fundamentals.txt:62
msgid ""
"In practice, it is common for the documents in a collection to have a "
"largely homogeneous structure; however, this is not a requirement. MongoDB's"
" flexible schemas mean that schema migration and augmentation are very easy "
"in practice, and you will rarely, if ever, need to write scripts that "
"perform \"alter table\" type operations, which simplifies and facilitates "
"iterative software development with MongoDB."
msgstr ""
"在实际使用中，一般一个集合内的数据多半会有相同或者类似的结构。但是这个不是一个必要的条件。"
"MongoDB灵活的数据模式意味着模式转换和修改非常简单。你很少需要写个脚本来执行 \"alter table\""
"类型的DDL操作。这一点对于敏捷式开发有非常好的帮助。"


#: ../source/faq/fundamentals.txt:73
msgid "What languages can I use to work with MongoDB?"
msgstr "我可以用什么编程语言来喝MongoDB交互？"

#: ../source/faq/fundamentals.txt:75
msgid ""
"MongoDB :term:`client drivers <driver>` exist for all of the most popular "
"programming languages, and many other ones. See the :ecosystem:`latest list "
"of drivers </drivers>` for details."
msgstr ""
"MongoDB支持几乎所有常用的编程语言。参见:ecosystem:`latest list of drivers </drivers>` "


#: ../source/faq/fundamentals.txt:81
msgid ":doc:`/applications/drivers`."
msgstr ""

#: ../source/faq/fundamentals.txt:84
msgid "Does MongoDB support SQL?"
msgstr "MongoDB支持SQL吗？"

#: ../source/faq/fundamentals.txt:86
msgid "No."
msgstr "不支持。"

#: ../source/faq/fundamentals.txt:88
msgid ""
"However, MongoDB does support a rich, ad-hoc query language of its own."
msgstr "但是，MongoDB自带一种丰富的动态查询语言。"

#: ../source/faq/fundamentals.txt:91
msgid ":doc:`/reference/operator`"
msgstr ""

#: ../source/faq/fundamentals.txt:94
msgid "What are typical uses for MongoDB?"
msgstr "典型的MongoDB应用是什么？"

#: ../source/faq/fundamentals.txt:96
msgid ""
"MongoDB has a general-purpose design, making it appropriate for a large "
"number of use cases. Examples include content management systems, mobile "
"applications, gaming, e-commerce, analytics, archiving, and logging."
msgstr ""
"MongoDB的定位是一种通用型数据库，它可以使用在很多应用场景下面。如内容管理，"
"移动应用，游戏，电商，分析，存档和日志等等"

#: ../source/faq/fundamentals.txt:101
msgid ""
"Do not use MongoDB for systems that require SQL, joins, and multi-object "
"transactions."
msgstr ""
"MongoDB不适合那些需要使用SQL，关联和多文档事务的应用。"

#: ../source/faq/fundamentals.txt:105
msgid "Does MongoDB support ACID transactions?"
msgstr "MongoDB支持ACID事务吗？"

#: ../source/faq/fundamentals.txt:107
msgid "MongoDB does not support multi-document transactions."
msgstr "MongoDB不支持多文档事务。"

#: ../source/faq/fundamentals.txt:109
msgid ""
"However, MongoDB does provide atomic operations on a single document. Often "
"these document-level atomic operations are sufficient to solve problems that"
" would require ACID transactions in a relational database."
msgstr ""
"然而，MongoDB对单文档支持原子性操作。往往这种文档级的原子性操作可以满足"
"很多在关系型数据库中需要事务的应用场景。"

#: ../source/faq/fundamentals.txt:114
msgid ""
"For example, in MongoDB, you can embed related data in nested arrays or "
"nested documents within a single document and update the entire document in "
"a single atomic operation. Relational databases might represent the same "
"kind of data with multiple tables and rows, which would require transaction "
"support to update the data atomically."
msgstr ""
"举例来说，你可以把相关数据内嵌在一个文档的数组字段或者嵌套文档内，对这些"
"数据的更新可以在一个原子操作内完成。在关系型数据库中同样的数据可能分布在"
"不同的表和列内，在那样的情况下需要强事务支持来保证那些数据更新的原子性。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr ""
"MongoDB允许客户端读取落盘之前文档的修改，不管你的写安全机制和恢复日志设置如何。"
"正因如此，应用程序可能会观察到两种不同的行为："

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr ""
"对那些有多个同时读写操作的应用，MongoDB会允许客户端读取一个写操作的结果，"
"哪怕那个写操作还没返回。"


#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""
"加入 mongod 在日志落盘前异常终止，哪怕写操作已经正常完成，一个查询可能会读到"
"一些数据，而那些数据在mongod重启之后将不存在。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr ""

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr ""

#: ../source/faq/fundamentals.txt:123
msgid "Does MongoDB require a lot of RAM?"
msgstr ""
“MongoDB需要很多内存么？"

#: ../source/faq/fundamentals.txt:125
msgid ""
"Not necessarily. It's certainly possible to run MongoDB on a machine with a "
"small amount of free RAM."
msgstr ""

#: ../source/faq/fundamentals.txt:128
msgid ""
"MongoDB automatically uses all free memory on the machine as its cache. "
"System resource monitors show that MongoDB uses a lot of memory, but its "
"usage is dynamic. If another process suddenly needs half the server's RAM, "
"MongoDB will yield cached memory to the other process."
msgstr ""

#: ../source/faq/fundamentals.txt:133
msgid ""
"Technically, the operating system's virtual memory subsystem manages "
"MongoDB's memory. This means that MongoDB will use as much free memory as it"
" can, swapping to disk as needed. Deployments with enough memory to fit the "
"application's working data set in RAM will achieve the best performance."
msgstr ""

#: ../source/faq/fundamentals.txt:139
msgid ""
":doc:`/faq/diagnostics` for answers to additional questions about MongoDB "
"and Memory use."
msgstr ""

#: ../source/faq/fundamentals.txt:143
msgid "How do I configure the cache size?"
msgstr ""

#: ../source/faq/fundamentals.txt:145
msgid ""
"MongoDB has no configurable cache. MongoDB uses all *free* memory on the "
"system automatically by way of memory-mapped files. Operating systems use "
"the same approach with their file system caches."
msgstr ""

#: ../source/faq/fundamentals.txt:152
msgid ""
"Does MongoDB require a separate caching layer for application-level caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:154
msgid ""
"No. In MongoDB, a document's representation in the database is similar to "
"its representation in application memory. This means the database already "
"stores the usable form of data, making the data usable in both the "
"persistent store and in the application cache. This eliminates the need for "
"a separate caching layer in the application."
msgstr ""

#: ../source/faq/fundamentals.txt:160
msgid ""
"This differs from relational databases, where caching data is more "
"expensive. Relational databases must transform data into object "
"representations that applications can read and must store the transformed "
"data in a separate cache: if these transformation from data to application "
"objects require joins, this process increases the overhead related to using "
"the database which increases the importance of the caching layer."
msgstr ""

#: ../source/faq/fundamentals.txt:169
msgid "Does MongoDB handle caching?"
msgstr ""

#: ../source/faq/fundamentals.txt:171
msgid ""
"Yes. MongoDB keeps all of the most recently used data in RAM. If you have "
"created indexes for your queries and your working data set fits in RAM, "
"MongoDB serves all queries from memory."
msgstr ""

#: ../source/faq/fundamentals.txt:175
msgid ""
"MongoDB does not implement a query cache: MongoDB serves all queries "
"directly from the indexes and/or data files."
msgstr ""

#: ../source/faq/fundamentals.txt:179
msgid "Are writes written to disk immediately, or lazily?"
msgstr ""

#: ../source/faq/fundamentals.txt:181
msgid ""
"Writes are physically written to the :doc:`journal </core/journaling>` "
"within 100 milliseconds, by default. At that point, the write is \"durable\""
" in the sense that after a pull-plug-from-wall event, the data will still be"
" recoverable after a hard restart. See "
":setting:`~storage.journal.commitIntervalMs` for more information on the "
"journal commit window."
msgstr ""

#: ../source/faq/fundamentals.txt:187
msgid ""
"While the journal commit is nearly instant, MongoDB writes to the data files"
" lazily. MongoDB may wait to write data to the data files for as much as one"
" minute by default. This does not affect durability, as the journal has "
"enough information to ensure crash recovery. To change the interval for "
"writing to the data files, see :setting:`~storage.syncPeriodSecs`."
msgstr ""

#: ../source/faq/fundamentals.txt:194
msgid "What language is MongoDB written in?"
msgstr ""

#: ../source/faq/fundamentals.txt:196
msgid ""
"MongoDB is implemented in C++. :term:`Drivers <driver>` and client libraries"
" are typically written in their respective languages, although some drivers "
"use C extensions for better performance."
msgstr ""

#: ../source/faq/fundamentals.txt:203
msgid "What are the limitations of 32-bit versions of MongoDB?"
msgstr ""

#: ../source/faq/fundamentals.txt:205
msgid ""
"MongoDB uses :ref:`memory-mapped files <faq-storage-memory-mapped-files>`. "
"When running a 32-bit build of MongoDB, the total storage size for the "
"server, including data and indexes, is 2 gigabytes. For this reason, do not "
"deploy MongoDB to production on 32-bit machines."
msgstr ""

#: ../source/faq/fundamentals.txt:211
msgid ""
"If you're running a 64-bit build of MongoDB, there's virtually no limit to "
"storage size. For production deployments, 64-bit builds and operating "
"systems are strongly recommended."
msgstr ""

#: ../source/faq/fundamentals.txt:215
msgid ""
"\"`Blog Post: 32-bit Limitations <http://blog.mongodb.org/post/137788967/32"
"-bit-limitations>`_\""
msgstr ""

#: ../source/faq/fundamentals.txt:219
msgid ""
"32-bit builds disable :term:`journaling <journal>` by default because "
"journaling further limits the maximum amount of data that the database can "
"store."
msgstr ""

#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: 2016-07-02 16:16+0800\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: Greg Huang <debin.huang@gmail.com>\n"
"Language-Team: \n"
"Language: zh_CN\n"
"X-Generator: Poedit 1.8.8\n"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:3
msgid "Perform Quorum Reads on Replica Sets"
msgstr "在复制集上执行Quorum投票读取"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:10
msgid "Overview"
msgstr "概览"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:12
msgid ""
"When reading from the primary of a replica set, it is possible to read data "
"that is stale or not durable, depending on the read concern used [#edge-"
"cases-2-primaries]_. With a read concern level of :readconcern:`\"local\"`, "
"a client can read data before it is :term:`durable`; that is, before they "
"have propagated to enough replica set members to avoid a rollback. A read "
"concern level of :readconcern:`\"majority\"` guarantees durable reads but "
"may return stale data that has been overwritten by another write operation."
msgstr ""
"当读取复制集的主节点读取数据的时候，根据使用read conern [#edge-cases-2-"
"primaries]_的级别，有可能读到的数据是过期的或者没有持久化的数据。使用read "
"conern的级别为:readconcern:`\"local\"`时客户端可能在数据:term:`durable`之前"
"就被读取，这就是说在这些数据为了实现容错而传播到足够多的复制集成员上之前就会"
"被读到。当read concern级别为:readconcern:`\"majority\"`将保证持久化读取，但"
"是有可能读到的是过期的数据，这些数据有可能已经被写操作覆盖掉了。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:21
msgid ""
"This tutorial outlines a procedure that uses :method:`db.collection."
"findAndModify()` to read data that is not stale and cannot be rolled back. "
"To do so, the procedure uses the :method:`~db.collection.findAndModify()` "
"method with a :ref:`write concern <write-concern>` to modify a dummy field "
"in a document. Specifically, the procedure requires that:"
msgstr ""
"本教程将概要的介绍如何使用:method:`db.collection.findAndModify()`方法读取不"
"是过期的数据并且不能被回滚的过程。为了实现我们的目的，这个过程将使用通过:"
"ref:`write concern <write-concern>`关键字来使用method:`~db.collection."
"findAndModify()`方法来修改一个文档中虚拟的字段。这个过程特别的还需要："

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:28
msgid ""
":method:`db.collection.findAndModify()` use an **exact** match query, and "
"a :doc:`unique index </core/index-unique>` **must exist** to satisfy the "
"query."
msgstr ""
":method:`db.collection.findAndModify()`使用*精确*匹配查询和一个:doc:`unique "
"index </core/index-unique>`**必须存在**的数据来满足查询。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:32
msgid ""
":method:`~db.collection.findAndModify()` must actually modify a document; i."
"e. result in a change to the document."
msgstr ""
":method:`~db.collection.findAndModify()`必须实际修改一个文档，也就是说结果一"
"定会修改这个文档。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:35
msgid ""
":method:`~db.collection.findAndModify()` must use the write concern :"
"writeconcern:`{ w: \"majority\" } <\"majority\">`."
msgstr ""
":method:`~db.collection.findAndModify()`必须使用write concern:writeconcern:"
"`{ w: \"majority\" } <\"majority\">`。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:40
msgid ""
"The \"quorum read\" procedure has a substantial cost over simply using a "
"read concern of :readconcern:`\"majority\"` because it incurs write latency "
"rather than read latency. This technique should only be used if staleness "
"is absolutely intolerable."
msgstr ""
"“Quorum投票读取”过程会耗用比简单的使用:readconcern:`\"majority\"`的read "
"concern操作更多的资源，因为它将导致写入延迟而不是读取延迟。这种技术应该只使"
"用在过期数据无法容忍的场景下。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:46
msgid "Prerequisites"
msgstr "前提"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:48
msgid ""
"This tutorial reads from a collection named ``products``. Initialize the "
"collection using the following operation."
msgstr "本教程读取一个名为``products``的集合。使用如下操作初始化这个集合。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:77
msgid ""
"The documents in this collection contain a dummy field named "
"``_dummy_field`` that will be incremented by the :method:`db.collection."
"findAndModify()` in the tutorial. If the field does not exist, the :method:"
"`db.collection.findAndModify()` operation will add the field to the "
"document. The purpose of the field is to ensure that the :method:`db."
"collection.findAndModify()` results in a modification to the document."
msgstr ""
"本教程中文档的集合有一个名为``_dummy_field``的虚拟字段，这个字段会使用:"
"method:`db.collection.findAndModify()`进行自增。如果字段不存在:method:`db."
"collection.findAndModify()`操作将在文档中增加这个字段。这个字段的目的是确保:"
"method:`db.collection.findAndModify()`结果文档的修改是在一个操作中完成的。"

#: ../source/tutorial/perform-findAndModify-quorum-reads.txt:86
msgid "Procedure"
msgstr "步骤"

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may "
"*transiently* believe that they are the primary, but at most, one of them "
"will be able to complete writes with :writeconcern:`{ w: \"majority\" } <"
"\"majority\">` write concern. The node that can complete :writeconcern:"
"`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients "
"that connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`, and new writes to the former "
"primary will eventually roll back."
msgstr ""
"在:ref:`some circumstances <edge-cases>`中，复制集中的两个节点可能会在*极短*"
"的时间内都认为自己是主节点，但是至多他们中的一个可以使用writeconcern:`{ w: "
"\"majority\" } <\"majority\">`完成写操作的write concern。完成:writeconcern:"
"`{ w: \"majority\" } <\"majority\">`写入操作的节点将是主节点，而另外一个还没"
"有意识到自己已经降级的节点，通常降级的原因是由于:term:`network partition`。"
"当这种情况发生后连接到这个降级节点的客户端会发现这些数据已经不是最新的了，尽"
"管请求使用了读偏好:readmode:`primary`，新写入这个前主节点的数据最终将回滚。"

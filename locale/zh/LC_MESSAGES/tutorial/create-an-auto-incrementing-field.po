#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: 2015-01-05 16:56+0800\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.9\n"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:3
msgid "Create an Auto-Incrementing Sequence Field"
msgstr "创建一个自增的序列字段"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:8
msgid "Synopsis"
msgstr "概要"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:10
msgid ""
"MongoDB reserves the ``_id`` field in the top level of all documents as a "
"primary key. ``_id`` must be unique, and always has an index with a :ref:"
"`unique constraint <index-type-unique>`. However, except for the unique "
"constraint you can use any value for the ``_id`` field in your collections. "
"This tutorial describes two methods for creating an incrementing sequence "
"number for the ``_id`` field using the following:"
msgstr ""
"MongoDB使用所有文档中的顶层文档里的 ``_id`` 字段作为主键。 ``_id`` 必须是唯一"
"的，并且总是有使用 :ref:`unique constraint <index-type-unique>` 的索引。然"
"而，除了唯一约束外，你可以在你的集合中为 ``_id`` 字段使用任何值。这个教程介绍"
"了为 ``_id`` 字段创建自增序列数字的两种方法，如下："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:18
msgid ":ref:`auto-increment-counters-collection`"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:20
msgid ":ref:`auto-increment-optimistic-loop`"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:23
msgid "Considerations"
msgstr "注意事项"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:25
msgid ""
"Generally in MongoDB, you would not use an auto-increment pattern for the "
"``_id`` field, or any field, because it does not scale for databases with "
"large numbers of documents. Typically the default value :term:`ObjectId "
"<objectid>` is more ideal for the ``_id``."
msgstr ""
"通常地，在MongoDB里，你不要为 ``_id`` 字段活或者任何字段使用自增长模型，因为"
"它可扩展性不适合有大量文档的数据库（because it does not scale for databases "
"with large numbers of documents）。通常默认值 :term:`ObjectId <objectid>` 对"
"于 ``_id`` 来说是更加理想的。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:31
msgid "Procedures"
msgstr "（创建）过程"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:36
msgid "Use Counters Collection"
msgstr "使用计数集合"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:39
msgid "Counter Collection Implementation"
msgstr "计数集合实现"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:40
msgid ""
"Use a separate ``counters`` collection to track the *last* number sequence "
"used. The ``_id`` field contains the sequence name and the ``seq`` field "
"contains the last value of the sequence."
msgstr ""
"使用一个单独的 ``counters`` 集合来记录序列使用的 *最新的* 数字。 ``_id`` 字段"
"包含序列名和包含序列最新值的 ``seq`` 字段。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:44
msgid ""
"Insert into the ``counters`` collection, the initial value for the "
"``userid``:"
msgstr "把 ``userid`` 的初始值插入到 ``counters`` 集合中："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:55
msgid ""
"Create a ``getNextSequence`` function that accepts a ``name`` of the "
"sequence. The function uses the :method:`~db.collection.findAndModify()` "
"method to atomically increment the ``seq`` value and return this new value:"
msgstr ""
"创建一个接收序列 ``name`` 的 ``getNextSequence`` 函数。这个函数使用 :method:"
"`~db.collection.findAndModify()` 方法来原子地增加 ``seq`` 值并且返回这个新的"
"值。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:74
msgid ""
"Use this ``getNextSequence()`` function during :method:`~db.collection."
"insert()`."
msgstr ""
"在 :method:`~db.collection.insert()` 期间使用 ``getNextSequence()`` 函数。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:93
#: ../source/tutorial/create-an-auto-incrementing-field.txt:250
msgid "You can verify the results with :method:`~db.collection.find()`:"
msgstr "你可以使用 :method:`~db.collection.find()` 方法验证结果："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:99
#: ../source/tutorial/create-an-auto-incrementing-field.txt:256
msgid "The ``_id`` fields contain incrementing sequence values:"
msgstr " ``_id`` 字段包含递增的序列值："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:113
msgid "``findAndModify`` Behavior"
msgstr "``findAndModify`` 行为"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:115
msgid ""
"When :method:`~db.collection.findAndModify()` includes the ``upsert: true`` "
"option **and** the query field(s) is not uniquely indexed, the method could "
"insert a document multiple times in certain circumstances. For instance, if "
"multiple clients each invoke the method with the same query condition and "
"these methods complete the find phase before any of methods perform the "
"modify phase, these methods could insert the same document."
msgstr ""
"当 :method:`~db.collection.findAndModify()` 包含 ``upsert: true`` 选项 **并且"
"** 查询字段不是唯一索引的时候，在某些情况下，这个方法可能会多次插入一个文档。"
"例如，如果多个客户端每一个都使用相同的查询条件调用方法，并且这些方法在任一个"
"方法执行修改阶段之前完成查找阶段，这些方法可能会插入相同的文档。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:123
msgid ""
"In the ``counters`` collection example, the query field is the ``_id`` "
"field, which always has a unique index. Consider that the :method:`~db."
"collection.findAndModify()` includes the ``upsert: true`` option, as in the "
"following modified example:"
msgstr ""
"在 ``counters`` 集合例子中，查询字段是 ``_id`` 字段，它总是有一个唯一的索引。"
"考虑 :method:`~db.collection.findAndModify()` 包含 ``upsert: true`` 选项，如"
"下面的修改所示："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:144
msgid ""
"If multiple clients were to invoke the ``getNextSequence()`` method with the "
"same ``name`` parameter, then the methods would observe one of the following "
"behaviors:"
msgstr ""
"如果多个客户端调用拥有相同 ``name`` 参数的 ``getNextSequence()`` 方法，那么这"
"个方法将遵守以下行为之一："

#: ../source/tutorial/create-an-auto-incrementing-field.txt:148
msgid ""
"Exactly one :method:`~db.collection.findAndModify()` would successfully "
"insert a new document."
msgstr ""
"恰好一个 :method:`~db.collection.findAndModify()` 方法成功插入一个新的文档。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:151
msgid ""
"Zero or more :method:`~db.collection.findAndModify()` methods would update "
"the newly inserted document."
msgstr ""
"零个或更多的 :method:`~db.collection.findAndModify()` 方法更新那个新插入的文"
"档。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:154
msgid ""
"Zero or more :method:`~db.collection.findAndModify()` methods would fail "
"when they attempted to insert a duplicate."
msgstr ""
"零个或多个 :method:`~db.collection.findAndModify()` 方法尝试插入一个重复数据"
"的时候失败。"

#: ../source/tutorial/create-an-auto-incrementing-field.txt:157
msgid ""
"If the method fails due to a unique index constraint violation, retry the "
"method. Absent a delete of the document, the retry should not fail."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:164
msgid "Optimistic Loop"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:166
msgid ""
"In this pattern, an *Optimistic Loop* calculates the incremented ``_id`` "
"value and attempts to insert a document with the calculated ``_id`` value. "
"If the insert is successful, the loop ends. Otherwise, the loop will iterate "
"through possible ``_id`` values until the insert is successful."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:172
msgid ""
"Create a function named ``insertDocument`` that performs the \"insert if not "
"present\" loop. The function wraps the :method:`~db.collection.insert()` "
"method and takes a ``doc`` and a ``targetCollection`` arguments."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:177
msgid ""
"The :method:`db.collection.insert()` method now returns a :ref:`writeresults-"
"insert` object that contains the status of the operation. Previous versions "
"required an extra :method:`db.getLastErrorObj()` method call."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:208
msgid "The ``while (1)`` loop performs the following actions:"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:210
msgid ""
"Queries the ``targetCollection`` for the document with the maximum ``_id`` "
"value."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:213
msgid "Determines the next sequence value for ``_id`` by:"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:215
msgid ""
"adding ``1`` to the returned ``_id`` value if the returned cursor points to "
"a document."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:218
msgid ""
"otherwise: it sets the next sequence value to ``1`` if the returned cursor "
"points to no document."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:221
msgid ""
"For the ``doc`` to insert, set its ``_id`` field to the calculated sequence "
"value ``seq``."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:224
msgid "Insert the ``doc`` into the ``targetCollection``."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:226
msgid ""
"If the insert operation errors with duplicate key, repeat the loop.  "
"Otherwise, if the insert operation encounters some other error or if the "
"operation succeeds, break out of the loop."
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:230
msgid "Use the ``insertDocument()`` function to perform an insert:"
msgstr ""

#: ../source/tutorial/create-an-auto-incrementing-field.txt:269
msgid ""
"The ``while`` loop may iterate many times in collections with larger insert "
"volumes."
msgstr ""

#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.9\n"

#: ../source/applications/replication.txt:3
msgid "Replica Set Read and Write Semantics"
msgstr "复制集的读与写"

#: ../source/applications/replication.txt:7
msgid ""
"From the perspective of a client application, whether a MongoDB instance is "
"running as a single server (i.e. \"standalone\") or a :term:`replica set` is "
"transparent."
msgstr ""
"无论MongoDB是以单个节点 (i.e.  \"单节点\" )或是复制集的形式运行，对于应用程序"
"来说它都是透明的。"

#: ../source/applications/replication.txt:11
msgid ""
"By default, in MongoDB, read operations to a replica set return results from"
" the :doc:`primary </core/replica-set-primary>`."
msgstr ""
"默认情况下，MongoDB的读请求将会在 :doc:`主节点 </core/replica-set-primary>` "
"上执行，并一直与最后一次写操作保持数据的 :term:`一致性 <strict "
"consistency>` 。"

#: ../source/applications/replication.txt:14
msgid ""
"Users may configure :term:`read preference` on a per-connection basis to "
"prefer that the read operations return results from the :term:`secondary` "
"members. If clients configure the :term:`read preference` to permit "
"secondary reads, read operations can return data from :term:`secondary` "
"members that have not replicated more recent write operations."
msgstr ""
"用户可以配置每一个连接的 :term:`复制集读选项 <read preference>` 来让其将读请"
"求发送到 :term:`从节点 <secondary>` 上。"

#: ../source/applications/replication.txt:21
msgid ""
"This behavior is sometimes characterized as :term:`eventual consistency` "
"because the secondary member's state will *eventually* reflect the primary's"
" state and MongoDB cannot guarantee :term:`strict consistency` for read "
"operations from secondary members. [#edge-cases-2-primaries]_"
msgstr ""
"这种情况的出现一般与数据的 :term:`最终一致性 <eventual consistency>` 有关因为"
"虽然从节点的数据集最终会与主节点一致，但当在从节点上进行读操作的时候，MongoDB"
"不能保障数据的 :term:`严格一致性 <strict consistency>`  。"

#: ../source/applications/replication.txt:29
msgid ""
"In MongoDB, clients can see the results of writes before they are made "
"durable:"
msgstr ""
"为了确保从从节点上进行读操作时的数据一致性，我们可以配置 :term:`客户端 "
"<client>`和  :term:`驱动 <driver>` 来确保写操作在应用到复制集中所有节点后才算"
"成功完成。 参见 :doc:`/core/write-concern` 以获得更多信息。此外，这样的配置也"
"可以在故障切换的时候防止 :doc:`/core/replica-set-rollbacks` 。"

#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other clients"
" can see the result of the write operations before the write operation is "
"acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:5
msgid ""
"Clients can read data which may be subsequently :doc:`rolled back </core"
"/replica-set-rollbacks>`."
msgstr ""

#: ../source/applications/replication.txt:34
msgid ""
":term:`Sharded clusters <sharded cluster>` where the shards are also replica "
"sets provide the same operational semantics with regards to write and read "
"operations."
msgstr ""
"在分片为复制集的 :term:`分片集群 <sharded cluster>` 中也需要注意读操作与写操"
"作的操作语义。"

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:5
msgid ":doc:`/core/replica-set-write-concern`"
msgstr " :doc:`/core/replica-set-write-concern` "

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:4
msgid ""
"Write concern is the guarantee an application requires from MongoDB to "
"consider a write operation successful."
msgstr "安全写级别确保了应用程序写入MongoDB的操作的成功。"

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:9
msgid ":doc:`/core/read-preference`"
msgstr " :doc:`/core/read-preference` "

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:8
msgid ""
"Applications specify *read preference* to control how drivers direct read "
"operations to members of the replica set."
msgstr ""
"应用程序通过指定 *复制集读选项* 来控制驱动对发送到复制集的读操作进行管理。"

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:12
msgid ":doc:`/core/read-preference-mechanics`"
msgstr " :doc:`/core/read-preference-mechanics` "

#: ../source/includes/toc/dfn-list-replica-set-read-write-semantics.rst:12
msgid ""
"With replica sets, read operations may have additional semantics and "
"behavior."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In some circumstances, two nodes in a replica set may *transiently* believe "
"that they are the primary, but at most, one of them will be able to complete"
" writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
"complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`."
msgstr ""

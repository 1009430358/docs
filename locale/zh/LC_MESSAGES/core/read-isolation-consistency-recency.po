#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/read-isolation-consistency-recency.txt:3
msgid "Read Isolation, Consistency, and Recency"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:0
msgid "On this page"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:14
msgid "Isolation Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:17
msgid "Read Uncommitted"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
msgid ""
"In MongoDB, clients can see the results of writes before the writes are "
":term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other clients"
" using :readconcern:`\"local\"` (i.e. the default) readConcern can see the "
"result of a write operation before the write operation is acknowledged to "
"the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
msgid ""
"Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can "
"read data which may be subsequently :doc:`rolled back </core/replica-set-"
"rollbacks>`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:21
msgid ""
"Read uncommitted is the default isolation level and applies to "
":program:`mongod` standalone instances as well as to replica sets and "
"sharded clusters."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:26
msgid "Read Uncommitted And Single Document Atomicity"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
msgid ""
"Write operations are atomic with respect to a single document; i.e. if a "
"write is updating multiple fields in the document, a reader will never see "
"the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
msgid ""
"With a standalone :program:`mongod` instance, a set of read and write "
"operations to a single document is serializable. With a replica set, a set "
"of read and write operations to a single document is serializable *only* in "
"the absence of a rollback."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:30
msgid ""
"However, although the readers may not see a *partially* updated document, "
"read uncommitted means that concurrent readers may still see the updated "
"document before the changes are :term:`durable`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:35
msgid "Read Uncommitted And Multiple Document Write"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
msgid ""
"When a single write operation modifies multiple documents, the modification "
"of each document is atomic, but the operation as a whole is not atomic and "
"other operations may interleave. However, you can *isolate* a single write "
"operation that affects multiple documents using the :update:`$isolated` "
"operator."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:39
msgid ""
"Without isolating the multi-document write operations, MongoDB exhibits the "
"following behavior:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
msgid ""
"Non-point-in-time read operations. Suppose a read operation begins at time "
"*t*\\ :sub:`1` and starts reading documents. A write operation then commits "
"an update to one of the documents at some later time *t*\\ :sub:`2`. The "
"reader may see the updated version of the document, and therefore does not "
"see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
msgid ""
"Non-serializable operations. Suppose a read operation reads a document *d*\\"
" :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ "
":sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write "
"dependency such that, if the operations were to be serialized, the read "
"operation must precede the write operation. But also suppose that the write "
"operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the "
"read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ "
":sub:`4`. This introduces a write-read dependency which would instead "
"require the read operation to come *after* the write operation in a "
"serializable schedule. There is a dependency cycle which makes "
"serializability impossible."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
msgid ""
"Reads may miss matching documents that are updated during the course of the "
"read operation."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:1
msgid ""
"Using the :update:`$isolated` operator, a write operation that affects "
"multiple documents can prevent other processes from interleaving once the "
"write operation modifies the first document. This ensures that no client "
"sees the changes until the write operation completes or errors out."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:7
msgid ""
":update:`$isolated` does **not** work with :term:`sharded clusters <sharded "
"cluster>`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:10
msgid ""
"An isolated write operation does not provide \"all-or-nothing\" atomicity. "
"That is, an error during the write operation does not roll back all its "
"changes that preceded the error."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:16
msgid ""
":update:`$isolated` operator causes write operations to acquire an exclusive"
" lock on the collection, *even for document-level locking storage engines* "
"such as WiredTiger. That is, :update:`$isolated` operator will make "
"WiredTiger single-threaded for the duration of the operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:46
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:51
msgid "Cursor Snapshot"
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:2
msgid ""
"MongoDB cursors can return the same document more than once in some "
"situations. As a cursor returns documents other operations may interleave "
"with the query. If some of these operations are :doc:`updates </tutorial"
"/update-documents>` that cause the document to move (in the case of MMAPv1, "
"caused by document growth) or that change the indexed field on the index "
"used by the query; then the cursor will return the same document more than "
"once."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:10
msgid ""
"In very specific cases, you can isolate the cursor from returning the same "
"document more than once by using the :method:`cursor.snapshot()` method. "
":method:`~cursor.snapshot()` guarantees that the query will return each "
"document no more than once."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:18
msgid ""
"The :method:`~cursor.snapshot()` does not guarantee that the data returned "
"by the query will reflect a single moment in time *nor* does it provide "
"isolation from insert or delete operations."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:23
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded "
"collections <sharding>`."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:26
msgid ""
"You **cannot** use :method:`~cursor.snapshot()` with the "
":method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:29
msgid ""
"As an alternative, if your collection has a field or fields that are never "
"modified, you can use a *unique* index on this field or these fields to "
"achieve a similar result as the :method:`~cursor.snapshot()`. Query with "
":method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:56
msgid "Consistency Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:59
msgid "Monotonic Reads"
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:1
msgid ""
"MongoDB provides monotonic reads from a standalone :program:`mongod` "
"instance. Suppose an application performs a sequence of operations that "
"consists of a read operation *R*\\ :sub:`1` followed later in the sequence "
"by another read operation *R*\\ :sub:`2`. If the application performs the "
"sequence on a standalone :program:`mongod` instance, the later read *R*\\ "
":sub:`2` never returns results that reflect an earlier state than that "
"returned from *R*\\ :sub:`1`; i.e. *R*\\ :sub:`2` returns data that is "
"monotonically increasing in recency from *R*\\ :sub:`1`."
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:13
msgid ""
"For replica sets and sharded clusters, MongoDB provides monotonic reads if "
"read operations specify :doc:`/reference/read-concern` ``\"majority\"`` and "
"read preference :readmode:`primary`."
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:17
msgid ""
"In previous versions, MongoDB cannot make monotonic read guarantees from "
"replica sets and sharded clusters."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:64
msgid "Monotonic Writes"
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:1
msgid ""
"MongoDB provides  monotonic write guarantees for standalone "
":program:`mongod` instances, replica sets, and sharded clusters."
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:4
msgid ""
"Suppose an application performs a sequence of operations that consists of a "
"write operation *W*\\ :sub:`1` followed later in the sequence by a write "
"operation *W*\\ :sub:`2`. MongoDB guarantees that *W*\\ :sub:`1` operation "
"precedes *W*\\ :sub:`2`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:69
msgid "Recency"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:2
msgid ""
"In MongoDB, in a replica set with one primary member [#edge-"
"cases-2-primaries]_,"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:5
msgid ""
"With :readconcern:`\"local\"` ``readConcern``, reads from the primary "
"reflect the latest writes in absence of a failover;"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:8
msgid ""
"With :readconcern:`\"majority\"` ``readConcern``, read operations from the "
"primary or the secondaries have :term:`eventual consistency`."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may "
"*transiently* believe that they are the primary, but at most, one of them "
"will be able to complete writes with :writeconcern:`{ w: \"majority\" } "
"<\"majority\">` write concern. The node that can complete :writeconcern:`{ "
"w: \"majority\" } <\"majority\">` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`, and new writes to the former "
"primary will eventually roll back."
msgstr ""

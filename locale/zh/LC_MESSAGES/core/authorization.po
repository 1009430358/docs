# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/authorization.txt:5
msgid "Authorization"
msgstr "授权"

#: ../source/core/authorization.txt:9
msgid ""
"MongoDB employs Role-Based Access Control (RBAC) to govern access to a "
"MongoDB system. A user is granted one or more :ref:`roles <roles>` that "
"determine the user's access to database resources and operations. Outside of "
"role assignments, the user has no access to the system."
msgstr ""
"MongoDB支持基于角色的访问控制（RBAC）来管理对MongoDB系统的访问。一个用户可以被"
"授权一个或者多个:ref:`角色 <roles>` 以决定该用户对数据库资源和操作的访问权限。"
"在权限以外，用户是无法访问系统的。"

#: ../source/core/authorization.txt:14
msgid ""
"MongoDB does not enable authorization by default. You can enable "
"authorization using the :option:`--auth` or the :option:`--keyFile` options,"
" or if using a configuration file, with the "
":setting:`security.authorization` or the :setting:`security.keyFile` "
"settings."
msgstr ""

#: ../source/core/authorization.txt:20
msgid ""
"MongoDB provides :doc:`built-in roles </reference/built-in-roles>`, each with "
"a dedicated purpose for a common use case. Examples include the :authrole:"
"`read`, :authrole:`readWrite`, :authrole:`dbAdmin`, and :authrole:`root` "
"roles."
msgstr ""
"MongoDB提供 :doc:`自带角色 </reference/built-in-roles>`, 每一个角色都为一种常"
"见用例提供一个明确的作用。例如 :authrole:`read`, :authrole:`readWrite`, :"
"authrole:`dbAdmin`, 和 :authrole:`root` 等角色。"

#: ../source/core/authorization.txt:25
msgid ""
"Administrators also can create new roles and privileges to cater to "
"operational needs. Administrators can assign privileges scoped as granularly "
"as the collection level."
msgstr ""
"管理员也可以建立新的角色和权限以满足作业需要。管理员分配的权限范围可以详细到集"
"合层面。"

#: ../source/core/authorization.txt:29
msgid ""
"When granted a role, a user receives all the privileges of that role. A user "
"can have several roles concurrently, in which case the user receives the "
"union of all the privileges of the respective roles."
msgstr ""
"在被授权一个角色后，一个用户可以接受所有该角色的权限。一个用户可以同时拥有多个"
"角色，"

#: ../source/core/authorization.txt:36
msgid "Roles"
msgstr "角色"

#: ../source/core/authorization.txt:38
msgid ""
"A role consists of privileges that pair resources with allowed operations. "
"Each privilege is specified explicitly in the role or inherited from another"
" role or both."
msgstr ""
"一个角色包括一系列联合资源和合法操作的权限。每个权限都是直接在角色或继承角色中"
"定义的。"

#: ../source/includes/fact-roles-privileges-scope.rst:1
msgid ""
"Except for roles created in the ``admin`` database, a role can only include "
"privileges that apply to its database and can only inherit from other roles "
"in its database."
msgstr ""
"一个角色的权限适用于建立该角色时使用的数据库。一个在``admin``数据库里建立的角"
"色能包括适用于所有数据库或:ref:`cluster <resource-cluster>`的权限。"

#: ../source/includes/fact-roles-privileges-scope.rst:5
msgid ""
"A role created in the ``admin`` database can include privileges that apply "
"to the ``admin`` database, other databases or to the :ref:`cluster "
"<resource-cluster>` resource, and can inherit from roles in other databases "
"as well as the ``admin`` database."
msgstr ""

#: ../source/core/authorization.txt:44
msgid ""
"A user assigned a role receives all the privileges of that role. The user can "
"have multiple roles and can have different roles on different databases."
msgstr ""
"一给被指定角色的用户拥有所有该角色的权限。用户可以有多个角色，也可以在不同数据"
"库中有不同角色。"

#: ../source/core/authorization.txt:47
msgid ""
"Roles always grant privileges and never limit access. For example, if a user "
"has both :authrole:`read` *and* :authrole:`readWriteAnyDatabase` roles on a "
"database, the greater access prevails."
msgstr ""
"角色永远赋予权限而从不会限制权限。例如，如果一个用户在一个数据库中拥有:"
"authrole:`read` *和* :authrole:`readWriteAnyDatabase`两个角色。后者更广泛的访"
"问权会被保留。"

#: ../source/core/authorization.txt:54
msgid "Privileges"
msgstr "权限"

#: ../source/core/authorization.txt:56
msgid ""
"A privilege consists of a specified resource and the actions permitted on the "
"resource."
msgstr "每个权限包括一些 *操作*以及这些操作所适用的资源。"

#: ../source/core/authorization.txt:59
msgid ""
"A privilege :doc:`resource </reference/resource-document>` is either a "
"database, collection, set of collections, or the cluster. If the cluster, the "
"affiliated actions affect the state of the system rather than a specific "
"database or collection."
msgstr ""
"一个权限的 :doc:`资源 </reference/resource-document>` 可以是一个数据库、集合、"
"多个集合、或者一个集群。如果是集群，相关的操作会影响整个系统的状态，而不仅仅是"
"某个数据库或集合。"

#: ../source/core/authorization.txt:64
msgid ""
"An :doc:`action </reference/privilege-actions>` is a command or method the "
"user is allowed to perform on the resource. A resource can have multiple "
"allowed actions. For available actions see :doc:`/reference/privilege-"
"actions`."
msgstr ""
"一个:doc:`操作 </reference/privilege-actions>`是一个命令或者适用于某资源的方"
"法。一个资源可以有多个被适用的操作。参见 :doc:`/reference/privilege-actions` "
"了解所有可用的操作。"

#: ../source/core/authorization.txt:69
msgid ""
"For example, a privilege that includes the :authaction:`update` action allows "
"a user to modify existing documents on the resource. To additionally grant "
"the user permission to create documents on the resource, the administrator "
"would add the :authaction:`insert` action to the privilege."
msgstr ""
"例如，一个包括 :authaction:`update` 操作的权限允许一个用户改变指定资源上的现有"
"文档。如果要想让该用户在此基础之上拥有建立文档的权限，管理员会在权限中添加 :"
"authaction:`insert` 操作。"

#: ../source/core/authorization.txt:75
msgid "For privilege syntax, see :data:`admin.system.roles.privileges`."
msgstr "了解权限语法，参见 :data:`admin.system.roles.privileges`。"

#: ../source/core/authorization.txt:80
msgid "Inherited Privileges"
msgstr "继承的权限"

#: ../source/core/authorization.txt:82
msgid ""
"A role can include one or more existing roles in its definition, in which "
"case the role inherits all the privileges of the included roles."
msgstr ""
"一个角色的定义中可以包含一个或者多个角色，这种情况下这个角色会继承所有其包含的"
"角色的所有权限。"

#: ../source/core/authorization.txt:85
msgid ""
"A role can inherit privileges from other roles in its database. A role "
"created on the ``admin`` database can inherit privileges from roles in any "
"database."
msgstr ""
"一个角色可以继承其数据库中其他角色的权限。一个在``admin``数据库中建立的角色可"
"以继承任意数据库角色中的权限。"

#: ../source/core/authorization.txt:91
msgid "User-Defined Roles"
msgstr "用户自定义角色"

#: ../source/core/authorization.txt:95
msgid ""
"User administrators can create custom roles to ensure collection-level and "
"command-level granularity and to adhere to the policy of :term:`least "
"privilege`. Administrators create and edit roles using the :ref:`role "
"management commands <role-management-commands>`."
msgstr "用户管理员可以建立"

#: ../source/core/authorization.txt:100
msgid ""
"MongoDB scopes a user-defined role to the database in which it is created and "
"uniquely identifies the role by the pairing of its name and its database. "
"MongoDB stores the roles in the ``admin`` database's :doc:`system.roles </"
"reference/system-roles-collection>` collection. Do not access this collection "
"directly but instead use the :ref:`role management commands <role-management-"
"commands>` to view and edit custom roles."
msgstr ""
"MongoDB将每个用户定义的角色局限于其所生成的数据库中，并且用角色的名称和其所在"
"的数据库来准确指定这个角色。MongoDB将角色储存于 ``admin``数据库 :doc:`system."
"roles </reference/system-roles-collection>` 中。请务必不要直接访问该集合，而使"
"用 :ref:`角色管理命令 <role-management-commands>` 查看和编辑角色。"

#: ../source/core/authorization.txt:108
msgid "Collection-Level Access Control"
msgstr ""

#: ../source/core/authorization.txt:110
msgid ""
"By creating a role with :ref:`privileges <privileges>` that are scoped to a "
"specific collection in a particular database, administrators can implement "
"collection-level access control."
msgstr ""

#: ../source/core/authorization.txt:114
msgid "See :doc:`/core/collection-level-access-control` for more information."
msgstr ""

#: ../source/core/authorization.txt:119
msgid "Users"
msgstr ""

#: ../source/core/authorization.txt:121
msgid ""
"MongoDB stores user credentials in the protected :data:`admin.system.users`."
" Use the :ref:`user management methods <user-management-methods>` to view "
"and edit user credentials."
msgstr ""

#: ../source/core/authorization.txt:127
msgid "Role Assignment to Users"
msgstr "为用户制定的角色"

#: ../source/core/authorization.txt:129
msgid ""
"User administrators create the users that access the system's databases. "
"MongoDB's :ref:`user management commands <user-management-commands>` let "
"administrators create users and assign them roles."
msgstr "用户管理员"

#: ../source/core/authorization.txt:133
msgid ""
"MongoDB scopes a user to the database in which the user is created. MongoDB "
"stores all user definitions in the ``admin`` database, no matter which "
"database the user is scoped to. MongoDB stores users in the ``admin`` "
"database's :doc:`system.users collection </reference/system-users-"
"collection>`. Do not access this collection directly but instead use the :ref:"
"`user management commands <user-management-commands>`."
msgstr ""
"MongoDB将每个用户局限于其所生成的数据库中。MongoDB讲所有用户的定义都储存在 "
"``admin`` 数据库中，无论该用户适用于哪个数据库。所有MongoDB将用户储存于 "
"``admin``数据库 :doc:`system.users 集合 </reference/system-users-collection>` "
"中。请务必不要直接访问该集合，而使用 :ref:`角色管理命令 <role-management-"
"commands>` 查看和编辑角色。"

#: ../source/core/authorization.txt:141
msgid ""
"The first role assigned in a database should be either :authrole:`userAdmin` "
"or :authrole:`userAdminAnyDatabase`. This user can then create all other "
"users in the system. See :doc:`/tutorial/add-user-administrator`."
msgstr ""
"数据库中第一个被指定的用户应当是:authrole:`userAdmin` 或者 :authrole:"
"`userAdminAnyDatabase`。这个用户之后可以用来建立系统中所有其他用户。参见 :doc:"
"`/tutorial/add-user-administrator`。"

#: ../source/core/authorization.txt:146
msgid "Protect the User and Role Collections"
msgstr "保护用户和角色集合"

#: ../source/core/authorization.txt:148
msgid ""
"MongoDB stores role and user data in the protected :data:`admin.system.roles` "
"and :data:`admin.system.users` collections, which are only accessible using "
"the :ref:`user management methods <user-management-methods>`."
msgstr ""
"MongoDB将用户和角色信息储存在受保护的 :data:`admin.system.roles` 和 :data:"
"`admin.system.users` 集合。使用 :ref:`用户管理方法 <user-management-methods>` "
"查看或编辑这些信息。"

#: ../source/core/authorization.txt:153
msgid ""
"If you disable access control, **do not** modify the :data:`admin.system."
"roles` and :data:`admin.system.users` collections using normal :method:`~db."
"collection.insert()` and :method:`~db.collection.update()` operations."
msgstr ""
"如果你关闭访问控制，**请勿**使用 :method:`~db.collection.insert()` 和 :method:"
"`~db.collection.update()` 等常规操作手段编辑 :data:`admin.system.roles` 和 :"
"data:`admin.system.users` 集合"

#: ../source/core/authorization.txt:159
msgid "Additional Information"
msgstr "附加信息"

#: ../source/core/authorization.txt:161
msgid ""
"See the reference section for documentation of all :doc:`built-in-roles </"
"reference/built-in-roles>` and all available :doc:`privilege actions </"
"reference/privilege-actions>`. Also consider the reference for the form of "
"the :doc:`resource documents </reference/resource-document>`."
msgstr ""
"参见安全参考文献了解所有 :doc:`自带角色</reference/built-in-roles>` and all "
"available :doc:`需要权限的操作 </reference/privilege-actions>`。同时考虑参考文"
"献中的 :doc:`资源文档 </reference/resource-document>` 的格式。"

#: ../source/core/authorization.txt:166
msgid ""
"To create users see the :doc:`/tutorial/add-user-administrator` and "
":doc:`/tutorial/manage-users-and-roles` tutorials."
msgstr ""

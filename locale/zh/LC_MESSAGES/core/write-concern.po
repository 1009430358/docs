# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
#
# Translators:Yingminzhou
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-12-12 12:21+0800\n"
"Last-Translator: Yingminzhou <csuyingminzhou@gmail.com>\n"
"Language-Team: Chinese (http://www.transifex.com/projects/p/mongodb-manual/"
"language/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.7.1\n"

# ef0ffb60095c43a0a703eae3161a7c68
#: ../source/core/write-concern.txt:7
msgid "Write Concern"
msgstr "写关注"

# ece8085cf3fb45a29f913308034d798d
#: ../source/includes/introduction-write-concern.rst:1
msgid ""
":term:`Write concern` describes the guarantee that MongoDB provides when "
"reporting on the success of a write operation. The strength of the write "
"concerns determine the level of guarantee. When inserts, updates and deletes "
"have a *weak* write concern, write operations return quickly. In some failure "
"cases, write operations issued with weak write concerns may not persist. With "
"*stronger* write concerns, clients wait after sending a write operation for "
"MongoDB to confirm the write operations."
msgstr ""
" :term:`写关注`  描述了MongoDB为导入一个成功写入操作提供的保证。"
"写关注的强弱决定了保证的等级。在插入、更新及删除操作中，存在一个 *弱* 写关注，"
"写入操作快速返回。在一些失败的案例中，并不能保证弱写关注的写入操作。通过使用 *强* "
"写关注，为了对写入操作进行确认，客户端将一直等待直到向MongoDB发送一个写入操作。"

# 2d47343ec23d48118b44f1126fcbb4b9
#: ../source/includes/introduction-write-concern.rst:10
msgid ""
"MongoDB provides different levels of write concern to better address the "
"specific needs of applications. Clients may adjust write concern to ensure "
"that the most important operations persist successfully to an entire MongoDB "
"deployment. For other less critical operations, clients can adjust the write "
"concern to ensure faster performance rather than ensure persistence to the "
"entire deployment."
msgstr ""
"MongoDB提供了不同等级的写关注以更好地满足不同应用的特定需求。客户端可以调整写关注， "
"以保证最重要的操作能够成功存留在一个完整的MongoDB部署中。对于其它不那么重要的操作，"
"客户端可以调整写关注，以保证更快的性能而不是整个部署的一致性。"

# 070c151028004d108de1eb96f64158f9
#: ../source/core/write-concern.txt:22
msgid "Considerations"
msgstr "考量"

# 496ce45bb8c2467db1f80318bc2ccfe0
#: ../source/core/write-concern.txt:25
msgid "Default Write Concern"
msgstr "默认的写关注"

# 4b69db1d4d5e454f8bcab5a97d86275b
#: ../source/core/write-concern.txt:34
msgid "Read Isolation"
msgstr "读隔离"

# 87f495b684a04d7d90b63ba8447f137e
#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes of "
"behaviors:"
msgstr ""
"MongoDB允许客户端读取那些在将这些修改提交到硬盘之前被插入或者修改的文档，而不用考虑写关注等级"
"或日志的配置。因此，应用也许会观察到两个类的行为："

# 6d7a06c663e6403081549c3cc2682223
#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow "
"clients to read the results of a write operation before the write operation "
"returns."
msgstr ""
"对于拥有多个并行读数器及写入器的系统而言，MongoDB 将会允许客户端在写入操作返回之前"
"读取一个写入操作的结果。"

# e939094fa1ca46d09a12f2e5547aa76e
#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr ""
"如果 :program:`mongod` 在日志提交之前终止了，即使一个写入成功返回，在"
" :program:`mongod` 重启之前，查询也将有可能读取不到相关的数据。"

# 6751bd06f0054681a4ac7adba612ca6a
#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in "
"isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document transactions "
"or isolation."
msgstr ""
"其它的数据库系统将这些隔离语义称为 *未授权读取-允许脏读取* 。 对于所有的插入和更新，MongoDB单独修改每一个文档："
"客户端永远不会看到中间状态的文档。对于多文档操作，MongoDB并不提供任何多文档的事物或隔离。"

# 0174a290e85e4a7cb3d76f60668bb5da
#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after :program:`mongod` "
"restarts."
msgstr ""
"当 :program:`mongod` 返回一个成功的 *日志型写关注*, 数据将完整提交到磁盘， "
"并且在 :program:`mongod` 重启之后可以使用。"

# d68b5b8b80c542b19b41cce57e9de9a7
#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates "
"and commits to the journal of a majority of the members of the set. MongoDB "
"regularly commits data to the journal regardless of journaled write concern: "
"use the :setting:`~storage.journal.commitIntervalMs` to control how often a :"
"program:`mongod` commits the journal."
msgstr ""
"对于副本集而言，写入操作只有在一个写入副本并且提交到该集合主要成员的日志后才能持久化。 "
"MongoDB定期将数据提交到日志，不用考虑日志型写关注： 使用 :setting:`~storage.journal.commitIntervalMs` "
"来控制 :program:`mongod` 提交到日志的时间间隔。"

# 2e614a6e3d924765b4bd1ad349862f59
#: ../source/core/write-concern.txt:51
msgid "Write Concern Levels"
msgstr "写关注等级"

# 01dbad2f1bab43cdabba7ef125a93e3e
#: ../source/core/write-concern.txt:59
msgid "Unacknowledged"
msgstr "无确认型（Unacknowledged）"

# d9578ba7047b47acad3b7091e4bec3a5
#: ../source/core/write-concern.txt:67
msgid ""
"Before the releases outlined in :ref:`driver-write-concern-change`, this was "
"the default write concern."
msgstr ""
"在 :ref:`driver-write-concern-change` 中列出的版本之前，这是默认的写入关注。"

# 4ebd5c2a5c6e4fa9af0f23ea107f4f8b
#: ../source/core/write-concern.txt:75
msgid "Acknowledged"
msgstr "确认型（Acknowledged）"

# 9aef8ff0b31040d2b71a5d3732a2cc8a
#: ../source/core/write-concern.txt:77
msgid ""
"With a receipt *acknowledged* write concern, the :program:`mongod` confirms "
"the receipt of the write operation. *Acknowledged* write concern allows "
"clients to catch network, duplicate key, and other errors."
msgstr ""
"通过使用一个应答 *确认型（Acknowledged）* 写关注， :program:`mongod` 保证了写入操作的应答。 *确认型（Acknowledged）* "
"允许客户端捕捉网络、重复键值以及其它错误。"

# 8b6a520d0d1a45b08682682a85a62516
#: ../source/core/write-concern.txt:96
msgid "Journaled"
msgstr "日志型"

# caabf6e53ce8494b9ea600c588d29582
#: ../source/core/write-concern.txt:105
msgid ""
"With a *journaled* write concern, write operations must wait for the next "
"journal commit. To reduce latency for these operations, MongoDB also increases "
"the frequency that it commits operations to the journal. See :setting:"
"`~storage.journal.commitIntervalMs` for more information."
msgstr ""
"通过使用一个 *日志型（journaled）* 写关注，写入操作必须等到下一个日志提交才能够继续执行。"
"为了减少这些操作的延迟，MongoDB增加了提交操作到日志的频率，请查阅 :setting:"
"`~storage.journal.commitIntervalMs` 以了解更多信息。"

# a6bbf283b72a4d09a8d443ef5f5b576a
# e7e7dd5921024de885121747eb37a408
#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"Requiring *journaled* write concern in a replica set only requires a journal "
"commit of the write operation to the :term:`primary` of the set regardless of "
"the level of *replica acknowledged* write concern."
msgstr ""
"在一个副本集中要求 *日志型（journaled）* 写关注只需要将该写操作的日志提交到集合的 :term:`primary`，"
"而不用考虑 *replica acknowledged* 写关注的等级。"

# b47db96fce324a9d9cbc957ae44156a6
#: ../source/core/write-concern.txt:118
msgid "Replica Acknowledged"
msgstr "副本集确认型（Replica Acknowledged）"

# 4f67a4ccb91f4c35b42893d10b00e2fb
#: ../source/core/write-concern.txt:1
msgid "write concern"
msgstr "写关注"

#: ../source/core/write-concern.txt:13
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concern with the write operations."
msgstr ""
"一个新的 :ref:`写入操作 <rel-notes-write-operations>` 协议将写关注及写入操作进行了整合。"

#: ../source/core/write-concern.txt:18
msgid ""
"For details on write concern configurations, see :doc:`/reference/write-"
"concern`."
msgstr ""
"如果你想了解更多关于写关注配置的细节，请查阅 :doc:`/reference/write-concern` 。"

#: ../source/core/write-concern.txt:27
msgid ""
"The :program:`mongo` shell and the MongoDB drivers use :ref:`write-concern-"
"acknowledged` as the default write concern."
msgstr ""
" :program:`mongo` 脚本以及MongoDB驱动器使用 :ref:`write-concern-acknowledged` 作为默认的写关注。"

#: ../source/core/write-concern.txt:30
msgid ""
"See :ref:`write-concern-acknowledged` for more information, including when "
"this write concern became the default."
msgstr ""
"请查阅 :ref:`write-concern-acknowledged` 以了解更多信息，包括写关注什么时候变为默认。"

#: ../source/core/write-concern.txt:39
msgid "Timeouts"
msgstr "超时"

#: ../source/core/write-concern.txt:41
msgid ""
"Clients can set a :ref:`wtimeout <wc-wtimeout>` value as part of a :ref:"
"`replica acknowledged <replica-set-write-concern>` write concern. If the write "
"concern is not satisfied in the specified interval, the operation returns an "
"error, even if the write concern will eventually succeed."
msgstr ""
"客户端可以设置一个 :ref:`超时 <wc-wtimeout>` 值作为 :ref:"
" `副本集确认型 <replica-set-write-concern>` 写关注的一部分. 如果写关注不满足特定的时间间隔，"
"即使最后这个写关注最后回成功，这个操作仍然将会返回一个错误。"

#: ../source/core/write-concern.txt:47
msgid ""
"MongoDB does not \"rollback\" or undo modifications made before the "
"``wtimeout`` interval expired."
msgstr ""
"MongoDB 不会 \"回滚\" 或者撤销``wtimeout`` 间隔过期之前的修改。 "

#: ../source/core/write-concern.txt:53
msgid ""
"MongoDB has the following levels of conceptual write concern, listed from "
"weakest to strongest:"
msgstr ""
"MongoDB有如下几个级别的概念性写关注，从最弱到最强排列如下： "

#: ../source/core/write-concern.txt:61
msgid ""
"With an *unacknowledged* write concern, MongoDB does not acknowledge the "
"receipt of write operations. *Unacknowledged* is similar to *errors ignored*; "
"however, drivers will attempt to receive and handle network errors when "
"possible. The driver's ability to detect network errors depends on the "
"system's networking configuration."
msgstr ""
"通过使用 *未确认型（unacknowledged）* 写关注，MongoDB 不用对写入操作的接收进行应答。 "
" *未确认型（Unacknowledged）* 与 *errors ignored* 相似，但是驱动器尽可能地尝试接收和解决网络错误。 "
"驱动器检测网络错误的能力视系统的网络配置而定。"

#: ../source/core/write-concern.txt:82
msgid ""
"MongoDB uses the *acknowledged* write concern by default starting in the "
"driver releases outlined in :ref:`write-concern-change-releases`."
msgstr ""
"从 :ref:`write-concern-change-releases` 列出的驱动器版本开始， "
"MongoDB就默认使用 *确认型（acknowledged）* 写关注 "

#: ../source/core/write-concern.txt:85
msgid ""
"The :program:`mongo` shell write methods now incorporates the :doc:`write "
"concern </core/write-concern>` in the write methods and provide the default "
"write concern whether run interactively or in a script. See :ref:`write-"
"methods-incompatibility` for details."
msgstr ""
"目前， :program:`mongo` 脚本的写入方法包含了 :doc:`写关注 </core/write-concern>` 中的写入方法，并且在"
"交互式运行或者脚本中都提供了默认的写关注。请查阅 :ref:`write-methods-incompatibility` 了解更多细节。"

#: ../source/core/write-concern.txt:98
msgid ""
"With a *journaled* write concern, the MongoDB acknowledges the write operation "
"only after committing the data to the :term:`journal`. This write concern "
"ensures that MongoDB can recover the data following a shutdown or power "
"interruption."
msgstr ""
"通过使用一个 *日志型（journaled）* 写关注， MongoDB只在将数据提交到 :term:`journal` 之后才认可这个写入操作。"
"这个写关注保证了MongoDB可以在一个关机或者供电中断之后恢复相关的数据。"

#: ../source/core/write-concern.txt:103
msgid "You must have journaling enabled to use this write concern."
msgstr ""
"为了使用这个写关注，您必须启用日志记录。"

#: ../source/core/write-concern.txt:120
msgid ""
":term:`Replica sets <replica set>` present additional considerations with "
"regards to write concern.. The default write concern only requires "
"acknowledgement from the primary."
msgstr ""
" :term:`副本集 <replica set>` 介绍了关于写操作的额外考量。默认的写关注只要求"
"来自主站的应答。"

#: ../source/core/write-concern.txt:124
msgid ""
"With *replica acknowledged* write concern, you can guarantee that the write "
"operation propagates to additional members of the replica set. See :doc:`Write "
"Concern for Replica Sets <replica-set-write-concern>` for more information."
msgstr ""
"通过使用 *副本集确认型（replica acknowledged）* 写关注，您可以保证写入操作拓展到副本集中其它的成员。"
"请查阅 :doc:`副本集的写关注 <replica-set-write-concern>` 以了解更多信息."

#: ../source/core/write-concern.txt:133
msgid ":doc:`/reference/write-concern`"
msgstr ""
" :doc:`/reference/write-concern` "

# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/bulk-write-operations.txt:5
msgid "Bulk Write Operations"
msgstr ""

#: ../source/core/bulk-write-operations.txt:10
msgid "Overview"
msgstr ""

#: ../source/core/bulk-write-operations.txt:12
msgid ""
"MongoDB provides clients the ability to perform write operations in bulk. "
"Bulk write operations affect a *single* collection. MongoDB allows "
"applications to determine the acceptable level of acknowledgement required "
"for bulk write operations."
msgstr ""

#: ../source/core/bulk-write-operations.txt:17
msgid ""
"New :method:`Bulk` methods provide the ability to perform bulk insert, "
"update, and remove operations. MongoDB also supports bulk insert through "
"passing an array of documents to the :method:`db.collection.insert()` "
"method."
msgstr ""

#: ../source/core/bulk-write-operations.txt:24
msgid ""
"Previous versions of MongoDB provided the ability for bulk inserts only. "
"With previous versions, clients could perform bulk inserts by passing an "
"array of documents to the :v2.4:`db.collection.insert() </core/bulk-"
"inserts>` method. To see the documentation for earlier versions, see "
":v2.4:`Bulk Inserts </core/bulk-inserts>`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:31
msgid "Ordered vs Unordered Operations"
msgstr ""

#: ../source/core/bulk-write-operations.txt:33
msgid ""
"Bulk write operations can be either *ordered* or *unordered*. With an "
"ordered list of operations, MongoDB executes the operations serially. If an "
"error occurs during the processing of one of the write operations, MongoDB "
"will return without processing any remaining write operations in the list."
msgstr ""

#: ../source/core/bulk-write-operations.txt:39
msgid ""
"With an unordered list of operations, MongoDB can execute the operations in "
"parallel. If an error occurs during the processing of one of the write "
"operations, MongoDB will continue to process remaining write operations in "
"the list."
msgstr ""

#: ../source/core/bulk-write-operations.txt:44
msgid ""
"Executing an ordered list of operations on a sharded collection will "
"generally be slower than executing an unordered list since with an ordered "
"list, each operation must wait for the previous operation to finish."
msgstr ""

#: ../source/core/bulk-write-operations.txt:50
msgid "``Bulk`` Methods"
msgstr ""

#: ../source/core/bulk-write-operations.txt:52
msgid "To use the :method:`Bulk()` methods:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:54
msgid ""
"Initialize a list of operations using either "
":method:`db.collection.initializeUnorderedBulkOp()` or "
":method:`db.collection.initializeOrderedBulkOp()`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:58
msgid "Add write operations to the list using the following methods:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:60
msgid ":method:`Bulk.insert()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:61
msgid ":method:`Bulk.find()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:62
msgid ":method:`Bulk.find.upsert()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:63
msgid ":method:`Bulk.find.update()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:64
msgid ":method:`Bulk.find.updateOne()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:65
msgid ":method:`Bulk.find.replaceOne()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:66
msgid ":method:`Bulk.find.remove()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:67
msgid ":method:`Bulk.find.removeOne()`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:69
msgid ""
"To execute the list of operations, use the :method:`Bulk.execute()` method. "
"You can specify the write concern for the list in the "
":method:`Bulk.execute()` method."
msgstr ""

#: ../source/core/bulk-write-operations.txt:73
msgid "Once executed, you cannot re-execute the list without reinitializing."
msgstr ""

#: ../source/core/bulk-write-operations.txt:76
msgid "For example,"
msgstr ""

#: ../source/core/bulk-write-operations.txt:86
msgid ""
"For more examples, refer to the reference page for each "
":doc:`/reference/method/js-bulk` method. For information and examples on "
"performing bulk insert using the :method:`db.collection.insert()`, see "
":method:`db.collection.insert()`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:91
msgid ":ref:`rel-notes-write-operations`"
msgstr ""

#: ../source/core/bulk-write-operations.txt:94
msgid "``Bulk`` Execution Mechanics"
msgstr ""

#: ../source/core/bulk-write-operations.txt:96
msgid ""
"When executing an :method:`ordered "
"<db.collection.initializeOrderedBulkOp()>` list of operations, MongoDB "
"groups adjacent operations by the :data:`operation type <batchType>`. When "
"executing an :method:`unordered <db.collection.initializeUnorderedBulkOp()>`"
" list of operations, MongoDB groups and may also reorder the operations to "
"increase performance. As such, when performing *unordered* bulk operations, "
"applications should not depend on the ordering."
msgstr ""

#: ../source/includes/fact-bulk-operation-batches.rst:1
msgid ""
"Each group of operations can have at most :limit:`1000 operations <Write "
"Command Operation Limit Size>`. If a group exceeds this :limit:`limit <Write"
" Command Operation Limit Size>`, MongoDB will divide the group into smaller "
"groups of 1000 or less. For example, if the bulk operations list consists of"
" 2000 insert operations, MongoDB creates 2 groups, each with 1000 "
"operations."
msgstr ""

#: ../source/includes/fact-bulk-operation-batches.rst:7
msgid ""
"The sizes and grouping mechanics are internal performance details and are "
"subject to change in future versions."
msgstr ""

#: ../source/includes/fact-bulk-operation-batches.rst:10
msgid ""
"To see how the operations are grouped for a bulk operation execution, call "
":method:`Bulk.getOperations()` *after* the execution."
msgstr ""

#: ../source/core/bulk-write-operations.txt:107
msgid "For more information, see :method:`Bulk.execute()`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:110
msgid "Strategies for Bulk Inserts to a Sharded Collection"
msgstr ""

#: ../source/core/bulk-write-operations.txt:112
msgid ""
"Large bulk insert operations, including initial data inserts or routine data"
" import, can affect :term:`sharded cluster` performance. For bulk inserts, "
"consider the following strategies:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:117
msgid "Pre-Split the Collection"
msgstr ""

#: ../source/core/bulk-write-operations.txt:119
msgid ""
"If the sharded collection is empty, then the collection has only one initial"
" :term:`chunk`, which resides on a single shard. MongoDB must then take time"
" to receive data, create splits, and distribute the split chunks to the "
"available shards. To avoid this performance cost, you can pre-split the "
"collection, as described in :doc:`/tutorial/split-chunks-in-sharded-"
"cluster`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:127
msgid "Insert to Multiple ``mongos``"
msgstr ""

#: ../source/core/bulk-write-operations.txt:129
msgid ""
"To parallelize import processes, send bulk insert or insert operations to "
"more than one :program:`mongos` instance. For *empty* collections, first "
"pre-split the collection as described in :doc:`/tutorial/split-chunks-in-"
"sharded-cluster`."
msgstr ""

#: ../source/core/bulk-write-operations.txt:135
msgid "Avoid Monotonic Throttling"
msgstr ""

#: ../source/core/bulk-write-operations.txt:137
msgid ""
"If your shard key increases monotonically during an insert, then all "
"inserted data goes to the last chunk in the collection, which will always "
"end up on a single shard. Therefore, the insert capacity of the cluster will"
" never exceed the insert capacity of that single shard."
msgstr ""

#: ../source/core/bulk-write-operations.txt:142
msgid ""
"If your insert volume is larger than what a single shard can process, and if"
" you cannot avoid a monotonically increasing shard key, then consider the "
"following modifications to your application:"
msgstr ""

#: ../source/core/bulk-write-operations.txt:146
msgid ""
"Reverse the binary bits of the shard key. This preserves the information and"
" avoids correlating insertion order with increasing sequence of values."
msgstr ""

#: ../source/core/bulk-write-operations.txt:150
msgid "Swap the first and last 16-bit words to \"shuffle\" the inserts."
msgstr ""

#: ../source/core/bulk-write-operations.txt:0
msgid "Example"
msgstr ""

#: ../source/core/bulk-write-operations.txt:172
msgid ""
":ref:`sharding-shard-key` for information on choosing a sharded key. Also "
"see :ref:`Shard Key Internals <sharding-internals-shard-keys>` (in "
"particular, :ref:`sharding-internals-operations-and-reliability`)."
msgstr ""

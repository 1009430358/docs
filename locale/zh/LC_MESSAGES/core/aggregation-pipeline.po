# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
# 
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2014-04-09 21:17+0000\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Chinese (http://www.transifex.com/projects/p/mongodb-manual/language/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# a8ba3a0c1f494c33acb5f5880ad49f43
#: ../source/core/aggregation-pipeline.txt:3
msgid "Aggregation Pipeline"
msgstr "聚合管道"

# 0755e3fea9fc4ad297ddebdba9fd5709
#: ../source/core/aggregation-pipeline.txt:9
msgid ""
"The aggregation pipeline is a framework for data aggregation modeled on the "
"concept of data processing pipelines. Documents enter a multi-stage pipeline"
" that transforms the documents into an aggregated results."
msgstr ""
"聚合管道是一个基于数据处理管道概念的框架。通过使用一个多阶段的管道，将一组文档转换为最终的聚合结果。"

# d09b8e7961d242b08b022e067e6d8388
#: ../source/core/aggregation-pipeline.txt:20
msgid ""
"Aggregation pipeline have some limitations on value types and result size. "
"See :doc:`/core/aggregation-pipeline-limits` for details on limits and "
"restrictions on the aggregation pipeline."
msgstr ""
"聚合管道对值的类型和结果大小会有一些限制，详情请参考 :doc:`聚合管道限制 </core/aggregation-pipeline-limits>` 。"
# 66edae232c08406e968bfe710a53e019
#: ../source/core/aggregation-pipeline.txt:27
msgid "Pipeline"
msgstr "管道"

# 2ecfb46684b144f18a8edc3f2e4de9a8
#: ../source/core/aggregation-pipeline.txt:48
msgid "Pipeline Expressions"
msgstr "管道表达式"

# 66d22cace4f1456cb58292bc936c53cf
#: ../source/core/aggregation-pipeline.txt:56
msgid ""
"Pipeline expressions can only operate on the current document in the "
"pipeline and cannot refer to data from other documents: expression "
"operations provide in-memory transformation of documents."
msgstr ""
"管道表达式只可以操作当前管道中的文档，不能访问其他的文档：表达式操作可以在内存中完成对文档的转换。"

# 5dbe89d84d1e4f8c891551a59e69e89d
#: ../source/core/aggregation-pipeline.txt:74
msgid "Aggregation Pipeline Behavior"
msgstr "聚合管道的特点"

# c40702cf3e9b4ad488ef5c65839eadad
#: ../source/core/aggregation-pipeline.txt:76
msgid ""
"In MongoDB, the :dbcommand:`aggregate` command operates on a single "
"collection, logically passing the *entire* collection into the aggregation "
"pipeline. To optimize the operation, wherever possible, use the following "
"strategies to avoid scanning the entire collection."
msgstr ""
"在MongoDB中， :dbcommand:`aggregate` 命令会把*整个*集合中的文档传入聚合管道。"
"如有需要，可以使用下面的策略来优化这个操作，避免扫描整个集合。"

# 8ee39271567e4a92830fd0a1967b5c77
#: ../source/core/aggregation-pipeline.txt:84
msgid "Pipeline Operators and Indexes"
msgstr "管道操作符和索引"

# b9ee67a387da49d3a2dd098f0a6e8ad7
#: ../source/core/aggregation-pipeline.txt:90
msgid ""
"The :pipeline:`$geoNear` pipeline operator takes advantage of a geospatial "
"index. When using :pipeline:`$geoNear`, the :pipeline:`$geoNear` pipeline "
"operation must appear as the first stage in an aggregation pipeline."
msgstr ""
"管道操作符 :pipeline:`$geoNear` 会使用地理空间信息索引。当使用 :pipeline:`$geoNear` 时，"
"一定让要 :pipeline:`$geoNear` 操作作为聚合管道的第一步来执行。"

# e374a87e53b24f96a200e0379319872b
#: ../source/core/aggregation-pipeline.txt:105
msgid "Early Filtering"
msgstr "预先过滤"

# 8b163d2c6d914b01a195c461076f615b
#: ../source/core/aggregation-pipeline.txt:107
msgid ""
"If your aggregation operation requires only a subset of the data in a "
"collection, use the :pipeline:`$match`, :pipeline:`$limit`, and "
":pipeline:`$skip` stages to restrict the documents that enter at the "
"beginning of the pipeline. When placed at the beginning of a pipeline, "
":pipeline:`$match` operations use suitable indexes to scan only the matching"
" documents in a collection."
msgstr ""
"如果你的聚合操作只需要集合中的一部分数据，可以使用 :pipeline:`$match` , :pipeline:`$limit` , 和 "
":pipeline:`$skip` 等命令来限制输入到管道的文档数量。当在管道操作的一开始就使用 :pipeline:`$match` ，"
"就可以使用到索引来查询文档了。"
# 989469acaa9e4da98b4f84466ff7a161
#: ../source/core/aggregation-pipeline.txt:114
msgid ""
"Placing a :pipeline:`$match` pipeline stage followed by a :pipeline:`$sort` "
"stage at the start of the pipeline is logically equivalent to a single query"
" with a sort and can use an index. When possible, place :pipeline:`$match` "
"operators at the beginning of the pipeline."
msgstr ""
"在管道的最开始，使用 :pipeline:`$match` 并随后使用 :pipeline:`$sort` ，逻辑上和一个排序查询一样，都会使用索引。"
"所以，应当尽可能在管道的最开始使用 :pipeline:`$match` 。"
# 5a093b04973e46c0803d8dd0b5912e0a
#: ../source/core/aggregation-pipeline.txt:121
msgid "Additional Features"
msgstr "其他的特点"

# 077aee5e27a44d17ad1432364a1c34e4
#: ../source/core/aggregation-pipeline.txt:127
msgid ""
"The aggregation pipeline supports operations on sharded collections. See "
":ref:`aggregation-pipeline-sharded-collection`."
msgstr ""
"聚合管道操作支持在分片集合上使用。详情请参考 :ref:`聚合管道和分片集合 </core/aggregation-pipeline-sharded-collections>` 。"

#: ../source/core/aggregation-pipeline.txt:16
msgid ""
"The aggregation pipeline provides an alternative to :term:`map-reduce` and "
"may be the preferred solution for aggregation tasks where the complexity of "
"map-reduce may be unwarranted."
msgstr ""
"聚合管道是映射化简的一个替代方案。而且对于聚合任务来说，聚合管道是一种优选的解决方案，因为映射化简的复杂度可能无法保证。"

#: ../source/core/aggregation-pipeline.txt:29
msgid ""
"The MongoDB aggregation pipeline consists of :ref:`stages <aggregation-"
"pipeline-operator-reference>`. Each stage transforms the documents as they "
"pass through the pipeline. Pipeline stages do not need to produce one output"
" document for every input document; e.g., some stages may generate new "
"documents or filter out documents. Pipeline stages can appear multiple times"
" in the pipeline."
msgstr ""
"MongoDB中的聚合管道由多个 :ref:`阶段 <aggregation-pipeline-operator-reference>` 组成。每个阶段转换各自阶段的输入文档。"
"管道的阶段不一定都要对每个输入文档产生输出文档；比如，有些阶段可能会产生新的文档或者过滤一些文档。"
"同一个阶段也可以在管道中出现多次。"

#: ../source/core/aggregation-pipeline.txt:36
msgid ""
"MongoDB provides the :method:`db.collection.aggregate()` method in the "
":program:`mongo` shell and the :dbcommand:`aggregate` command for "
"aggregation pipeline. See :ref:`aggregation-pipeline-operator-reference` for"
" the available stages."
msgstr ""
"MongoDB还提供了 :program:`mongo` 命令行下的 :method:`db.collection.aggregate()` 方法和聚合管道中的 :dbcommand:`aggregate` "
"具体使用方法请参考 :ref:`聚合管道操作符指南 <aggregation-pipeline-operator-reference>` 。"

#: ../source/core/aggregation-pipeline.txt:41
msgid ""
"For example usage of the aggregation pipeline, consider :doc:`/tutorial"
"/aggregation-with-user-preference-data` and :doc:`/tutorial/aggregation-zip-"
"code-data-set`."
msgstr ""
"聚合管道的例子，可以参考 :doc:`聚合用户手册 </tutorial/aggregation-with-user-preference-data>` 和 "
":doc:`邮编的聚合 </tutorial/aggregation-zip-code-data-set>` 。"

#: ../source/core/aggregation-pipeline.txt:50
msgid ""
"Some pipeline stages takes a pipeline expression as its operand. Pipeline "
"expressions specify the transformation to apply to the input documents. "
"Expressions have a :doc:`document </core/document>` structure and can "
"contain other :ref:`expression <aggregation-expressions>`."
msgstr ""
"有的管道阶段可以使用管道表达式作为运算符。管道表达式可以对输入文档做指定的转换。"
"管道表达式使用一个 :doc:`文档 </core/document>` 结构体，并且可以包含其他的 :ref:`表达式 <aggregation-expressions>` 。"

#: ../source/core/aggregation-pipeline.txt:60
msgid ""
"Generally, expressions are stateless and are only evaluated when seen by the"
" aggregation process with one exception: :ref:`accumulator <aggregation-"
"accumulator-operators>` expressions."
msgstr ""
"一般来说，表达式是无状态的，并且仅在聚合过程中处于计算状态，除了 :ref:`累计操作符 <aggregation-"
"accumulator-operators>` 表达式。"

#: ../source/core/aggregation-pipeline.txt:64
msgid ""
"The accumulators, used with the :pipeline:`$group` pipeline operator, "
"maintain their state (e.g. totals, maximums, minimums, and related data) as "
"documents progress through the pipeline."
msgstr ""
"使用 :pipeline:`$group` 操作符的累计操作，需要在管道处理文档的过程中维护自己的状态（例如总数、最大值、最小值和相关数据）。"

#: ../source/core/aggregation-pipeline.txt:68
msgid ""
"For more information on expressions, see :ref:`aggregation-expressions`."
msgstr "详情请参考 :ref:`聚合表达式 <aggregation-expressions>` 。"


#: ../source/core/aggregation-pipeline.txt:86
msgid ""
"The :pipeline:`$match` and :pipeline:`$sort` pipeline operators can take "
"advantage of an index when they occur at the **beginning** of the pipeline."
msgstr ""
"如果在管道的 **开始** 阶段使用 :pipeline:`$match` 和 :pipeline:`$sort`，这两个操作符会使用索引提高性能。"

#: ../source/core/aggregation-pipeline.txt:96
msgid ""
"Even when the pipeline uses an index, aggregation still requires access to "
"the actual documents; i.e. indexes cannot fully cover an aggregation "
"pipeline."
msgstr ""
"即使使用了索引，聚合依然需要访问实际存储的文档；比如索引不能满足聚合管道所需要的所有字段的时候。"

#: ../source/core/aggregation-pipeline.txt:100
msgid ""
"In previous versions, for very select use cases, an index could cover a "
"pipeline."
msgstr ""
"在以前的版本中，对每一个选择用例，一个索引可能贯穿整个管道。"

#: ../source/core/aggregation-pipeline.txt:123
msgid ""
"The aggregation pipeline has an internal optimization phase that provides "
"improved performance for certain sequences of operators. For details, see "
":doc:`/core/aggregation-pipeline-optimization`."
msgstr ""
"聚合管道有一个内部的优化阶段，通过调整操作符的顺序来提高效率。详情请参考"
" :doc:`聚合管道的优化 </core/aggregation-pipeline-optimization>` 。"

#~ msgid ""
#~ "The aggregation pipeline provides an alternative to :term:`map-reduce` and "
#~ "may be the preferred solution for many aggregation tasks where the "
#~ "complexity of map-reduce may be unwarranted."
#~ msgstr ""

#~ msgid ""
#~ "Conceptually, documents from a collection travel through an aggregation "
#~ "pipeline, which transforms these objects as they pass through. For those "
#~ "familiar with UNIX-like shells (e.g. bash), the concept is analogous to the "
#~ "pipe (i.e. ``|``)."
#~ msgstr ""

#~ msgid ""
#~ "The MongoDB aggregation pipeline starts with the documents of a collection "
#~ "and streams the documents from one :ref:`pipeline operator <aggregation-"
#~ "pipeline-operator-reference>` to the next to process the documents. Each "
#~ "operator in the pipeline transforms the documents as they pass through the "
#~ "pipeline. Pipeline operators do not need to produce one output document for "
#~ "every input document. Operators may generate new documents or filter out "
#~ "documents. Pipeline operators can be repeated in the pipeline."
#~ msgstr ""

#~ msgid ""
#~ "The :method:`db.collection.aggregate()` method returns a cursor and can "
#~ "return result sets of any size. Previous versions returned all results in a "
#~ "single document, and the result set was subject to a size limit of 16 "
#~ "megabytes."
#~ msgstr ""

#~ msgid ""
#~ "See :ref:`aggregation-pipeline-operator-reference` for the list of pipeline "
#~ "operators that define the stages."
#~ msgstr ""

#~ msgid ""
#~ "For example usage of the aggregation pipeline, consider :doc:`/tutorial"
#~ "/aggregation-with-user-preference-data` and :doc:`/tutorial/aggregation-zip-"
#~ "code-data-set`, as well as the :dbcommand:`aggregate` command and the "
#~ ":method:`db.collection.aggregate()` method reference pages."
#~ msgstr ""

#~ msgid ""
#~ "Each pipeline operator takes a pipeline expression as its operand. Pipeline "
#~ "expressions specify the transformation to apply to the input documents. "
#~ "Expressions have a :term:`document` structure and can contain fields, "
#~ "values, and :ref:`operators <aggregation-expression-operators>`."
#~ msgstr ""

#~ msgid ""
#~ "Generally, expressions are stateless and are only evaluated when seen by the"
#~ " aggregation process with one exception: :term:`accumulator` expressions. "
#~ "The accumulator expressions, used with the :pipeline:`$group` pipeline "
#~ "operator, maintain their state (e.g. totals, maximums, minimums, and related"
#~ " data) as documents progress through the pipeline."
#~ msgstr ""

#~ msgid ""
#~ "For the expression operators, see :ref:`aggregation-expression-operators`."
#~ msgstr ""

#~ msgid ""
#~ "The :pipeline:`$match`, :pipeline:`$sort`, :pipeline:`$limit`, and "
#~ ":pipeline:`$skip` pipeline operators can take advantage of an index when "
#~ "they occur at the **beginning** of the pipeline **before** any of the "
#~ "following aggregation operators: :pipeline:`$project`, :pipeline:`$unwind`, "
#~ "and :pipeline:`$group`."
#~ msgstr ""

#~ msgid ""
#~ "For unsharded collections, when the aggregation pipeline only needs to "
#~ "access the indexed fields to fulfill its operations, an index can "
#~ ":ref:`cover <read-operations-covered-query>` the pipeline."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "Consider the following index on the ``orders`` collection:"
#~ msgstr ""

#~ msgid ""
#~ "This index can cover the following aggregation pipeline operation because "
#~ "MongoDB does not need to inspect the data outside of the index to fulfill "
#~ "the operation:"
#~ msgstr ""

#~ msgid ""
#~ "The aggregation pipeline has an internal optimization phase that provides "
#~ "improved performance for certain sequences of operators. For details, see "
#~ ":ref:`aggregation-pipeline-sequence-optimization`."
#~ msgstr ""

# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
msgid "Replica Set Data Synchronization"
msgstr "复制集的数据同步"

#: ../source/core/replica-set-sync.txt:9
msgid ""
"In order to maintain up-to-date copies of the shared data set, members of a "
"replica set :term:`sync` or replicate data from other members. MongoDB uses "
"two forms of data synchronization: :ref:`initial sync <replica-set-initial-"
"sync>` to populate new members with the full data set, and replication to "
"apply ongoing changes to the entire data set."
msgstr ""
"为了维持数据集镜像中数据的实时性，复制集的节点会从其他节点上 :term:`sync`  或"
"者复制数据。Mongodb在 :ref:`初始同步 <replica-set-initial-sync>` 的时候将完整"
"的数据集传输给新的节点，然后通过复制不间断的将数据集的变动应用在从节点上。"

#: ../source/core/replica-set-sync.txt:19
msgid "Initial Sync"
msgstr "初始同步"

#: ../source/core/replica-set-sync.txt:21
msgid ""
"Initial sync copies all the data from one member of the replica set to "
"another member. A member uses initial sync when the member has no data, such "
"as when the member is new, or when the member has data but is missing a "
"history of the set's replication."
msgstr ""
"初始同步会将完整的数据集复制到各个节点上。当一个节点没有数据的适合，就会进行"
"初始同步，比如，当它是新加的节点，或者它的数据已经无法通过复制追上最新的数据"
"了，也会进行初始同步。"

#: ../source/core/replica-set-sync.txt:26
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:28
msgid ""
"Clones all databases. To clone, the :program:`mongod` queries every "
"collection in each source database and inserts all data into its own copies "
"of these collections.  At this time, ``_id`` indexes are also built. The "
"clone process only copies valid data, omitting invalid documents."
msgstr ""
"复制所有的数据库。 :program:`mongod` 会查询所有的表和数据库，然后将所有的数据"
"插入这些表的备份中，同时也会建立_id的索引。"

#: ../source/core/replica-set-sync.txt:34
msgid ""
"Applies all changes to the data set. Using the oplog from the source, the :"
"program:`mongod` updates its data set to reflect the current state of the "
"replica set."
msgstr ""
"应用数据集中所有的数据变动。 :program:`mongod` 通过oplog来更新数据，从而让数"
"据集保持最新的状态。"

#: ../source/core/replica-set-sync.txt:38
msgid ""
"Builds all indexes on all collections (except ``_id`` indexes, which were "
"already completed)."
msgstr "建立所有表上的索引（除了_id ，这个之前已经建立完成）。"

#: ../source/core/replica-set-sync.txt:41
msgid ""
"When the :program:`mongod` finishes building all index builds, the member "
"can transition to a normal state, i.e. :term:`secondary`."
msgstr ""
"当 :program:`mongod` 完成了所有的索引的建立，该节点将会变为正常的状态i.e. :"
"term:`secondary`。"

#: ../source/core/replica-set-sync.txt:44
msgid ""
"When the clone process omits an invalid document from the sync, MongoDB "
"writes a message to the logs that begins with ``Cloner: found corrupt "
"document in <collection>``."
msgstr ""

#: ../source/core/replica-set-sync.txt:49
msgid ""
"To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""
"参见 :doc:`/tutorial/resync-replica-set-member` 以获得更多有关初始同步的信"
"息。"

#: ../source/core/replica-set-sync.txt:55
msgid "Replication"
msgstr "复制"

#: ../source/core/replica-set-sync.txt:57
msgid ""
"Replica set members replicate data continuously after the initial sync. This "
"process keeps the members up to date with all changes to the replica set's "
"data. In most cases, secondaries synchronize from the primary. Secondaries "
"may automatically change their *sync targets* if needed based on changes in "
"the ping time and state of other members' replication."
msgstr ""
"在初始同步后，复制集节点就会开始不断的复制数据了，这也就保证了节点上的数据总"
"是最新的。大多数时候，从节点从主节点上同步数据。从节点也可能会根据网络的延时"
"与其他节点的复制情况来自动的变更其自己的 *复制标记* 。"

#: ../source/core/replica-set-sync.txt:64
msgid ""
"For a member to sync from another, both members must have the same value for"
" the :data:`~replSetGetConfig.members[n].buildIndexes` setting."
msgstr ""
"如果希望从别的节点上复制数据，所有节点需要有一致的 :data:`~local.system."
"replset.members[n].buildIndexes` 值/每个节点的  :data:`~local.system.replset."
"members[n].buildIndexes` 必须是  ``true`` 或者 ``false`` 。"

#: ../source/core/replica-set-sync.txt:68
msgid ""
"Beginning in version 2.2, secondaries avoid syncing from :ref:`delayed "
"members <replica-set-delayed-members>` and :ref:`hidden members <replica-set-"
"hidden-members>`."
msgstr ""
"在2.2版本之后，从节点将不会从 :ref:`延时节点 <replica-set-delayed-members>`  "
"和  :ref:`隐藏节点  <replica-set-hidden-members>` 上复制数据。"

#: ../source/core/replica-set-sync.txt:73
msgid "Validity and Durability"
msgstr "准确性与持久化（Validity and Durability）"

#: ../source/core/replica-set-sync.txt:75
msgid ""
"In a replica set, the set can have at most one primary and only the primary "
"can accept write operations. [#edge-cases-2-primaries]_ Secondaries apply "
"operations from the primary asynchronously to provide :term:`eventual "
"consistency`."
msgstr ""
"复制集中，只有主节点才能接收写操作。只在主节点上进行写为节点间的 :term:`数据"
"一致性 <strict consistency>` 提供了保障。 "

#: ../source/core/replica-set-sync.txt:80
msgid ""
":term:`Journaling <journal>` provides single-instance write durability. "
"Without journaling, if a MongoDB instance terminates ungracefully, you must "
"assume that the database is in an invalid state."
msgstr ""
" :term:`Journaling <journal>` 保障了单个实例的写的持久化。如果MongoDB实例意外"
"挂了，而又没有journaling，那么数据库会处于不可用的状态。"

#: ../source/core/replica-set-sync.txt:84
msgid ""
"In MongoDB, clients can see the results of writes before they are made "
"durable:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
msgid ""
"Regardless of :doc:`write concern </reference/write-concern>`, other clients"
" can see the result of the write operations before the write operation is "
"acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:5
msgid ""
"Clients can read data which may be subsequently :doc:`rolled back </core"
"/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:92
msgid "Multithreaded Replication"
msgstr "多线复制"

#: ../source/core/replica-set-sync.txt:94
msgid ""
"MongoDB applies write operations in batches using multiple threads to "
"improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 "
"<storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-"
"wiredtiger>`) and simultaneously applies each group of operations using a "
"different thread. MongoDB always applies write operations to a given "
"document in their original write order."
msgstr ""
"MongoDB允许通过多线程进行批量写操作来提高并发能力。MongoDB将批操作通过命名空"
"间来分组，"

#: ../source/core/replica-set-sync.txt:101
msgid ""
"While applying a batch, MongoDB blocks all read operations. As a result, "
"secondary read queries can never return data that reflect a state that never"
" existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:106
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:109
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:111
msgid ""
"With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches "
"memory pages that hold affected data and indexes to help improve the "
"performance of applying oplog entries. This *pre-fetch* stage minimizes the "
"amount of time MongoDB holds write locks while applying oplog entries. By "
"default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:117
msgid ""
"Optionally, you can disable all pre-fetching or only pre-fetch the index on "
"the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` "
"setting for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
msgid ""
"In some circumstances, two nodes in a replica set may *transiently* believe "
"that they are the primary, but at most, one of them will be able to complete"
" writes with :ref:`{w: majority} write concern <wc-w>`. The node that can "
"complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the "
"other node is a former primary that has not yet recognized its demotion, "
"typically due to a :term:`network partition`. When this occurs, clients that"
" connect to the former primary may observe stale data despite having "
"requested read preference :readmode:`primary`."
msgstr ""

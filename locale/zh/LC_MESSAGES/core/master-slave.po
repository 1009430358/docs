# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/master-slave.txt:3
msgid "Master Slave Replication"
msgstr "主从复制"

#: ../source/core/master-slave.txt:7
msgid ""
":doc:`Replica sets </core/replication>` replace :term:`master`\\-:term:"
"`slave` replication for most use cases. If possible, use replica sets rather "
"than master-slave replication for all new production deployments. This "
"documentation remains to support legacy deployments and for archival "
"purposes only."
msgstr ""
":doc:`复制集 </core/replication>`  已经在大多数场合下替代了 :term:`master`"
"\\-:term:`slave` 复制。如果可能的话，尽可能使用复制集而不是主-从复制架构。本"
"文旨在于为之前遗留的主从架构提供支持，或是仅用于学习。"

#: ../source/core/master-slave.txt:13
msgid ""
"In addition to providing all the functionality of master-slave deployments, "
"replica sets are also more robust for production use. Master-slave "
"replication preceded replica sets and made it possible to have a large "
"number of non-master (i.e. slave) nodes, as well as to restrict replicated "
"operations to only a single database; however, master-slave replication "
"provides less redundancy and does not automate failover. See :ref:`replica-"
"set-equivalent` for a replica set configuration that is equivalent to master-"
"slave replication.  If you wish to convert an existing master-slave "
"deployment to a replica set, see :ref:`convert-master-slave-to-replica-set`."
msgstr ""

#: ../source/core/master-slave.txt:25
msgid "Fundamental Operations"
msgstr ""

#: ../source/core/master-slave.txt:28
msgid "Initial Deployment"
msgstr ""

#: ../source/core/master-slave.txt:30
msgid ""
"To configure a :term:`master`\\-:term:`slave` deployment, start two "
":program:`mongod` instances: one in master mode, and the other in slave "
"mode."
msgstr ""

#: ../source/core/master-slave.txt:34
msgid ""
"To start a :program:`mongod` instance in master mode, invoke "
":program:`mongod` as follows:"
msgstr ""

#: ../source/core/master-slave.txt:41
msgid ""
"With the :option:`--master <mongod --master>` option, the :program:`mongod` "
"will create a :data:`local.oplog.$main` collection, which the \"operation log"
"\" that queues operations that the slaves will apply to replicate operations "
"from the master. The :option:`--dbpath <mongod --dbpath>` is optional."
msgstr ""

#: ../source/core/master-slave.txt:47
msgid ""
"To start a :program:`mongod` instance in slave mode, invoke "
":program:`mongod` as follows:"
msgstr ""

#: ../source/core/master-slave.txt:54
msgid ""
"Specify the hostname and port of the master instance to the :option:`--"
"source <mongod --source>` argument. The :option:`--dbpath <mongod --dbpath>` "
"is optional."
msgstr ""

#: ../source/core/master-slave.txt:58
msgid ""
"For slave instances, MongoDB stores data about the source server in the "
":data:`local.sources` collection."
msgstr ""

#: ../source/core/master-slave.txt:62
msgid "Configuration Options for Master-Slave Deployments"
msgstr ""

#: ../source/core/master-slave.txt:64
msgid ""
"As an alternative to specifying the :option:`--source <mongod --source>` "
"run-time option, can add a document to :data:`local.sources` specifying the "
"master instance, as in the following operation in the :program:`mongo` "
"shell:"
msgstr ""

#: ../source/core/master-slave.txt:75
msgid ""
"In line 1, you switch context to the ``local`` database. In line 2, the :"
"method:`~db.collection.find()` operation should return no documents, to "
"ensure that there are no documents in the ``sources`` collection. Finally, "
"line 3 uses :method:`db.collection.insert()` to insert the source document "
"into the :data:`local.sources` collection. The model of the :data:`local."
"sources` document is as follows:"
msgstr ""

#: ../source/core/master-slave.txt:85
msgid ""
"The host field specifies the master :program:`mongod` instance, and holds a "
"resolvable hostname, i.e. IP address, or a name from a ``host`` file, or "
"preferably a fully qualified domain name."
msgstr ""

#: ../source/core/master-slave.txt:90
msgid ""
"You can append ``<:port>`` to the host name if the :program:`mongod` is not "
"running on the default ``27017`` port."
msgstr ""

#: ../source/core/master-slave.txt:95
msgid ""
"Optional. Specify a name of a database. When specified, MongoDB will only "
"replicate the indicated database."
msgstr ""

#: ../source/core/master-slave.txt:99
msgid ""
"Operational Considerations for Replication with Master Slave Deployments"
msgstr ""

#: ../source/core/master-slave.txt:101
msgid ""
"Master instances store operations in an :term:`oplog` which is a :doc:"
"`capped collection </core/capped-collections>`. As a result, if a slave "
"falls too far behind the state of the master, it cannot \"catchup\" and must "
"re-sync from scratch. Slave may become out of sync with a master if:"
msgstr ""

#: ../source/core/master-slave.txt:107
msgid ""
"The slave falls far behind the data updates available from that master."
msgstr ""

#: ../source/core/master-slave.txt:110
msgid ""
"The slave stops (i.e. shuts down) and restarts later after the master has "
"overwritten the relevant operations from the master."
msgstr ""

#: ../source/core/master-slave.txt:113
msgid ""
"When slaves are out of sync, replication stops. Administrators must "
"intervene manually to restart replication. Use the :dbcommand:`resync` "
"command. Alternatively, the :option:`--autoresync <mongod --autoresync>` "
"allows a slave to restart replication automatically, after ten second pause,"
" when the slave falls out of sync with the master. With "
":option:`--autoresync <mongod --autoresync>` specified, the slave will only "
"attempt to re-sync once in a ten minute period."
msgstr ""

#: ../source/core/master-slave.txt:121
msgid ""
"To prevent these situations you should specify a larger oplog when you start"
" the ``master`` instance, by adding the :option:`--oplogSize <mongod "
"--oplogSize>` option when starting :program:`mongod`. If you do not specify "
":option:`--oplogSize <mongod --oplogSize>`, :program:`mongod` will allocate "
"5% of available disk space on start up to the oplog, with a minimum of 1GB "
"for 64bit machines and 50MB for 32bit machines."
msgstr ""

#: ../source/core/master-slave.txt:130
msgid "Run time Master-Slave Configuration"
msgstr ""

#: ../source/core/master-slave.txt:132
msgid ""
"MongoDB provides a number of command line options for :program:`mongod` "
"instances in :term:`master`\\-:term:`slave` deployments. See the :ref"
":`Master-Slave Replication Command Line Options <cli-mongod-master-slave>` "
"for options."
msgstr ""

#: ../source/core/master-slave.txt:138
msgid "Diagnostics"
msgstr ""

#: ../source/core/master-slave.txt:140
msgid ""
"On a :term:`master` instance, issue the following operation in the :program:"
"`mongo` shell to return replication status from the perspective of the "
"master:"
msgstr ""

#: ../source/core/master-slave.txt:150
msgid ""
":method:`rs.printReplicationInfo()`. For previous versions, use "
":method:`db.printReplicationInfo()`."
msgstr ""

#: ../source/core/master-slave.txt:153
msgid ""
"On a :term:`slave` instance, use the following operation in the :program:"
"`mongo` shell to return the replication status from the perspective of the "
"slave:"
msgstr ""

#: ../source/core/master-slave.txt:163
msgid ""
":method:`rs.printSlaveReplicationInfo()`. For previous versions, use "
":method:`db.printSlaveReplicationInfo()`."
msgstr ""

#: ../source/core/master-slave.txt:166
msgid ""
"Use the :dbcommand:`serverStatus` as in the following operation, to return "
"status of the replication:"
msgstr ""

#: ../source/core/master-slave.txt:173
msgid ""
"See :ref:`server status repl fields <server-status-repl>` for documentation "
"of the relevant section of output."
msgstr ""

#: ../source/core/master-slave.txt:177
msgid "Security"
msgstr ""

#: ../source/core/master-slave.txt:179
msgid ""
"When running with :setting:`~security.authorization` enabled, in "
":term:`master`\\-:term:`slave` deployments configure a "
":setting:`~security.keyFile` so that slave :program:`mongod` instances can "
"authenticate and communicate with the master :program:`mongod` instance."
msgstr ""

#: ../source/core/master-slave.txt:185
msgid ""
"To enable authentication and configure the :setting:`~security.keyFile` add "
"the following option to your configuration file:"
msgstr ""

#: ../source/core/master-slave.txt:194
msgid ""
"You may chose to set these run-time configuration options using the :option:"
"`--keyFile <mongod --keyFile>` option on the command line."
msgstr ""

#: ../source/core/master-slave.txt:197
msgid ""
"Setting :setting:`~security.keyFile` enables authentication and specifies a "
"key file for the :program:`mongod` instances to use when authenticating to "
"each other. The content of the key file is arbitrary but must be the same on "
"all members of the deployment can connect to each other."
msgstr ""

#: ../source/core/master-slave.txt:202
msgid ""
"The key file must be less one kilobyte in size and may only contain "
"characters in the base64 set. The key file must not have group or \"world\" "
"permissions on UNIX systems. Use the following command to use the OpenSSL "
"package to generate \"random\" content for use in a key file:"
msgstr ""

#: ../source/core/master-slave.txt:211
msgid ":doc:`/security` for more information about security in MongoDB"
msgstr ""

#: ../source/core/master-slave.txt:214
msgid "Ongoing Administration and Operation of Master-Slave Deployments"
msgstr ""

#: ../source/core/master-slave.txt:219
msgid "Deploy Master-Slave Equivalent using Replica Sets"
msgstr ""

#: ../source/core/master-slave.txt:221
msgid ""
"If you want a replication configuration that resembles :term:`master`\\-:"
"term:`slave` replication, using :term:`replica sets <replica set>` replica "
"sets, consider the following replica configuration document. In this "
"deployment hosts ``<master>`` and ``<slave>`` [#host-are-hostnames]_ provide "
"replication that is roughly equivalent to a two-instance master-slave "
"deployment:"
msgstr ""

#: ../source/core/master-slave.txt:238
msgid ""
"See :doc:`/reference/replica-configuration` for more information about "
"replica set configurations."
msgstr ""

#: ../source/core/master-slave.txt:241
msgid ""
"In replica set configurations, the :data:`~replSetGetConfig.members[n].host`"
" field must hold a resolvable hostname."
msgstr ""

#: ../source/core/master-slave.txt:248
msgid "Convert a Master-Slave Deployment to a Replica Set"
msgstr ""

#: ../source/core/master-slave.txt:250
msgid ""
"To convert a master-slave deployment to a replica set, restart the current "
"master as a one-member replica set. Then remove the data directories from "
"previous secondaries and add them as new secondaries to the new replica set."
msgstr ""

#: ../source/core/master-slave.txt:255
msgid "To confirm that the current instance is master, run:"
msgstr ""

#: ../source/core/master-slave.txt:261
msgid "This should return a document that resembles the following:"
msgstr ""

#: ../source/core/master-slave.txt:273
msgid ""
"Shut down the :program:`mongod` processes on the master and all slave(s), "
"using the following command while connected to each instance:"
msgstr ""

#: ../source/core/master-slave.txt:281
msgid ""
"Back up your ``/data/db`` directories, in case you need to revert to the "
"master-slave deployment."
msgstr ""

#: ../source/core/master-slave.txt:284
msgid ""
"Start the former master with the :option:`--replSet <replSet>` option, as in "
"the following:"
msgstr ""

#: ../source/core/master-slave.txt:291
msgid ""
"Connect to the :program:`mongod` with the :program:`mongo` shell, and "
"initiate the replica set with the following command:"
msgstr ""

#: ../source/core/master-slave.txt:298
msgid ""
"When the command returns, you will have successfully deployed a one-member "
"replica set. You can check the status of your replica set at any time by "
"running the following command:"
msgstr ""

#: ../source/core/master-slave.txt:306
msgid ""
"You can now follow the :doc:`convert a standalone to a replica set </"
"tutorial/convert-standalone-to-replica-set>` tutorial to deploy your replica "
"set, picking up from the :ref:`Expand the Replica Set <expand-the-replica-"
"set>` section."
msgstr ""

#: ../source/core/master-slave.txt:312
msgid "Failing over to a Slave (Promotion)"
msgstr ""

#: ../source/core/master-slave.txt:314
msgid ""
"To permanently failover from a unavailable or damaged :term:`master` (``A`` "
"in the following example) to a :term:`slave` (``B``):"
msgstr ""

#: ../source/core/master-slave.txt:317
msgid "Shut down ``A``."
msgstr ""

#: ../source/core/master-slave.txt:319
msgid "Stop :program:`mongod` on ``B``."
msgstr ""

#: ../source/core/master-slave.txt:321
msgid ""
"Back up and move all data files that begin with ``local`` on ``B`` from the :"
"setting:`~storage.dbPath`."
msgstr ""

#: ../source/core/master-slave.txt:326 ../source/core/master-slave.txt:363
msgid ""
"Removing ``local.*`` is irrevocable and cannot be undone. Perform this step "
"with extreme caution."
msgstr ""

#: ../source/core/master-slave.txt:329
msgid ""
"Restart :program:`mongod` on ``B`` with the :option:`--master <mongod --"
"master>` option."
msgstr ""

#: ../source/core/master-slave.txt:332
msgid ""
"This is a one time operation, and is not reversible. ``A`` cannot become a "
"slave of ``B`` until it completes a full resync."
msgstr ""

#: ../source/core/master-slave.txt:336
msgid "Inverting Master and Slave"
msgstr ""

#: ../source/core/master-slave.txt:338
msgid ""
"If you have a :term:`master` (``A``) and a :term:`slave` (``B``) and you "
"would like to reverse their roles, follow this procedure. The procedure "
"assumes ``A`` is healthy, up-to-date and available."
msgstr ""

#: ../source/core/master-slave.txt:342
msgid ""
"If ``A`` is not healthy but the hardware is okay (power outage, server "
"crash, etc.), skip steps 1 and 2 and in step 8 replace all of ``A``'s files "
"with ``B``'s files in step 8."
msgstr ""

#: ../source/core/master-slave.txt:346
msgid ""
"If ``A`` is not healthy and the hardware is not okay, replace ``A`` with a "
"new machine. Also follow the instructions in the previous paragraph."
msgstr ""

#: ../source/core/master-slave.txt:349
msgid "To invert the master and slave in a deployment:"
msgstr ""

#: ../source/core/master-slave.txt:351
msgid "Halt writes on ``A`` using the :term:`fsync` command."
msgstr ""

#: ../source/core/master-slave.txt:353
msgid "Make sure ``B`` is up to date with the state of ``A``."
msgstr ""

#: ../source/core/master-slave.txt:355
msgid "Shut down ``B``."
msgstr ""

#: ../source/core/master-slave.txt:357
msgid ""
"Back up and move all data files that begin with ``local`` on ``B`` from the :"
"setting:`~storage.dbPath` to remove the existing ``local.sources`` data."
msgstr ""

#: ../source/core/master-slave.txt:366 ../source/core/master-slave.txt:381
msgid "Start ``B`` with the :option:`--master <mongod --master>` option."
msgstr ""

#: ../source/core/master-slave.txt:368
msgid ""
"Do a write on ``B``, which primes the :term:`oplog` to provide a new sync "
"start point."
msgstr ""

#: ../source/core/master-slave.txt:371
msgid ""
"Shut down ``B``. ``B`` will now have a new set of data files that start with "
"``local``."
msgstr ""

#: ../source/core/master-slave.txt:374
msgid ""
"Shut down ``A`` and replace all files in the :setting:`~storage.dbPath` of "
"``A`` that start with ``local`` with a copy of the files in the :setting:"
"`~storage.dbPath` of ``B`` that begin with ``local``."
msgstr ""

#: ../source/core/master-slave.txt:378
msgid ""
"Considering compressing the ``local`` files from ``B`` while you copy them, "
"as they may be quite large."
msgstr ""

#: ../source/core/master-slave.txt:383
msgid ""
"Start ``A`` with all the usual slave options, but include :option:`fastsync "
"<mongod --fastsync>`."
msgstr ""

#: ../source/core/master-slave.txt:387
msgid "Creating a Slave from an Existing Master's Disk Image"
msgstr ""

#: ../source/core/master-slave.txt:389
msgid ""
"If you can stop write operations to the :term:`master` for an indefinite "
"period, you can copy the data files from the master to the new :term:`slave` "
"and then start the slave with :option:`--fastsync <mongod --fastsync>`."
msgstr ""

#: ../source/core/master-slave.txt:396
msgid ""
"Be careful with :option:`--fastsync <mongod --fastsync>`.  If the data on "
"both instances is **not** identical, a discrepancy will exist forever."
msgstr ""

#: ../source/core/master-slave.txt:400
msgid ""
":option:`fastsync <mongod --fastsync>` is a way to start a slave by starting"
" with an existing master disk image/backup. This option declares that the "
"administrator guarantees the image is correct and completely up-to-date with"
" that of the master. If you have a full and complete copy of data from a "
"master you can use this option to avoid a full synchronization upon starting"
" the slave."
msgstr ""

#: ../source/core/master-slave.txt:408
msgid "Creating a Slave from an Existing Slave's Disk Image"
msgstr ""

#: ../source/core/master-slave.txt:410
msgid ""
"You can just copy the other :term:`slave's <slave>` data file snapshot "
"without any special options. Only take data snapshots when a :program:"
"`mongod` process is down or locked using :method:`db.fsyncLock()`."
msgstr ""

#: ../source/core/master-slave.txt:416
msgid "Resyncing a Slave that is too Stale to Recover"
msgstr ""

#: ../source/core/master-slave.txt:418
msgid ""
":term:`Slaves <slave>` asynchronously apply write operations from the :term:"
"`master` that the slaves poll from the master's :term:`oplog`. The oplog is "
"finite in length, and if a slave is too far behind, a full resync will be "
"necessary. To resync the slave, connect to a slave using the :program:"
"`mongo` and issue the :dbcommand:`resync` command:"
msgstr ""

#: ../source/core/master-slave.txt:430
msgid ""
"This forces a full resync of all data (which will be very slow on a large "
"database). You can achieve the same effect by stopping :program:`mongod` on "
"the slave, deleting the entire content of the :setting:`~storage.dbPath` on "
"the slave, and restarting the :program:`mongod`."
msgstr ""

#: ../source/core/master-slave.txt:436
msgid "Slave Chaining"
msgstr ""

#: ../source/core/master-slave.txt:438
msgid ""
":term:`Slaves <slave>` cannot be \"chained.\" They must all connect to the :"
"term:`master` directly."
msgstr ""

#: ../source/core/master-slave.txt:441
msgid ""
"If a slave attempts \"slave from\" another slave you will see the following "
"line in the :program:`mongod` long of the shell:"
msgstr ""

#: ../source/core/master-slave.txt:449
msgid "Correcting a Slave's Source"
msgstr ""

#: ../source/core/master-slave.txt:451
msgid ""
"To change a :term:`slave's <slave>` source, manually modify the slave's :"
"data:`local.sources` collection."
msgstr ""

#: ../source/core/master-slave.txt:0
msgid "Example"
msgstr ""

#: ../source/core/master-slave.txt:456
msgid ""
"Consider the following: If you accidentally set an incorrect hostname for "
"the slave's :option:`source <mongod --slave>`, as in the following example:"
msgstr ""

#: ../source/core/master-slave.txt:463
msgid ""
"You can correct this, by restarting the slave without the :option:`--slave "
"<mongod --slave>` and :option:`--source <mongod --source>` arguments:"
msgstr ""

#: ../source/core/master-slave.txt:471
msgid ""
"Connect to this :program:`mongod` instance using the :program:`mongo` shell "
"and update the :data:`local.sources` collection, with the following "
"operation sequence:"
msgstr ""

#: ../source/core/master-slave.txt:482
msgid ""
"Restart the slave with the correct command line arguments or with no :option:"
"`--source <mongod --source>` option. After configuring :data:`local.sources` "
"the first time, the :option:`--source <mongod --source>` will have no "
"subsequent effect. Therefore, both of the following invocations are correct:"
msgstr ""

#: ../source/core/master-slave.txt:493
msgid "or"
msgstr ""

#: ../source/core/master-slave.txt:499
msgid "The slave now polls data from the correct :term:`master`."
msgstr ""

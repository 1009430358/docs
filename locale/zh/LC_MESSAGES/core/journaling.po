# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, MongoDB, Inc.
# This file is distributed under the same license as the mongodb-manual package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: MongoDB Manual\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-04-08 13:03-0400\n"
"PO-Revision-Date: 2015-01-27 10:26+0800\n"
"Last-Translator: tychoish <tychoish@gmail.com>\n"
"Language-Team: Chinese (http://www.transifex.com/projects/p/mongodb-manual/"
"language/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.7.3\n"

# fe13a8e2d1b34068bab5d9b2af14441e
#: ../source/core/journaling.txt:5
msgid "Journaling Mechanics"
msgstr "Journaling机制"

# a1659b2905d84a558a07ee4c7bf90065
#: ../source/core/journaling.txt:9
msgid ""
"When running with journaling, MongoDB stores and applies :doc:`write "
"operations </core/write-operations>` in memory and in the on-disk journal "
"before the changes are present in the data files on disk. This document "
"discusses the implementation and mechanics of journaling in MongoDB systems.  "
"See :doc:`/tutorial/manage-journaling` for information on configuring, "
"tuning, and managing journaling."
msgstr ""
"当MongoDB运行在journaling状态下时，写操作在写入磁盘数据文件之前会先写入内存和"
"journal文件。本文讨论在MongoDB系统中的journaling机制以及它的实现。更多关于配"
"置、调试和管理journaling的信息请参看:doc:`/tutorial/manage-journaling`。"

# 0916cbe3a5564cd3be15ad3d827e7b0a
#: ../source/core/journaling.txt:19
msgid "Journal Files"
msgstr "Journal文件"

# e9fcd1249b144d7aa99a760b0dba4975
#: ../source/core/journaling.txt:21
msgid ""
"With journaling enabled, MongoDB creates a journal subdirectory within the "
"directory defined by :setting:`~storage.dbPath`, which is :file:`/data/db` by "
"default. The journal directory holds journal files, which contain write-ahead "
"redo logs. The directory also holds a last-sequence-number file. A clean "
"shutdown removes all the files in the journal directory. A dirty shutdown "
"(crash) leaves files in the journal directory; these are used to "
"automatically recover the database to a consistent state when the mongod "
"process is restarted."
msgstr ""
"当journaling开启后，MongoDB在定义好的:setting:`~storage.dbPath`路径下创建一个"
"journal子目录，dbPath默认路径为:file:`/data/db`。journal目录用来存放journal文"
"件，该文件用来记录write-ahead redo日志。该目录下还包含一个用来保存最近队列数的"
"文件。一次正常的shutdown会删除journal目录下的所有文件，而非正常的shutdown（比"
"如崩溃）则不会删除文件。当mongod进程重启时，这些文件用来自动恢复数据库保证数据"
"的一致性。"

# f34feb90ba964b318ab502a7ab5177a1
#: ../source/core/journaling.txt:30
msgid ""
"Journal files are append-only files and have file names prefixed with ``j."
"_``. When a journal file holds 1 gigabyte of data, MongoDB creates a new "
"journal file. Once MongoDB applies all the write operations in a particular "
"journal file to the database data files, it deletes the file, as it is no "
"longer needed for recovery purposes. Unless you write *many* bytes of data "
"per second, the journal directory should contain only two or three journal "
"files."
msgstr ""
"Journal文件是只追加文件，文件名以``j._``开头。当journal文件达到1G数据时，"
"MongoDB会创建一个新的journal文件。一旦某个journal文件的所有写操作都被刷新到数"
"据库数据文件之后，MongoDB将删除掉这个文件，因为以后都不会再用该文件来进行数据"
"恢复了。除非你每秒进行大量数据的写入，否则journal目录里应该只会有两三个文件。"

# 628b0f2afd634755981da1cd7c7f2279
#: ../source/core/journaling.txt:42
msgid ""
"To speed the frequent sequential writes that occur to the current journal "
"file, you can ensure that the journal directory is on a different filesystem "
"from the database data files."
msgstr ""
"为了提高当前journal文件频繁的顺序写入速度，您可以将journal文件放在与数据库数据"
"文件不同的文件系统下。"

# f7056f65b8ee4f8497b3a8e8953388a7
#: ../source/core/journaling.txt:48
msgid ""
"If you place the journal on a different filesystem from your data files you "
"*cannot* use a filesystem snapshot alone to capture valid backups of a :"
"setting:`~storage.dbPath` directory. In this case, use :method:`~db."
"fsyncLock()` to ensure that database files are consistent before the snapshot "
"and :method:`~db.fsyncUnlock()` once the snapshot is complete."
msgstr ""
"如果将journal文件放在与数据文件不同的文件系统下，那么将不能单独使用文件系统快"
"照备份:setting:`~storage.dbPath` 目录下的文件。在这种情况下，利用:method:`~db."
"fsyncLock()`方法来确保数据库文件的一致性，等快照生成完毕之后使用:method:`~db."
"fsyncUnlock()`方法释放锁定。"

# 878e53ec2e6d444290bf9b4bd133568d
#: ../source/core/journaling.txt:57
msgid ""
"Depending on your filesystem, you might experience a preallocation lag the "
"first time you start a :program:`mongod` instance with journaling enabled."
msgstr ""
"根据你文件系统的不同，当第一次以journaling方式启动一个mongod进程时，可能会因为"
"预分配而产生延时。"

# f6abc8d1a7d74c05a263baab7bf76741
#: ../source/core/journaling.txt:61
msgid ""
"MongoDB may preallocate journal files if the :program:`mongod` process "
"determines that it is more efficient to preallocate journal files than create "
"new journal files as needed. The amount of time required to pre-allocate lag "
"might last several minutes, during which you will not be able to connect to "
"the database. This is a one-time preallocation and does not occur with future "
"invocations."
msgstr ""
"如果:program:`mongod`进程认为预分配journal文件比在需要时去创建一个新的journal"
"文件更有效，那么MongoDB会预先分配journal文件。预分配所需要的时间可能需要几分"
"钟，在这段时间里是连接不了数据库的。这是一次性预分配，在以后的调用中都不会发生"
"再分配。"

# 40b3a85ea65e45c7bce1dd20f2e9158a
#: ../source/core/journaling.txt:68
msgid ""
"To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""
"为了避免预分配带来的延时，可以参见:ref:`journaling-avoid-preallocation-lag`"

# 23dea67908a147448246595c0dc29297
#: ../source/core/journaling.txt:73
msgid "Storage Views used in Journaling"
msgstr "journaling中的存储视图"

# 8e3ff5f04d784bc586d55dd60e00a794
#: ../source/core/journaling.txt:75
msgid "Journaling adds three internal storage views to MongoDB."
msgstr "journaling中包括三种内部存储视图来服务MongoDB"

# 4b9003680636429e98b9f7216e5b8668
#: ../source/core/journaling.txt:77
msgid ""
"The ``shared view`` stores modified data for upload to the MongoDB data "
"files. The ``shared view`` is the only view with direct access to the MongoDB "
"data files. When running with journaling, :program:`mongod` asks the "
"operating system to map your existing on-disk data files to the ``shared "
"view`` virtual memory view. The operating system maps the files but does not "
"load them. MongoDB later loads data files into the ``shared view`` as needed."
msgstr ""
"``shared view``存储修改过后的数据并刷新到MongoDB数据文件中。``shared view``是"
"唯一能够直接访问MongoDB数据文件的视图。当运行在journaling开启状态下时，:"
"program:`mongod`要求操作系统将磁盘上存在的数据文件映射到``shared view``虚拟内"
"存视图。操作系统只映射文件而不会加载数据文件。只有在需要时MongoDB才会将数据文"
"件加载进``shared view``"

# bebb8026e6c74feea6c3dd66f90b4c78
#: ../source/core/journaling.txt:85
msgid ""
"The ``private view`` stores data for use with :doc:`read operations </core/"
"read-operations>`.  The ``private view`` is the first place MongoDB applies "
"new :doc:`write operations </core/write-operations>`. Upon a journal commit, "
"MongoDB copies the changes made in the ``private view`` to the ``shared "
"view``, where they are then available for uploading to the database data "
"files."
msgstr ""
"``private view``用来存储:doc:`read operations </core/read-operations>`的数据。"
"``private view``是第一个接受MongoDB新的:doc:`write operations </core/write-"
"operations>`的位置。在journal提交后，MongoDB将``private view``的更改复制到"
"``shared view``，这些更改通过shared view刷新到数据库数据文件里。"

# 0f4a3f6d1b824d999aee6d07043e767d
#: ../source/core/journaling.txt:91
msgid ""
"The journal is an on-disk view that stores new write operations after MongoDB "
"applies the operation to the ``private view`` but before applying them to the "
"data files. The journal provides durability. If the :program:`mongod` "
"instance were to crash without having applied the writes to the data files, "
"the journal could replay the writes to the ``shared view`` for eventual "
"upload to the data files."
msgstr ""
"journal是一个硬盘视图，用来存储MongoDB将写操作应用到``private view``之后数据文"
"件之前的写操作。journal文件提供健壮性。如果:program:`mongod`进程在将写操作数据"
"写入数据文件之前崩溃，journal文件可以重新将写操作数据应用到``shared view``，最"
"后再加载到数据文件。"

# 489b8af0ad6d4db5af7731f4ebd960d0
#: ../source/core/journaling.txt:101
msgid "How Journaling Records Write Operations"
msgstr "journaling如何记录写操作"

# 05fff2ba1cda448d894011d1f5e501e8
#: ../source/core/journaling.txt:103
msgid ""
"MongoDB copies the write operations to the journal in batches called group "
"commits. These \"group commits\" help minimize the performance impact of "
"journaling, since a group commit must block all writers during the commit.  "
"See :setting:`~storage.journal.commitIntervalMs` for information on the "
"default commit interval."
msgstr ""
"MongoDB将写操作批量复制到journal文件，这种方式成为批量提交。\"group commits"
"\"可以降低journaling机制对性能的影响，因为批量提交在提交时阻塞所有的写操作。关"
"于默认的提交时间间隔参见:setting:`~storage.journal.commitIntervalMs`"

# 766b2cdbfd0d48d4854f5692d264d0a7
#: ../source/core/journaling.txt:109
msgid ""
"Journaling stores raw operations that allow MongoDB to reconstruct the "
"following:"
msgstr "journaling机制存储的都是原始操作，这样MongoDB可以用它来重现以下操作："

# 26a75fc93fa743bebef638efadac7540
#: ../source/core/journaling.txt:112
msgid "document insertion/updates"
msgstr "文档的插入/更新"

# a7f5755b405a42c3b653ebb3381c734e
#: ../source/core/journaling.txt:113
msgid "index modifications"
msgstr "索引的修改"

# 5f1a3f888a404bbfb56bddb008de33a1
#: ../source/core/journaling.txt:114
msgid "metadata changes to the namespace files"
msgstr "对命名空间文件元数据的更改"

# 929d9c2def7946aca19a39e2ea5bc16f
#: ../source/core/journaling.txt:115
msgid "creation and dropping of databases and their associated data files"
msgstr "创建和删除数据库以及他们关联的数据文件"

# 595cf8d4ec0e41f0a88674e7b31c96ed
#: ../source/core/journaling.txt:117
msgid ""
"As :doc:`write operations </core/write-operations>` occur, MongoDB writes the "
"data to the ``private view`` in RAM and then copies the write operations in "
"batches to the journal. The journal stores the operations on disk to ensure "
"durability.  Each journal entry describes the bytes the write operation "
"changed in the data files."
msgstr ""
"当:doc:`write operations </core/write-operations>`发生时，MongoDB将数据写入内"
"存的``private view``，然后批量复制写操作到journal文件。journal文件将这些操作存"
"储到磁盘保证持久性。每条journal都描述了写操作在数据文件里发生改变的具体地址。"

# 83e6db13df034f8b8cbe25b287f6cc1a
#: ../source/core/journaling.txt:123
msgid ""
"MongoDB next applies the journal's write operations to the ``shared view``. "
"At this point, the ``shared view`` becomes inconsistent with the data files."
msgstr ""
"然后MongoDB将journal文件里的写操作应用到``shared view``。这时，``shared view``"
"将与数据文件中的数据不一致。"

# 3001d266fd3540f7b0f5847b670e92ce
#: ../source/core/journaling.txt:127
msgid ""
"At default intervals of 60 seconds, MongoDB asks the operating system to "
"flush the ``shared view`` to disk. This brings the data files up-to-date with "
"the latest write operations.  The operating system may choose to flush the "
"``shared view`` to disk at a higher frequency than 60 seconds, particularly "
"if the system is low on free memory."
msgstr ""
"在默认的60秒间隔内，MongoDB通过操作系统将``shared view``里的数据刷新到磁盘上。"
"这保证了数据文件里的数据与最新写操作数据是一致的。操作系统可以选择高于60秒的频"
"率刷新``shared view``，特别是当系统的空闲内存较少时。"

# d260ab599f6d42169d5d8cf7851b295f
#: ../source/core/journaling.txt:133
msgid ""
"When MongoDB flushes write operations to the data files, MongoDB notes which "
"journal writes have been flushed.  Once a journal file contains only flushed "
"writes, it is no longer needed for recovery, and MongoDB either deletes it or "
"recycles it for a new journal file."
msgstr ""
"当MongoDB刷新journal文件的写操作到数据文件时，会记录哪些journal写操作已经被刷"
"新过。一旦journal文件中只包含被刷新过的写操作时，这个文件就不会再起到恢复数据"
"的作用，MongoDB会删除它，或者将其回收用作新的journal文件"

# 3a64d08f6b4c4ebbac9806d1214c0ed0
#: ../source/core/journaling.txt:137
msgid ""
"As part of journaling, MongoDB routinely asks the operating system to remap "
"the ``shared view`` to the ``private view``, in order to save physical RAM. "
"Upon a new remapping, the operating system knows that physical memory pages "
"can be shared between the ``shared view`` and the ``private view`` mappings."
msgstr ""
"作为整个journaling机制的一部分，MongoDB会照常请求操作系统将``shared view``重新"
"映射到``private view``，以节省物理内存。这一次的重新映射，操作系统知道将物理内"
"存页共享在``shared view``和``private view``映射之间。"

# 751e56bfdda94ceea11df8bfbb76466b
#: ../source/core/journaling.txt:144
msgid ""
"The interaction between the ``shared view`` and the on-disk data files is "
"similar to how MongoDB works *without* journaling, which is that MongoDB asks "
"the operating system to flush in-memory changes back to the data files every "
"60 seconds."
msgstr ""
"``shared view``和磁盘数据文件之间的交互和MongoDB工作在无journaling状态是一样"
"的，MongoDB请求操作系统每60秒将内存改变刷新到数据文件中"

#: ../source/core/journaling.txt:38
msgid ""
"You can use the :setting:`storage.smallFiles` run time option when starting :"
"program:`mongod` to limit the size of each journal file to 128 megabytes, if "
"you prefer."
msgstr ""
"如果愿意，您可以在:program:`mongod`启动时利用启动参数:setting:`storage."
"smallFiles`限制每个journal的大小为128M"

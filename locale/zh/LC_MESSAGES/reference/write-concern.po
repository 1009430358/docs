# 
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 2.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-03 15:39-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/write-concern.txt:6
msgid "Write Concern Reference"
msgstr "安全写级别参考"

#: ../source/reference/write-concern.txt:10
msgid ""
":doc:`Write concern </core/write-concern>` describes the guarantee that "
"MongoDB provides when reporting on the success of a write operation."
msgstr ":doc:`安全写级别 </core/write-concern>` 描述了 MongoDB 在报告一个写"
"操作的成功时提供的保障。"

#: ../source/reference/write-concern.txt:13
msgid ""
"A new protocol for :ref:`write operations <rel-notes-write-operations>` "
"integrates write concerns with the write operations and eliminates the need "
"to call the :dbcommand:`getLastError` command. Previous versions required a "
":dbcommand:`getLastError` command immediately after a write operation to "
"specify the write concern."
msgstr "用于 :ref:`写操作 <rel-notes-write-operations>` 的新协议将安全写级别与写操作"
"结合在一起，并不需要调用 :dbcommand:`getLastError` 命令。以前的版本需要在一个写操作"
"后马上调用 :dbcommand:`getLastError` 命令以指定安全写级别。"

#: ../source/reference/write-concern.txt:22
msgid "Read Isolation Behavior"
msgstr "读隔离行为"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:1
msgid ""
"MongoDB allows clients to read documents inserted or modified before it "
"commits these modifications to disk, regardless of write concern level or "
"journaling configuration. As a result, applications may observe two classes "
"of behaviors:"
msgstr "若无视安全写级别或者日志配置，MongoDB 允许客户端读取未保存到修改到硬盘"
"上的写入或者修改的文档。其结果是应用可能会观测到两类行为："

#: ../source/includes/fact-write-concern-read-uncommitted.rst:6
msgid ""
"For systems with multiple concurrent readers and writers, MongoDB will allow"
" clients to read the results of a write operation before the write operation"
" returns."
msgstr "对于有着多病发的读和写的系统来，MongoDB 将允许客户端在一个写操作返回之前"
"读取它的结果。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:10
msgid ""
"If the :program:`mongod` terminates before the journal commits, even if a "
"write returns successfully, queries may have read data that will not exist "
"after the :program:`mongod` restarts."
msgstr "如果在日志提交之前 :program:`mongod` 中断了，即使写操作成功返回了，"
"在 :program:`mongod` 重起之后，查询也可能已经读取了不存在的数据。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:14
msgid ""
"Other database systems refer to these isolation semantics as *read "
"uncommitted*. For all inserts and updates, MongoDB modifies each document in"
" isolation: clients never see documents in intermediate states. For multi-"
"document operations, MongoDB does not provide any multi-document "
"transactions or isolation."
msgstr "其他数据库系统将这些隔离语义定义为 *脏读* 。对于所有的插入和更新，"
"MongoDB 原子地修每一个文档；客户端绝对不会遇到中间状态的文档。对于多文档操作，"
"MongoDB 不提供任何多文档事物或隔离。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:20
msgid ""
"When :program:`mongod` returns a successful *journaled write concern*, the "
"data is fully committed to disk and will be available after "
":program:`mongod` restarts."
msgstr "当 :program:`mongod` 返回一个成功的 *journaled write concern* 的时候，"
"这些数据被完全提交到硬盘上了并且在 :program:`mongod` 重起之后也是可用的。"

#: ../source/includes/fact-write-concern-read-uncommitted.rst:24
msgid ""
"For replica sets, write operations are durable only after a write replicates"
" and commits to the journal of a majority of the members of the set. MongoDB"
" regularly commits data to the journal regardless of journaled write "
"concern: use the :setting:`~storage.journal.commitIntervalMs` to control how"
" often a :program:`mongod` commits the journal."
msgstr "对于复制集，写操作只有在写复制集之后并且提交日志到复制集的主节点后才是持久的。"
"无论日志的安全写级别是什么，MongoDB 定期地提交数据到日志：可以使用"
" :setting:`~storage.journal.commitIntervalMs` 来控制 :program:`mongod` 多久提交到"
"日志一。"

#: ../source/reference/write-concern.txt:27
msgid "Available Write Concern"
msgstr "可用的安全写级别"

#: ../source/reference/write-concern.txt:29
msgid ""
"Write concern can include the :ref:`w <wc-w>` option to specify the required"
" number of acknowledgments before returning, the :ref:`j <wc-j>` option to "
"require writes to the journal before returning, and :ref:`wtimeout <wc-"
"wtimeout>` option to specify a time limit to prevent write operations from "
"blocking indefinitely."
msgstr "安全写级别可以包含 :ref:`w <wc-w>` 选项以指定返回之前的确认次数，包含 :ref:`j <wc-j>` "
"选项需要在返回之前写到日志上，包含 :ref:`wtimeout <wc-wtimeout>` "
"选项指定一个时间限制以防止写操作无限期地阻塞下去。"

#: ../source/reference/write-concern.txt:35
msgid ""
"In sharded clusters, :program:`mongos` instances will pass the write concern"
" on to the shard."
msgstr "在分片集群中， :program:`mongos` 实例将把安全写级别分发给分片。"

#: ../source/reference/write-concern.txt:41
msgid "``w`` Option"
msgstr "``w`` 选项"

#: ../source/reference/write-concern.txt:43
msgid ""
"The ``w`` option provides the ability to disable write concern entirely *as "
"well as* specify the write concern for :term:`replica sets <replica set>`."
msgstr "``w`` 选项可以完全禁用安全写级别， *也* 可以为 :term:`replica sets <replica set>`"
"指定安全写级别。"

#: ../source/reference/write-concern.txt:47
msgid ""
"MongoDB uses ``w: 1`` as the default write concern. ``w: 1`` provides basic "
"receipt acknowledgment."
msgstr "MongoDB 使用 ``w: 1`` 作为默认的安全写级别。 ``w: 1`` 提供基本的接收确认。"

#: ../source/reference/write-concern.txt:50
msgid "The ``w`` option accepts the following values:"
msgstr " ``w`` 可以接收下列值："

#: ../source/reference/write-concern.txt:56
msgid "Value"
msgstr "值"

#: ../source/reference/write-concern.txt:58
msgid "Description"
msgstr "描述"

#: ../source/reference/write-concern.txt:60
msgid "``1``"
msgstr ""

#: ../source/reference/write-concern.txt:62
msgid ""
"Provides acknowledgment of write operations on a standalone "
":program:`mongod` or the :term:`primary` in a replica set."
msgstr "为一个单独的 :program:`mongod` 或者复制集里的 :term:`primary` "
"提供写操作通知。"

#: ../source/reference/write-concern.txt:65
msgid "This is the default write concern for MongoDB."
msgstr "这是 MongoDB 的默认安全写级别。"

#: ../source/reference/write-concern.txt:67
msgid "``0``"
msgstr ""

#: ../source/reference/write-concern.txt:69
msgid ""
"Disables basic acknowledgment of write operations, but returns information "
"about socket exceptions and networking errors to the application."
msgstr "禁用基本的写操作通知，但返回套接字异常和网络异常的信息给应用。"

#: ../source/reference/write-concern.txt:73
msgid ""
"If you disable basic write operation acknowledgment but require journal "
"commit acknowledgment, the journal commit prevails, and the server will "
"require that :program:`mongod` acknowledge the write operation."
msgstr "如果你禁用了基本的写操作通知，但是需要日志提交通知， the journal commit prevails, and the server will "
"require that :program:`mongod` acknowledge the write operation."

#: ../source/reference/write-concern.txt:78
msgid "<Number greater than 1>"
msgstr "大于 1 的数字"

#: ../source/reference/write-concern.txt:80
msgid ""
"Guarantees that write operations have propagated successfully to the "
"specified number of replica set members including the primary."
msgstr "保证写操作已经成功的传播给包括主节点在内的指定数量的复制集。"

#: ../source/reference/write-concern.txt:84
msgid ""
"For example, ``w: 2`` indicates acknowledgements from the primary and at "
"least one secondary."
msgstr "例如， ``w: 2`` 表明来自主节点和至少一个从节点的确认。"

#: ../source/reference/write-concern.txt:87
msgid ""
"If you set ``w`` to a number that is greater than the number of set members "
"that hold data, MongoDB waits for the non-existent members to become "
"available, which means MongoDB blocks indefinitely."
msgstr "如果你设置 ``w`` 为一个大于复制集中包含数据的成员的数字，那么 MongoDB "
"会等待不存在的成员变的可用，这意味着 MongoDB 将无限期的阻塞。"

#: ../source/reference/write-concern.txt:92
msgid "``\"majority\"``"
msgstr ""

#: ../source/reference/write-concern.txt:94
msgid ""
"Confirms that write operations have propagated to the majority of configured"
" replica set: a majority of the set's configured members must acknowledge "
"the write operation before it succeeds. This allows you to avoid hard coding"
" assumptions about the size of your replica set into your application."
msgstr "确认写操作已经传播给了配置的复制集的主节点：只有大部分复制集中配置的成员确认收到"
"写操作后，它才能成功。这可以使您避免对设置到您的应用中的复制集的数量进行硬编码假设。"

#: ../source/includes/fact-master-slave-majority.rst:1
msgid ""
"In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w:"
" \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, "
"``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-"
"slave>` deployments."
msgstr "在 :doc:`Master/Slave </core/master-slave>` 部署中，MongoDB 认为 ``w:"
" \"majority\"`` 是与 ``w: 1`` 等价的。在 MongoDB 的更早期版本中，在 :doc:`master/slave </core/master-"
"slave>` 部署期间， ``w: \"majority\"`` 会产生一个错误。"

#: ../source/reference/write-concern.txt:102
msgid "<tag set>"
msgstr ""

#: ../source/reference/write-concern.txt:104
msgid ""
"By specifying a :ref:`tag set <replica-set-configuration-tag-sets>`, you can"
" have fine-grained control over which replica set members must acknowledge a"
" write operation to satisfy the required level of write concern."
msgstr "通过指定 :ref:`tag set <replica-set-configuration-tag-sets>` ，你可以"
"更加细粒度的控制哪一个复制集成员必须确认某个写操作，以满足需要的安全写操作级别。"

#: ../source/reference/write-concern.txt:112
msgid "``j`` Option"
msgstr "``j`` 选项"

#: ../source/reference/write-concern.txt:114
msgid ""
"The ``j`` option confirms that the :program:`mongod` instance has written "
"the data to the on-disk journal. This ensures that data is not lost if the "
":program:`mongod` instance shuts down unexpectedly. Set to ``true`` to "
"enable."
msgstr " ``j`` 选项保证 :program:`mongod` 实例已经把数据写到了硬盘上的日志。"
"这可以保证如果 :program:`mongod` 实例以外停止的话，数据不会丢失。可以通过设"
"置为 ``true`` 开启选项。"

#: ../source/reference/write-concern.txt:119
msgid ""
"Specifying a write concern that includes ``j: true`` to a :program:`mongod` "
"or :program:`mongos` running with :option:`--nojournal` option now errors. "
"Previous versions would ignore the ``j: true``."
msgstr "给指定了 :option:`--nojournal` 选项的 :program:`mongod` 或者 :program:`mongos` "
"配置包含 ``j: true`` 的安全写级别现在会发生错误。以前的版本将忽略 ``j: true`` 。"

#: ../source/includes/note-write-concern-journaled-replication.rst:1
msgid ""
"Requiring *journaled* write concern in a replica set only requires a journal"
" commit of the write operation to the :term:`primary` of the set regardless "
"of the level of *replica acknowledged* write concern."
msgstr "在复制集里需要的 *journaled* 安全写级别仅仅需要对复制集的 :term:`primary` 节点"
"的写操作的日志提交，而忽略 *replica acknowledged* 安全写级的等级。"

#: ../source/reference/write-concern.txt:130
msgid "``wtimeout``"
msgstr ""

#: ../source/reference/write-concern.txt:132
msgid ""
"This option specifies a time limit, in milliseconds, for the write concern. "
"``wtimeout`` is only applicable for ``w`` values greater than ``1``."
msgstr "这个选项为安全写级别指定一个时间限制，以毫秒为单位。 ``wtimeout`` "
"仅仅适用于 ``w`` 的大于 ``1`` 的值。"

#: ../source/reference/write-concern.txt:136
msgid ""
"``wtimeout`` causes write operations to return with an error after the "
"specified limit, even if the required write concern is not fulfilled. When "
"these write operations return, MongoDB **does not** undo successful data "
"modifications performed before the write concern exceeded the ``wtimeout`` "
"time limit."
msgstr "超过指定的限制之后， ``wtimeout`` 会造成写操作返回并且发生错误，即使"
"所需要的安全写级别还没有完成。当这些写操作返的时候，MongoDB **不会** 撤销安"
"全写级别在超出 ``wtimeout`` 时间限制之前成功的数据修改。"

#: ../source/reference/write-concern.txt:142
msgid ""
"If you do not specify the ``wtimeout`` option and the level of write concern"
" is unachievable, the write operation will block indefinitely. Specifying a "
"``wtimeout`` value of ``0`` is equivalent to a write concern without the "
"``wtimeout`` option."
msgstr "如果你没有指定 ``wtimeout`` 选项，并且安全写级别的等级是不可完成的，"
"那么这个写操作将会永久的阻塞下去。为安全写级别指定一个值为 ``0`` 的 ``wtimeout`` "
"就等于没有指定  ``wtimeout``  选项。"

#: ../source/reference/write-concern.txt:147
msgid ""
":doc:`Write Concern Introduction </core/write-concern>` and :ref:`Write "
"Concern for Replica Sets <replica-set-write-concern>`."
msgstr ""

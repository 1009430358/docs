#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/aggregate.txt:3
msgid "aggregate"
msgstr ""

#: ../source/reference/command/aggregate.txt:15
msgid ""
"Performs aggregation operation using the :doc:`aggregation pipeline "
"</reference/operator/aggregation-pipeline>`. The pipeline allows users to "
"process data from a collection with a sequence of stage-based manipulations."
msgstr ""

#: ../source/reference/command/aggregate.txt:45
msgid ""
":doc:`aggregation pipeline </reference/operator/aggregation-pipeline>` "
"introduces the :pipeline:`$out` operator to allow :dbcommand:`aggregate` "
"command to store results to a collection."
msgstr ""

#: ../source/reference/command/aggregate.txt:22
msgid "The command has following syntax:"
msgstr ""

#: ../source/reference/command/aggregate.txt:38
msgid ""
"The :dbcommand:`aggregate` command takes the following fields as arguments:"
msgstr ""

#: ../source/reference/command/aggregate.txt:49
msgid ""
"For more information about the aggregation pipeline :doc:`/core/aggregation-"
"pipeline`, :doc:`/reference/aggregation`, and :doc:`/core/aggregation-"
"pipeline-limits`."
msgstr ""

#: ../source/reference/command/aggregate.txt:54
msgid "Example"
msgstr ""

#: ../source/reference/command/aggregate.txt:57
msgid "Aggregate Data with Multi-Stage Pipeline"
msgstr ""

#: ../source/reference/command/aggregate.txt:59
msgid "A collection ``articles`` contains documents such as the following:"
msgstr ""

#: ../source/reference/command/aggregate.txt:70
msgid ""
"The following example performs an :dbcommand:`aggregate` operation on the "
"``articles`` collection to calculate the count of each distinct element in "
"the ``tags`` array that appears in the collection."
msgstr ""

#: ../source/reference/command/aggregate.txt:90
msgid ""
"In the :program:`mongo` shell, this operation can use the "
":method:`~db.collection.aggregate()` helper as in the following:"
msgstr ""

#: ../source/reference/command/aggregate.txt:107
msgid ""
"In 2.6 and later, the :method:`~db.collection.aggregate()` helper always "
"returns a cursor."
msgstr ""

#: ../source/includes/fact-agg-helper-exception.rst:1
msgid ""
"If an error occurs, the :method:`~db.collection.aggregate()` helper throws "
"an exception. In previous versions, the helper returned a document with the "
"error message and code, and ``ok`` status field not equal to ``1``, same as "
"the :dbcommand:`aggregate` command."
msgstr ""

#: ../source/reference/command/aggregate.txt:113
msgid "Return Information on the Aggregation Operation"
msgstr ""

#: ../source/reference/command/aggregate.txt:115
msgid ""
"The following aggregation operation sets the optional field ``explain`` to "
"``true`` to return information about the aggregation operation."
msgstr ""

#: ../source/reference/command/aggregate.txt:129
msgid ""
"The intended readers of the ``explain`` output document are humans, and not "
"machines, and the output format is subject to change between releases."
msgstr ""

#: ../source/reference/command/aggregate.txt:133
msgid ":method:`db.collection.aggregate()` method"
msgstr ""

#: ../source/reference/command/aggregate.txt:136
msgid "Aggregate Data using External Sort"
msgstr ""

#: ../source/reference/command/aggregate.txt:138
msgid ""
"Aggregation pipeline stages have :ref:`maximum memory use limit <agg-memory-"
"restrictions>`. To handle large datasets, set ``allowDiskUse`` option to "
"``true`` to enable writing data to temporary files, as in the following "
"example:"
msgstr ""

#: ../source/reference/command/aggregate.txt:155
#: ../source/reference/command/aggregate.txt:240
msgid ":method:`db.collection.aggregate()`"
msgstr ""

#: ../source/reference/command/aggregate.txt:159
msgid "Aggregate Command Returns a Cursor"
msgstr ""

#: ../source/reference/command/aggregate.txt:162
msgid ""
"Using the :dbcommand:`aggregate` command to return a cursor is a low-level "
"operation, intended for authors of drivers. Most users should use the "
":method:`db.collection.aggregate()` helper provided in the :program:`mongo` "
"shell or in their driver. In 2.6 and later, the "
":method:`~db.collection.aggregate()` helper always returns a cursor."
msgstr ""

#: ../source/reference/command/aggregate.txt:169
msgid ""
"The following command returns a document that contains results with which to"
" instantiate a cursor object."
msgstr ""

#: ../source/reference/command/aggregate.txt:184
msgid ""
"To specify an *initial* batch size, specify the ``batchSize`` in the "
"``cursor`` field, as in the following example:"
msgstr ""

#: ../source/reference/command/aggregate.txt:199
msgid ""
"The ``{batchSize: 0 }`` document specifies the size of the *initial* batch "
"size only. Specify subsequent batch sizes to :ref:`OP_GET_MORE <wire-op-get-"
"more>` operations as with other MongoDB cursors. A ``batchSize`` of ``0`` "
"means an empty first batch and is useful if you want to quickly get back a "
"cursor or failure message, without doing significant server-side work."
msgstr ""

#: ../source/reference/command/aggregate.txt:0
msgid "On this page"
msgstr ""

#: ../source/reference/command/aggregate.txt:207
msgid "Override Default Read Concern"
msgstr ""

#: ../source/reference/command/aggregate.txt:209
msgid ""
"To override the default read concern level of :readconcern:`\"local\"`, use "
"the ``readConcern`` option."
msgstr ""

#: ../source/reference/command/aggregate.txt:212
msgid ""
"The following operation on a replica set specifies a :doc:`read concern "
"</reference/read-concern>` of :readconcern:`\"majority\"` to read the most "
"recent copy of the data confirmed as having been written to a majority of "
"the nodes."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:1
msgid ""
"To use a :term:`read concern` level of :readconcern:`\"majority\"`, you must"
" use the WiredTiger storage engine and start the :program:`mongod` instances"
" with the :option:`--enableMajorityReadConcern` command line option (or the "
":setting:`replication.enableMajorityReadConcern` setting if using a "
"configuration file)."
msgstr ""

#: ../source/includes/fact-readConcern-majority-protocolVersion.rst:1
msgid ""
"Only replica sets using :rsconf:`protocol version 1 <protocolVersion>` "
"support :readconcern:`\"majority\"` read concern. Replica sets running "
"protocol version 0 do not support :readconcern:`\"majority\"` read concern."
msgstr ""

#: ../source/includes/fact-aggregate-readConcern.rst:1
msgid ""
"To use a :doc:`read concern </reference/read-concern>` level of "
":readconcern:`\"majority\"`, you cannot include the :pipeline:`$out` stage."
msgstr ""

#: ../source/includes/fact-readConcern-most-recent-data-in-node.rst:1
msgid ""
"Regardless of the :term:`read concern` level, the most recent data on a node"
" may not reflect the most recent version of the data in the system."
msgstr ""

#: ../source/includes/usage-read-concern-majority.rst:1
msgid ""
"To ensure that a single thread can read its own writes, use "
":readconcern:`\"majority\"` read concern and :writeconcern:`\"majority\"` "
"write concern against the primary of the replica set."
msgstr ""

#: ../source/reference/command/aggregate.txt:237
msgid ""
"The :dbcommand:`getMore` command uses the ``readConcern`` level specified in"
" the originating :dbcommand:`aggregate` command."
msgstr ""

#~ msgid ""
#~ "The :dbcommand:`aggregate` command adds support for returning a cursor, "
#~ "supports the ``explain`` option, and enhances its sort operations with an "
#~ "external sort facility."
#~ msgstr ""

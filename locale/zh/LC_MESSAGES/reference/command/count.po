#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/count.txt:3
msgid "count"
msgstr ""

#: ../source/reference/command/count.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/command/count.txt:34
msgid ":dbcommand:`count` has the following fields:"
msgstr ""

#: ../source/reference/command/count.txt:38
msgid ""
"MongoDB also provides the :method:`~cursor.count()` and "
":method:`db.collection.count()` wrapper methods in the :program:`mongo` "
"shell."
msgstr ""

#: ../source/reference/command/count.txt:43
msgid "Behavior"
msgstr ""

#: ../source/includes/extracts/fact-count-on-sharded-clusters-cmd-count.rst:1
msgid ""
"On a sharded cluster, :dbcommand:`count` can result in an *inaccurate* count"
" if :term:`orphaned documents <orphaned document>` exist or if a :doc:`chunk"
" migration </core/sharding-chunk-migration>` is in progress."
msgstr ""

#: ../source/includes/extracts/fact-count-on-sharded-clusters-cmd-count.rst:5
msgid ""
"To avoid these situations, on a sharded cluster, use the :pipeline:`$group` "
"stage of the :method:`db.collection.aggregate()` method to :group:`$sum` the"
" documents. For example, the following operation counts the documents in a "
"collection:"
msgstr ""

#: ../source/includes/extracts/fact-count-on-sharded-clusters-cmd-count.rst:18
msgid ""
"To get a count of documents that match a query condition, include the "
":pipeline:`$match` stage as well:"
msgstr ""

#: ../source/includes/extracts/fact-count-on-sharded-clusters-cmd-count.rst:30
msgid "See :ref:`match-perform-a-count` for an example."
msgstr ""

#: ../source/reference/command/count.txt:55
msgid "Examples"
msgstr ""

#: ../source/reference/command/count.txt:57
msgid ""
"The following sections provide examples of the :dbcommand:`count` command."
msgstr ""

#: ../source/reference/command/count.txt:61
msgid "Count All Documents"
msgstr ""

#: ../source/reference/command/count.txt:63
msgid ""
"The following operation counts the number of all documents in the ``orders``"
" collection:"
msgstr ""

#: ../source/reference/command/count.txt:70
msgid ""
"In the result, the ``n``, which represents the count, is ``26``, and the "
"command status ``ok`` is ``1``:"
msgstr ""

#: ../source/reference/command/count.txt:78
msgid "Count Documents That Match a Query"
msgstr ""

#: ../source/reference/command/count.txt:80
msgid ""
"The following operation returns a count of the documents in the ``orders`` "
"collection where the value of the ``ord_dt`` field is greater than "
"``Date('01/01/2012')``:"
msgstr ""

#: ../source/reference/command/count.txt:90
msgid ""
"In the result, the ``n``, which represents the count, is ``13`` and the "
"command status ``ok`` is ``1``:"
msgstr ""

#: ../source/reference/command/count.txt:98
msgid "Skip Documents in Count"
msgstr ""

#: ../source/reference/command/count.txt:100
msgid ""
"The following operation returns a count of the documents in the ``orders`` "
"collection where the value of the ``ord_dt`` field is greater than "
"``Date('01/01/2012')`` and skip the first ``10`` matching documents:"
msgstr ""

#: ../source/reference/command/count.txt:111
msgid ""
"In the result, the ``n``, which represents the count, is ``3`` and the "
"command status ``ok`` is ``1``:"
msgstr ""

#: ../source/reference/command/count.txt:119
msgid "Specify the Index to Use"
msgstr ""

#: ../source/reference/command/count.txt:121
msgid ""
"The following operation uses the index ``{ status: 1 }`` to return a count "
"of the documents in the ``orders`` collection where the value of the "
"``ord_dt`` field is greater than ``Date('01/01/2012')`` and the ``status`` "
"field is equal to ``\"D\"``:"
msgstr ""

#: ../source/reference/command/count.txt:139
msgid ""
"In the result, the ``n``, which represents the count, is ``1`` and the "
"command status ``ok`` is ``1``:"
msgstr ""

#: ../source/reference/command/count.txt:0
msgid "On this page"
msgstr ""

#: ../source/reference/command/count.txt:18
msgid ""
"Counts the number of documents in a collection. Returns a document that "
"contains this count and as well as the command status."
msgstr ""

#: ../source/reference/command/count.txt:21
msgid ":dbcommand:`count` has the following form:"
msgstr ""

#: ../source/reference/command/count.txt:47
msgid ""
"For MongoDB instances using the :doc:`WiredTiger </core/wiredtiger>` storage"
" engine, after an unclean shutdown, statistics on size and count may off by "
"up to 1000 documents as reported by :dbcommand:`collStats`, "
":dbcommand:`dbStats`, :dbcommand:`count`. To restore the correct statistics "
"for the collection, run :dbcommand:`validate` on the collection."
msgstr ""

#: ../source/reference/command/count.txt:147
msgid "Override Default Read Concern"
msgstr ""

#: ../source/reference/command/count.txt:149
msgid ""
"To override the default read concern level of :readconcern:`\"local\"`, use "
"the ``readConcern`` option."
msgstr ""

#: ../source/reference/command/count.txt:152
msgid ""
"The following operation on a replica set specifies a :doc:`/reference/read-"
"concern` of :readconcern:`\"majority\"` to read the most recent copy of the "
"data confirmed as having been written to a majority of the nodes."
msgstr ""

#: ../source/includes/fact-enable-majority-readConcern.rst:1
msgid ""
"To use a :term:`read concern` level of :readconcern:`\"majority\"`, you must"
" use the WiredTiger storage engine and start the :program:`mongod` instances"
" with the :option:`--enableMajorityReadConcern` command line option (or the "
":setting:`replication.enableMajorityReadConcern` setting if using a "
"configuration file)."
msgstr ""

#: ../source/includes/fact-readConcern-majority-protocolVersion.rst:1
msgid ""
"Only replica sets using :rsconf:`protocol version 1 <protocolVersion>` "
"support :readconcern:`\"majority\"` read concern. Replica sets running "
"protocol version 0 do not support :readconcern:`\"majority\"` read concern."
msgstr ""

#: ../source/reference/command/count.txt:161
msgid ""
"To use the ``readConcern`` level of ``\"majority\"``, you must specify a "
"nonempty ``query`` condition."
msgstr ""

#: ../source/includes/fact-readConcern-most-recent-data-in-node.rst:1
msgid ""
"Regardless of the :term:`read concern` level, the most recent data on a node"
" may not reflect the most recent version of the data in the system."
msgstr ""

#: ../source/includes/usage-read-concern-majority.rst:1
msgid ""
"To ensure that a single thread can read its own writes, use "
":readconcern:`\"majority\"` read concern and :writeconcern:`\"majority\"` "
"write concern against the primary of the replica set."
msgstr ""

#~ msgid ""
#~ "Counts the number of documents in a collection. Returns a document that "
#~ "contains this count and as well as the command status. :dbcommand:`count` "
#~ "has the following form:"
#~ msgstr ""

#~ msgid ""
#~ ":dbcommand:`count` now accepts the ``hint`` option to specify an index."
#~ msgstr ""

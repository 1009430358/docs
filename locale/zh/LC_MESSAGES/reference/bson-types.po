#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Yingmin zhou <csuyingminzhou@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

# 1f503185fb65421290ce078adc64d5cb
#: ../source/reference/bson-types.txt:5
msgid "BSON Types"
msgstr "BSON 类型"

# 64d70b879e2e44ae9772c92e62444ff1
#: ../source/reference/bson-types.txt
msgid "On this page"
msgstr ""

# 11ad3b93bc9e4e3cbd2d41f1729bc1d3
#: ../source/reference/bson-types.txt:15
msgid ""
":term:`BSON` is a binary serialization format used to store documents and"
" make remote procedure calls in MongoDB. The BSON specification is "
"located at `bsonspec.org <http://bsonspec.org/>`_."
msgstr ""

# 31035ee273ae497a9a169d76d394209d
#: ../source/reference/bson-types.txt:19
msgid ""
"BSON supports the following data types as values in documents. Each data "
"type has a corresponding number and string alias that can be used with "
"the :query:`$type` operator to query documents by BSON type."
msgstr ""

# fe09c0e08f7c42f3b92e2aa89f0827d9
#: ../source/includes/fact-bson-types.rst:4
msgid "Type"
msgstr ""

# ed4d827f3c914a42a0ca8741fb04758e
#: ../source/includes/fact-bson-types.rst:5
msgid "Number"
msgstr ""

# 1dd1922c88ba4a4e91f2fa20d4740e9c
#: ../source/includes/fact-bson-types.rst:6
msgid "Alias"
msgstr ""

# 21df9a1334fb4f2d82a1588ffee9353b
#: ../source/includes/fact-bson-types.rst:7
msgid "Notes"
msgstr ""

# 0c3acd50245747d39fc625383289a874
#: ../source/includes/fact-bson-types.rst:9
msgid "Double"
msgstr "Double"

# 2b16f7f2a72c4823b9cb15c3b70bf9f2
#: ../source/includes/fact-bson-types.rst:10
msgid "1"
msgstr "1"

# 5e54e0ad249d4732b02842acb5c1e4a1
#: ../source/includes/fact-bson-types.rst:11
msgid "\"double\""
msgstr ""

# 39ba0bfc35e947b887a685b3be6444bd
# c6c50eada2554c9aa7a3fe617df81f95
#: ../source/includes/fact-bson-types.rst:14
#: ../source/reference/bson-types.txt:65
msgid "String"
msgstr "字符串"

# a81549884e3e41f08199eb5d169aa18d
#: ../source/includes/fact-bson-types.rst:15
msgid "2"
msgstr "2"

# a1eecfa53c8643f1bf8e3d096b76ce1f
#: ../source/includes/fact-bson-types.rst:16
msgid "\"string\""
msgstr ""

# 3299b9f89b5249f88d4f7421df0f401a
#: ../source/includes/fact-bson-types.rst:19
msgid "Object"
msgstr "对象"

# 233fc3b117424e0696b63a25a65876db
#: ../source/includes/fact-bson-types.rst:20
msgid "3"
msgstr "3"

# 4fce9d513d4744b5bb10f3525da0197c
#: ../source/includes/fact-bson-types.rst:21
msgid "\"object\""
msgstr ""

# 8b3fb951f25342bc819f3e6af8e99bd9
#: ../source/includes/fact-bson-types.rst:24
msgid "Array"
msgstr "数组"

# 7b0428d7057945418238eaccc56b4d65
#: ../source/includes/fact-bson-types.rst:25
msgid "4"
msgstr "4"

# 5a464917478f465b8dbf4f3e1c8f3efd
#: ../source/includes/fact-bson-types.rst:26
msgid "\"array\""
msgstr ""

# 5ecc2bf53077474db82415ac7bec41ed
#: ../source/includes/fact-bson-types.rst:29
msgid "Binary data"
msgstr "二进制数据"

# ebd14dbb2119455b901a37166a681fcc
#: ../source/includes/fact-bson-types.rst:30
msgid "5"
msgstr "5"

# 53799b7ed0ae49479fd38000d6cb4ec2
#: ../source/includes/fact-bson-types.rst:31
msgid "\"binData\""
msgstr ""

# b2b695b2b85d4fb28e4290c7b029a31a
#: ../source/includes/fact-bson-types.rst:34
msgid "Undefined"
msgstr "未定义"

# 8fa100b050db48bbabf7489286d2752a
#: ../source/includes/fact-bson-types.rst:35
msgid "6"
msgstr "6"

# e6f2ad41cabf4b61ac8d4975d9cd4a73
#: ../source/includes/fact-bson-types.rst:36
msgid "\"undefined\""
msgstr ""

# 50ce96e610b8498199cac7bdda6e90da
# 8db6cd02d1bb4099815c9c297d617b32
# fccd5ccb266445c69b9a2bf3f99f0b7c
#: ../source/includes/fact-bson-types.rst:37
#: ../source/includes/fact-bson-types.rst:67
#: ../source/includes/fact-bson-types.rst:77
msgid "Deprecated."
msgstr "已过期。"

# 63a5e10731914ded87ccbddaf5aabed6
# 645b31d6d22d48098262aa6563a52c71
#: ../source/includes/fact-bson-types.rst:39
#: ../source/reference/bson-types.txt:37
msgid "ObjectId"
msgstr ""

# 7917eecfff424b60a366574b14ee1af8
#: ../source/includes/fact-bson-types.rst:40
msgid "7"
msgstr "7"

# 04910505547a4d0b853e69b3e3585f66
#: ../source/includes/fact-bson-types.rst:41
msgid "\"objectId\""
msgstr ""

# 82862ab6bb414e57bc35caae8217c5ec
#: ../source/includes/fact-bson-types.rst:44
msgid "Boolean"
msgstr "Boolean"

# 3870ed24be36410dbb8b63e52be02691
#: ../source/includes/fact-bson-types.rst:45
msgid "8"
msgstr "8"

# e28c3313115b4724a4a496ec49b20e4b
#: ../source/includes/fact-bson-types.rst:46
msgid "\"bool\""
msgstr ""

# ea5a055a7bcd4c4ca2e0dda9e3d3f775
# 902aac5cf1b543b2919748bd45898331
#: ../source/includes/fact-bson-types.rst:49
#: ../source/reference/bson-types.txt:137
msgid "Date"
msgstr "日期"

# f14c183925404279b5f465020461fb05
#: ../source/includes/fact-bson-types.rst:50
msgid "9"
msgstr "9"

# 2fa0708cb04245869769535be713b768
#: ../source/includes/fact-bson-types.rst:51
msgid "\"date\""
msgstr ""

# 6e259a5f975f41b791ed27f1e05c06fb
#: ../source/includes/fact-bson-types.rst:54
msgid "Null"
msgstr "空"

# 85690ae173154a3e8fb6dbcd08659114
#: ../source/includes/fact-bson-types.rst:55
msgid "10"
msgstr "10"

# 25284781d6914fb4a2b0f5d4e6f88153
#: ../source/includes/fact-bson-types.rst:56
msgid "\"null\""
msgstr ""

# 7fa85f69186f4b00aa9f47b2b0f8dcbd
#: ../source/includes/fact-bson-types.rst:59
msgid "Regular Expression"
msgstr "正则表达式"

# 68b2920145ce4fa5bb98fff4c493b992
#: ../source/includes/fact-bson-types.rst:60
msgid "11"
msgstr "11"

# b8805d03545c4d2b9d3b5163a4614b18
#: ../source/includes/fact-bson-types.rst:61
msgid "\"regex\""
msgstr ""

# 849bca99298d461f93a43e7547ec6eb5
#: ../source/includes/fact-bson-types.rst:64
msgid "DBPointer"
msgstr ""

# bcfddb52cf6b4e7b9c8354399c45329c
#: ../source/includes/fact-bson-types.rst:65
msgid "12"
msgstr ""

# 399a14313c6e4814bc7d9aa23e05ba56
#: ../source/includes/fact-bson-types.rst:66
msgid "\"dbPointer\""
msgstr ""

# f1d5665548204304930a8e2267ac9bee
#: ../source/includes/fact-bson-types.rst:69
msgid "JavaScript"
msgstr "JavaScript"

# 981d7ed339504018b2d729ca532dfe30
#: ../source/includes/fact-bson-types.rst:70
msgid "13"
msgstr "13"

# df1f567d80be4329845d73b149ebe346
#: ../source/includes/fact-bson-types.rst:71
msgid "\"javascript\""
msgstr ""

# 0832ce077ffe4ecab330f16318f6f1b3
#: ../source/includes/fact-bson-types.rst:74
msgid "Symbol"
msgstr "符号"

# c81d90b31f914db495da568f8ebd44db
#: ../source/includes/fact-bson-types.rst:75
msgid "14"
msgstr "14"

# abf9eeb7a99b41759c4d2c29ec5e66bb
#: ../source/includes/fact-bson-types.rst:76
msgid "\"symbol\""
msgstr ""

# b72e4d2aa6234ceaa4f1672608c455a0
#: ../source/includes/fact-bson-types.rst:79
msgid "JavaScript (with scope)"
msgstr "JavaScript （带范围）"

# 839f55ac301141c98b38914a2cd36ba9
#: ../source/includes/fact-bson-types.rst:80
msgid "15"
msgstr "15"

# 9fe642882f6242adaa0d601009d117d7
#: ../source/includes/fact-bson-types.rst:81
msgid "\"javascriptWithScope\""
msgstr ""

# c6d84633b62645e3b58c326584f25394
#: ../source/includes/fact-bson-types.rst:84
msgid "32-bit integer"
msgstr "32位整数"

# 247952049740487fb1e1810545659fc0
#: ../source/includes/fact-bson-types.rst:85
msgid "16"
msgstr "16"

# ddc88376c7b744b39ee0389074a002f1
#: ../source/includes/fact-bson-types.rst:86
msgid "\"int\""
msgstr ""

# 1dcb481acdc94821ab3b571b16218ddb
#: ../source/includes/fact-bson-types.rst:89
msgid "Timestamp"
msgstr "时间戳"

# 9a56e0bb4d56452e914131f37a874f92
#: ../source/includes/fact-bson-types.rst:90
msgid "17"
msgstr "17"

# 12ac2115befd430b823453448c19fafb
#: ../source/includes/fact-bson-types.rst:91
msgid "\"timestamp\""
msgstr ""

# 4b43c5b19a544816a95c64a7f9faa357
#: ../source/includes/fact-bson-types.rst:94
msgid "64-bit integer"
msgstr "64位整数"

# 165d46ef432340178f6a291fb5ccbcd7
#: ../source/includes/fact-bson-types.rst:95
msgid "18"
msgstr "18"

# d530f144fcb64858b0770ab600a0f492
#: ../source/includes/fact-bson-types.rst:96
msgid "\"long\""
msgstr ""

# 1e8bc1bae78244c99184055356801e65
#: ../source/includes/fact-bson-types.rst:99
msgid "Decimal128"
msgstr ""

# 0cf15a94bea640739b853b90c169556d
#: ../source/includes/fact-bson-types.rst:100
msgid "19"
msgstr ""

# 3a68529abd5846a68b6ab001776977cf
#: ../source/includes/fact-bson-types.rst:101
msgid "\"decimal\""
msgstr ""

# 6c25311b92714d7eb4354ab15e08d94f
#: ../source/includes/fact-bson-types.rst:102
msgid "New in version 3.4."
msgstr ""

# 6c69a01794584c23bc824b0d039b2a59
#: ../source/includes/fact-bson-types.rst:104
msgid "Min key"
msgstr ""

# 658864fcd4784932aa971d200989c20d
#: ../source/includes/fact-bson-types.rst:105
msgid "-1"
msgstr ""

# 96943e83d0634c9284e8629a5ba7b6be
#: ../source/includes/fact-bson-types.rst:106
msgid "\"minKey\""
msgstr ""

# 28cbe0bb269b40d0b354a84aa52c0449
#: ../source/includes/fact-bson-types.rst:109
msgid "Max key"
msgstr ""

# c82928835cb74d5d87b0dfa2a5f3f8a0
#: ../source/includes/fact-bson-types.rst:110
msgid "127"
msgstr ""

# a02573faca0b4064a36a5cdd9aef6418
#: ../source/includes/fact-bson-types.rst:111
msgid "\"maxKey\""
msgstr ""
"在比较不同  :term:`BSON` 类型的值时，MongoDB使用下面的比较顺序（从低到高）： "

# 29401978554e43cca4bed253d3ff91d8
#: ../source/reference/bson-types.txt:25
msgid "To determine a field's type, see :ref:`check-types-in-shell`."
msgstr ""

# 4a73e3e7508647c5b72e50e380bf7981
#: ../source/reference/bson-types.txt:27
msgid ""
"If you convert BSON to JSON, see the :doc:`Extended JSON </reference"
"/mongodb-extended-json>` reference."
msgstr ""

# 11b9193dcb874e4fa7247f4fb313e845
#: ../source/reference/bson-types.txt:30
msgid ""
"The following sections describe special considerations for particular "
"BSON types."
msgstr ""

# 53d27d9a719d4948b3bdd8f6237ed070
#: ../source/reference/bson-types.txt:39
msgid ""
"ObjectIds are small, likely unique, fast to generate, and ordered. "
"ObjectId values consists of 12-bytes, where the first four bytes are a "
"timestamp that reflect the ObjectId's creation, specifically:"
msgstr ""

# 8c91f5460da04169a16c47b9371d0b56
#: ../source/includes/fact-ObjectId-construct.rst:1
msgid "a 4-byte value representing the seconds since the Unix epoch,"
msgstr ""

# 25e7f0de19fd4bb5b193a3d04bad4842
#: ../source/includes/fact-ObjectId-construct.rst:3
msgid "a 3-byte machine identifier,"
msgstr ""

# 6f0bc5863c354e92bfcc09ce3228468e
#: ../source/includes/fact-ObjectId-construct.rst:5
msgid "a 2-byte process id, and"
msgstr ""
"MongoDB 在比较的过程中，把一些类型看成相等，例如，数值类型会在比较之前进行转化。"

# 68ae476d015947c6b4b67927d6c2c2bd
#: ../source/includes/fact-ObjectId-construct.rst:7
msgid "a 3-byte counter, starting with a random value."
msgstr ""
"日期对象排在时间戳对象之前。之前数据集时间戳对象一起进行排序。"

# 431ec24fd7d94aac9a53365dcafb82bf
#: ../source/includes/fact-id-field.rst:1
msgid ""
"In MongoDB, each document stored in a collection requires a unique "
":term:`_id` field that acts as a :term:`primary key`. If an inserted "
"document omits the ``_id`` field, the MongoDB driver automatically "
"generates an :ref:`objectid` for the ``_id`` field."
msgstr ""
"MongoDB将会把不存在的字段当做一个空的BSON对象。"
"这样的话，对文档  ``{ }`` 和 ``{ a: null }`` 在 ``a`` 字段上进行排序，在排序顺序上将会看做相等。"

# eac9dbcd60954544a451c19632c52b3d
#: ../source/includes/fact-id-field.rst:6
msgid ""
"This also applies to documents inserted through update operations with "
":ref:`upsert: true <upsert-parameter>`."
msgstr ""
"在数组中，小于比较或者升序排列会比较数组中最小的元素，大于比较或者降序排列会比较数组中最大的元素。"
"因此，在比较一个字段值为单元素数组（例如， ``[ 1 ]`` ）与一个非数组字段（例如， ``2`` ）时，"
"比较的是 ``1`` 和 ``2`` 。一个空数组（例如， ``[ ]``）的比较会将空数组处理为小于 ``null`` 或缺失字段。"

# 877f4889c72d4a9fa02b29b59d8ba537
#: ../source/reference/bson-types.txt:47
msgid ""
"MongoDB clients should add an ``_id`` field with a unique ObjectId. Using"
" ObjectIds for the ``_id`` field provides the following additional "
"benefits:"
msgstr ""

# 65fdab7f927443f08c8bb7b92b65ecf1
#: ../source/reference/bson-types.txt:51
msgid ""
"in the :program:`mongo` shell, you can access the creation time of the "
"``ObjectId``, using the :method:`ObjectId.getTimestamp()` method."
msgstr ""

# e7b61f53282744bb925b6e46355b90f3
#: ../source/reference/bson-types.txt:54
msgid ""
"sorting on an ``_id`` field that stores ``ObjectId`` values is roughly "
"equivalent to sorting by creation time."
msgstr ""

# aa40a9d2c5c6429e993db92d86f50606
#: ../source/includes/fact-ObjectId-timestamp-order.rst:1
msgid ""
"The relationship between the order of ``ObjectId`` values and generation "
"time is not strict within a single second. If multiple systems, or "
"multiple processes or threads on a single system generate values, within "
"a single second; ``ObjectId`` values do not represent a strict insertion "
"order. Clock skew between clients can also result in non-strict ordering "
"even for values because client drivers generate ``ObjectId`` values."
msgstr ""

# ff0503fe35184fa18e3204f3506625c0
#: ../source/reference/bson-types.txt:60
msgid ":method:`ObjectId()`"
msgstr ""
"下面的部分描述了对特定BSON类型的特殊考量。"

# 40519c58fddf48c28a34220f598168ee
#: ../source/reference/bson-types.txt:67
msgid ""
"BSON strings are UTF-8. In general, drivers for each programming language"
" convert from the language's string format to UTF-8 when serializing and "
"deserializing BSON. This makes it possible to store most international "
"characters in BSON strings with ease. [#sort-string-"
"internationalization]_ In addition, MongoDB :query:`$regex` queries "
"support UTF-8 in the regex string."
msgstr ""
"BSON字符串都是UTF-8编码。一般说来，每种编程语言的驱动程序在序列化和反序列化BSON的时候，"
"都会从语言的字符串形式转化为UTF-8。这就使得使用BSON字符串简单存储大多数国际字符变为可能。"
" [#sort-string-internationalization]_ 此外，MongoDB :query:`$regex` 查询支持正则字符串中使用UTF-8。"

# 47a1c50cc4934771b8fcef97e72819a7
#: ../source/reference/bson-types.txt:74
msgid ""
"Given strings using UTF-8 character sets, using :method:`sort() "
"<cursor.sort()>` on strings will be reasonably correct. However, because "
"internally :method:`sort() <cursor.sort()>` uses the C++ ``strcmp`` api, "
"the sort order may handle some characters incorrectly."
msgstr ""
"对于使用UTF-8字符集的字符串，在字符串上使用 :method:`sort() "
"<cursor.sort()>` 理论上来说都是正确的。然而，由于内部的"
" :method:`sort() <cursor.sort()>` 方法使用的是 C++的 ``strcmp`` api，排序时可能出错误处理某些字符串。"


# 4ade5d1e70704f6d99a771bf00d8f09c
#: ../source/reference/bson-types.txt:83
msgid "Timestamps"
msgstr "时间戳"

# 655cefc038b84f3a9b67afedfe1c618c
#: ../source/reference/bson-types.txt:85
msgid ""
"BSON has a special timestamp type for *internal* MongoDB use and is "
"**not** associated with the regular :ref:`document-bson-type-date` type. "
"Timestamp values are a 64 bit value where:"
msgstr ""
"BSON有一个特殊的时间戳类型用于 MongoDB *内部* 使用，与普通的"
"  :ref:`document-bson-type-date` 类型不相关。 时间戳值是一个64位的值。其中："

# 29b92a2150c54b30ac92fef7412c98c7
#: ../source/reference/bson-types.txt:89
msgid "the first 32 bits are a ``time_t`` value (seconds since the Unix epoch)"
msgstr ""
"前32位是一个 ``time_t`` 值（与Unix新纪元相差的秒数）"

# 82ff4543af664f0fb807a670c7b08975
#: ../source/reference/bson-types.txt:91
msgid ""
"the second 32 bits are an incrementing ``ordinal`` for operations within "
"a given second."
msgstr ""
"后32位是在某秒中操作的一个递增的``序数``。 "

# 3035b24387674443940866dfc734ab89
#: ../source/reference/bson-types.txt:94
msgid ""
"Within a single :program:`mongod` instance, timestamp values are always "
"unique."
msgstr ""
"在单个  :program:`mongod`  实例中，时间戳值通常是唯一的。 "

# 38d6d2d1dc2e475cbd49792a529d6331
#: ../source/reference/bson-types.txt:97
msgid ""
"In replication, the :term:`oplog` has a ``ts`` field. The values in this "
"field reflect the operation time, which uses a BSON timestamp value."
msgstr ""
"在复制集中，  :term:`oplog`  有一个 ``ts`` 字段。这个字段中的值使用BSON时间戳表示了操作时间。"

# e976eb65fb284e54b721c92533ef970f
#: ../source/reference/bson-types.txt:103
msgid ""
"The BSON timestamp type is for *internal* MongoDB use. For most cases, in"
" application development, you will want to use the BSON date type. See "
":ref:`document-bson-type-date` for more information."
msgstr ""
"BSON时间戳类型主要用于 MongoDB*内部* 使用 。在大多数情况下的应用开发中，你可以使用BSON日期类型。查阅 :ref"
":`document-bson-type-date` 了解更多信息。 "

# e0ff9392067846d8bb23b180ba5935b3
#: ../source/reference/bson-types.txt:108
msgid ""
"If you insert a document containing an empty BSON timestamp in a top-"
"level field, the MongoDB server will replace that empty timestamp with "
"the current timestamp value. For example, if you create an insert a "
"document with a timestamp value, as in the following operation:"
msgstr ""
"如果你插入一个在一级字段中包含空BSON时间戳的文档，MongoDB服务器将会使用当前的时间戳值替换空的时间戳。"
"例如，如果你使用下面的操作插入一个包含时间戳值的文档："

# 689b132f9bc243c0a3ac25db13edb03a
#: ../source/reference/bson-types.txt:119
msgid ""
"Then, the :method:`db.test.find() <db.collection.find()>` operation will "
"return a document that resembles the following:"
msgstr ""
"然后， :method:`db.test.find() <db.collection.find()>`  操作将会返回一个类似于下面的文档："

# ec6354d5e8454405b3379c16a093bb8b
#: ../source/reference/bson-types.txt:126
msgid ""
"If ``ts`` were a field in an embedded document, the server would have "
"left it as an empty timestamp value."
msgstr ""
"如果 ``ts`` 是一个嵌入文档中的字段，服务器将会继续让其保持空的时间戳值。"

# 2b908c23033c46868becaccaaf624e93
#: ../source/reference/bson-types.txt:129
msgid ""
"Previously, the server would only replace empty timestamp values in the "
"first two fields, including ``_id``, of an inserted document. Now MongoDB"
" will replace any top-level field."
msgstr ""
"之前，服务器只会替换插入文档内前两个字段中（包括``_id``）的空时间戳值。"
"现在，MongoDB将会对任何一级字段中的空时间戳进行替换。"

# 09bb05b237a04e2cab5ca1ffcae93f00
#: ../source/reference/bson-types.txt:139
msgid ""
"BSON Date is a 64-bit integer that represents the number of milliseconds "
"since the Unix epoch (Jan 1, 1970). This results in a representable date "
"range of about 290 million years into the past and future."
msgstr ""
"BSON日期是一个64位整数，表示当前距离Unix新纪元（1970年1月1日）的毫秒数。"
"这样就保证了过去和未来2.9亿年的可表示日期范围。"

# 8782d442409b49d88a7e83f60d38a51d
#: ../source/reference/bson-types.txt:144
msgid ""
"The `official BSON specification <http://bsonspec.org/#/specification>`_ "
"refers to the BSON Date type as the *UTC datetime*."
msgstr ""
"正式的BSON说明 <http://bsonspec.org/#/specification>`_  "
"将BSON日期类型成为 *UTC 时间*。"

# aaa7c3fafcc64e88bbfa603c8ca24a75
#: ../source/reference/bson-types.txt:147
msgid ""
"BSON Date type is signed. [#unsigned-date]_ Negative values represent "
"dates before 1970."
msgstr ""
"BSON日期类型是有符号的。 [#unsigned-date]_  负数表示1970年之前的日期。"

# 39d1539e3d55402591e0c85d9cf6088a
# f5253da179054f2eb2d3048592d6ccae
# 1e3a8024caf444fb896b57c33c34230c
# 63f3e91e4fb749d98a6b557af023b5e6
#: ../source/reference/bson-types.txt
msgid "Example"
msgstr "示例"

# c1d2c29e884c4c65a6d12378f092d766
#: ../source/reference/bson-types.txt:177
msgid ""
"Prior to version 2.0, ``Date`` values were incorrectly interpreted as "
"*unsigned* integers, which affected sorts, range queries, and indexes on "
"``Date`` fields. Because indexes are not recreated when upgrading, please"
" re-index if you created an index on ``Date`` values with an earlier "
"version, and dates before 1970 are relevant to your application."
msgstr ""
"在2.0版本之前， ``日期`` 值被错误地表示为 *无符号整数*，"
"大大地影响了 ``日期`` 字段上的排序、范围查询以及索引。"
"由于在升级过程中不会重建索引，所以如果您是在早期版本中在 ``日期`` 字段上创建的索引，"
"请对与应用相关的、1970年前的日期进行重新索引。"

#~ msgid ""
#~ msgstr ""

#~ msgid "**Type**"
#~ msgstr ""

#~ msgid "**Number**"
#~ msgstr ""

#~ msgid "**Notes**"
#~ msgstr ""

#~ msgid "Object id"
#~ msgstr ""

#~ msgid "255"
#~ msgstr ""

#~ msgid "Query with ``-1``."
#~ msgstr ""

#~ msgid "Comparison/Sort Order"
#~ msgstr ""

#~ msgid ""
#~ "When comparing values of different "
#~ ":term:`BSON` types, MongoDB uses the "
#~ "following comparison order, from lowest "
#~ "to highest:"
#~ msgstr ""

#~ msgid "MinKey (internal type)"
#~ msgstr ""

#~ msgid "Numbers (ints, longs, doubles)"
#~ msgstr ""

#~ msgid "Symbol, String"
#~ msgstr ""

#~ msgid "BinData"
#~ msgstr ""

#~ msgid "MaxKey (internal type)"
#~ msgstr ""

#~ msgid ""
#~ "MongoDB treats some types as equivalent"
#~ " for comparison purposes. For instance, "
#~ "numeric types undergo conversion before "
#~ "comparison."
#~ msgstr ""

#~ msgid ""
#~ "Date objects sort before Timestamp "
#~ "objects. Previously Date and Timestamp "
#~ "objects sorted together."
#~ msgstr ""

#~ msgid ""
#~ "The comparison treats a non-existent "
#~ "field as it would an empty BSON"
#~ " Object. As such, a sort on the"
#~ " ``a`` field in documents ``{ }`` "
#~ "and ``{ a: null }`` would treat"
#~ " the documents as equivalent in sort"
#~ " order."
#~ msgstr ""

#~ msgid ""
#~ "With arrays, a less-than comparison "
#~ "or an ascending sort compares the "
#~ "smallest element of arrays, and a "
#~ "greater-than comparison or a descending "
#~ "sort compares the largest element of "
#~ "the arrays. As such, when comparing "
#~ "a field whose value is a "
#~ "single-element array (e.g. ``[ 1 ]``)"
#~ " with non-array fields (e.g. ``2``),"
#~ " the comparison is between ``1`` and"
#~ " ``2``. A comparison of an empty "
#~ "array (e.g. ``[ ]``) treats the "
#~ "empty array as less than ``null`` "
#~ "or a missing field."
#~ msgstr ""

#~ msgid "MongoDB sorts ``BinData`` in the following order:"
#~ msgstr ""

#~ msgid "First, the length or size of the data."
#~ msgstr ""

#~ msgid "Then, by the BSON one-byte subtype."
#~ msgstr ""

#~ msgid "Finally, by the data, performing a byte-by-byte comparison."
#~ msgstr ""

#~ msgid ""
#~ "In MongoDB, documents stored in a "
#~ "collection require a unique :term:`_id` "
#~ "field that acts as a :term:`primary "
#~ "key`. If the ``_id`` field is "
#~ "unspecified in the documents, MongoDB "
#~ "uses :ref:`ObjectIds <objectid>` as the "
#~ "default value for the ``_id`` field; "
#~ "i.e. if a document does not "
#~ "contain a top-level ``_id`` field "
#~ "during an insert, the MongoDB driver "
#~ "adds the ``_id`` field that holds "
#~ "an :ref:`objectid`."
#~ msgstr ""

#~ msgid ""
#~ "In addition, if the :program:`mongod` "
#~ "receives a document to insert that "
#~ "does not contain an ``_id`` field "
#~ "(e.g. through an update operation with"
#~ " an :ref:`upsert option <upsert-"
#~ "parameter>`) :program:`mongod` will add the"
#~ " ``_id`` field that holds an "
#~ "ObjectId."
#~ msgstr ""


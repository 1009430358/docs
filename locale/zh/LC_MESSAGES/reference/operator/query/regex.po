#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:14
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/regex.txt:22
msgid "To use :query:`$regex`, use one of the following syntax:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:30
msgid ""
"In MongoDB, you can also use regular expression objects (i.e. ``/pattern/``)"
" to specify regular expressions:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:37
msgid ""
"For restrictions on particular syntax use, see :ref:`syntax-restrictions`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:42
msgid ""
"The following ``<options>`` are available for use with regular expression."
msgstr ""

#: ../source/reference/operator/query/regex.txt:49
msgid "Option"
msgstr ""

#: ../source/reference/operator/query/regex.txt:50
msgid "Description"
msgstr ""

#: ../source/reference/operator/query/regex.txt:51
msgid "Syntax Restrictions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:53
msgid "``i``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:54
msgid ""
"Case insensitivity to match upper and lower cases. For an example, see :ref"
":`regex-case-insensitive`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:58
msgid "``m``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
msgid ""
"For patterns that include anchors (i.e. ``^`` for the start, ``$`` for the "
"end), match at the beginning or end of each line for strings with multiline "
"values. Without this option, these anchors match at beginning or end of the "
"string. For an example, see :ref:`regex-multiline-match`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:66
msgid ""
"If the pattern contains no anchors or if the string value has no newline "
"characters (e.g. ``\\n``), the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
msgid "``x``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:74
msgid ""
"\"Extended\" capability to ignore all white space characters in the "
":query:`$regex` pattern unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:78
msgid ""
"Additionally, it ignores characters in-between and including an un-escaped "
"hash/pound (``#``) character and the next new line, so that you may include "
"comments in complicated patterns. This only applies to data characters; "
"white space characters may never appear within special character sequences "
"in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:85
msgid ""
"The ``x`` option does not affect the handling of the VT character (i.e. code"
" 11)."
msgstr ""

#: ../source/reference/operator/query/regex.txt:88
#: ../source/reference/operator/query/regex.txt:96
msgid "Requires ``$regex`` with ``$options`` syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:90
msgid "``s``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:92
msgid ""
"Allows the dot character (i.e. ``.``) to match all characters *including* "
"newline characters. For an example, see :ref:`regex-dot-new-line`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:99
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/regex.txt:104
msgid "$regex vs. /pattern/ Syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:107
msgid "``$in`` Expressions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:109
msgid ""
"To include a regular expression in an ``$in`` query expression, you can only"
" use JavaScript regular expression objects (i.e. ``/pattern/`` ). For "
"example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:117
msgid ""
"You *cannot* use :query:`$regex` operator expressions inside an "
":query:`$in`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:121
msgid "Implicit ``AND`` Conditions for the Field"
msgstr ""

#: ../source/reference/operator/query/regex.txt:123
msgid ""
"To include a regular expression in a comma-separated list of query "
"conditions for the field, use the :query:`$regex` operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:133
msgid "``x`` and ``s`` Options"
msgstr ""

#: ../source/reference/operator/query/regex.txt:135
msgid ""
"To use either the ``x`` option or ``s`` options, you must use the "
":query:`$regex` operator expression *with* the :query:`$options` operator. "
"For example, to specify the ``i`` and the ``s`` options, you must use "
":query:`$options` for both:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:146
msgid "PCRE vs JavaScript"
msgstr ""

#: ../source/reference/operator/query/regex.txt:148
msgid ""
"To use PCRE supported features in the regex pattern that are unsupported in "
"JavaScript, you must use the :query:`$regex` operator expression with the "
"pattern as a string. For example, to use ``(?i)`` in the pattern to turn "
"case-insensitivity on for the remaining pattern and ``(?-i)`` to turn case-"
"sensitivity on for the remaining pattern, you must use the :query:`$regex` "
"operator with the pattern as a string:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:162
msgid "Index Use"
msgstr ""

#: ../source/reference/operator/query/regex.txt:175
msgid ""
"A regular expression is a \"prefix expression\" if it starts with a caret "
"(``^``) or a left anchor (``\\A``), followed by a string of simple symbols. "
"For example, the regex ``/^abc.*/`` will be optimized by matching only "
"against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:180
msgid ""
"Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent "
"strings, they have different performance characteristics. All of these "
"expressions use an index if an appropriate index exists; however, "
"``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after "
"matching the prefix."
msgstr ""

#: ../source/reference/operator/query/regex.txt:190
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/regex.txt:192
msgid ""
"The following examples use a collection ``products`` with the following "
"documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:205
msgid "Perform Case-Insensitive Regular Expression Match"
msgstr ""

#: ../source/reference/operator/query/regex.txt:207
msgid ""
"The following example uses the ``i`` option perform a *case-insensitive* "
"match for documents with ``sku`` value that starts with ``ABC``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:215
#: ../source/reference/operator/query/regex.txt:234
#: ../source/reference/operator/query/regex.txt:274
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:225
msgid "Multiline Match for Lines Starting with Specified Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:227
msgid ""
"The following example uses the ``m`` option to match lines starting with the"
" letter ``S`` for multiline strings:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:241
msgid ""
"Without the ``m`` option, the query would match just the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:247
msgid ""
"If the :query:`$regex` pattern does not contain an anchor, the pattern "
"matches against the string as a whole, as in the following example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:254
msgid "Then, the :query:`$regex` would match both documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:264
msgid "Use the ``.`` Dot Character to Match New Line"
msgstr ""

#: ../source/reference/operator/query/regex.txt:266
msgid ""
"The following example uses the ``s`` option to allow the  dot character "
"(i.e. ``.``) to match all characters *including* new line as well as the "
"``i`` option to perform a case-insensitive match:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:281
msgid ""
"*Without* the ``s`` option, the query would have matched only the following "
"document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:290
msgid "Ignore White Spaces in Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:292
msgid ""
"The following example uses the ``x`` option ignore white spaces and the "
"comments, denoted by the ``#`` and ending with the ``\\n`` in the matching "
"pattern:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:301
msgid "The query matches the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:0
msgid "On this page"
msgstr ""

#: ../source/reference/operator/query/regex.txt:18
msgid ""
"Provides regular expression capabilities for pattern matching *strings* in "
"queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE\" ) "
"version 8.38 with UTF-8 support."
msgstr ""

#: ../source/reference/operator/query/regex.txt:166
msgid ""
"For case sensitive regular expression queries, if an index exists for the "
"field, then MongoDB matches the regular expression against the values in the"
" index, which can be faster than a collection scan. Further optimization can"
" occur if the regular expression is a \"prefix expression\", which means "
"that all potential matches start with the same string. This allows MongoDB "
"to construct a \"range\" from that prefix and only match against those "
"values from the index that fall within that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:186
msgid ""
"For case insensitive regular expression queries, these queries generally "
"cannot use indexes effectively."
msgstr ""

#~ msgid ""
#~ "Provides regular expression capabilities for pattern matching *strings* in "
#~ "queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE\" ) "
#~ "version 8.36 with UTF-8 support."
#~ msgstr ""

#~ msgid ""
#~ "If an index exists for the field, then MongoDB matches the regular "
#~ "expression against the values in the index, which can be faster than a "
#~ "collection scan. Further optimization can occur if the regular expression is"
#~ " a \"prefix expression\", which means that all potential matches start with "
#~ "the same string. This allows MongoDB to construct a \"range\" from that "
#~ "prefix and only match against those values from the index that fall within "
#~ "that range."
#~ msgstr ""

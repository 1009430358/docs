# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/mongo.txt:3
# 0b54b03ff7b74466b1c9efeb8e669975
msgid "The ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:0
# 4bebc227ac7a4d74bc9096df71bc1162
msgid "On this page"
msgstr ""

#: ../source/mongo.txt:14
# f0c47bfa056a4994a412e4c94c847367
msgid "Introduction"
msgstr ""

#: ../source/mongo.txt:16
# 2ed5a0cb0c0443078cc167e2c62a32a7
msgid "The :program:`mongo` shell is an interactive JavaScript interface to MongoDB. You can use the :program:`mongo` shell to query and update data as well as perform administrative operations."
msgstr ""

#: ../source/mongo.txt:20
# 6544e24d2596413f9bb1ae7f3fbdeee3
msgid "The :program:`mongo` shell is a component of the `MongoDB distributions <http://www.mongodb.org/downloads>`_. Once you have :doc:`installed and have started MongoDB </installation>`, connect the :program:`mongo` shell to your running MongoDB instance."
msgstr ""

#: ../source/mongo.txt:25
# 3e7ccb42f9f6443da720788f561f4e21
msgid "Most examples in the :doc:`MongoDB Manual </index>` use the :program:`mongo` shell; however, many :doc:`drivers </applications/drivers>` provide similar interfaces to MongoDB."
msgstr ""

#: ../source/mongo.txt:30
# f8eb7d25aa47476f9ecdaabc6782431d
msgid "Start the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:33
# f53298333e1b4ac198442b0c598730a1
msgid "Ensure that MongoDB is running before attempting to start the :program:`mongo` shell."
msgstr ""

#: ../source/mongo.txt:36
# 9c80761eda994bfbb3f2ad7d93ae3b65
msgid "To start the :program:`mongo` shell and connect to your :doc:`MongoDB </reference/program/mongod>` instance running on **localhost** with **default port**:"
msgstr ""

#: ../source/mongo.txt:40
# 4a05d1537c0946ce98b05d34bf011fe1
msgid "At a prompt in a terminal window (or a command prompt for Windows), go to your ``<mongodb installation dir>``:"
msgstr ""

#: ../source/mongo.txt:47
# 6b7df633792146d084f1a451ec4db58b
msgid "Type ``./bin/mongo`` to start :program:`mongo`:"
msgstr ""

#: ../source/mongo.txt:53
# 02ee76b982934f4783830ce5f1e551af
msgid "If you have added the ``<mongodb installation dir>/bin`` to the ``PATH`` environment variable, you can just type ``mongo`` instead of ``./bin/mongo``."
msgstr ""

#: ../source/mongo.txt:58
# 71f5adda91ad4e68aaa933873a7d0efb
msgid "Options"
msgstr ""

#: ../source/mongo.txt:60
# 9f0bd73943724a1689a584321dd9a043
msgid "When you run :program:`mongo` without any arguments, the :program:`mongo` shell will attempt to connect to the MongoDB instance running on the ``localhost`` interface on port ``27017``. To specify a different host or port number, as well as other options, see :ref:`examples of starting up mongo <mongo-usage-examples>` and :doc:`mongo reference </reference/program/mongo>` which provides details on the available options."
msgstr ""

#: ../source/mongo.txt:69
# 7ba39831351e4ea49a6b58039bba6ae3
msgid "``.mongorc.js`` File"
msgstr ""

#: ../source/mongo.txt:71
# 285d54e9cd1748cdb652160679f615f4
msgid "When starting, :program:`mongo` checks the user's :envvar:`HOME` directory for a JavaScript file named :ref:`.mongorc.js <mongo-mongorc-file>`. If found, :program:`mongo` interprets the content of :file:`.mongorc.js` before displaying the prompt for the first time. If you use the shell to evaluate a JavaScript file or expression, either by using the :option:`--eval <mongo --eval>` option on the command line or by specifying :ref:`a .js file to mongo <mongo-shell-file>`, :program:`mongo` will read the ``.mongorc.js`` file *after* the JavaScript has finished processing. You can prevent ``.mongorc.js`` from being loaded by using the :option:`--norc` option."
msgstr ""

#: ../source/mongo.txt:86
# b89b4efbab5d4729942f2caaf55da93e
msgid "Working with the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:88
# 0ea10a87f220488a8eda44bc7007e8fe
msgid "To display the database you are using, type ``db``:"
msgstr ""

#: ../source/mongo.txt:94
# a10c3c6933334645b885d409963f2ff1
msgid "The operation should return ``test``, which is the default database. To switch databases, issue the ``use <db>`` helper, as in the following example:"
msgstr ""

#: ../source/mongo.txt:102
# cc50162e48b045a2aadef211ba281b54
msgid "To list the available databases, use the helper ``show dbs``. See also :method:`db.getSiblingDB()` method to access a different database from the current database without switching your current database context (i.e. ``db``)."
msgstr ""

#: ../source/mongo.txt:107
# 370c18d1090d4f7f81dedc7d71cb4b0a
msgid "You can switch to non-existing databases. When you first store data in the database, such as by creating a collection, MongoDB creates the database. For example, the following creates both the database ``myNewDatabase`` and the :term:`collection` ``myCollection`` during the :method:`~db.collection.insert()` operation:"
msgstr ""

#: ../source/mongo.txt:118
# 86aa52025b274acd8e7cba76c5211b2b
msgid "The :method:`db.myCollection.insert() <db.collection.insert()>` is one of the :doc:`methods available in the mongo shell </reference/method>`"
msgstr ""

#: ../source/mongo.txt:121
# c2ec77095b8542f9bcbd1d3d5d7e638a
msgid "``db`` refers to the current database."
msgstr ""

#: ../source/mongo.txt:123
# 2dcad3aadc6949b1a2560945bfea85f8
msgid "``myCollection`` is the name of the collection."
msgstr ""

#: ../source/mongo.txt:125
# fad97f7434ba42e0a327af2de33589ec
msgid "If the :program:`mongo` shell does not accept the name of the collection, for instance if the name contains a space, hyphen, or starts with a number, you can use an alternate syntax to refer to the collection, as in the following:"
msgstr ""

#: ../source/mongo.txt:136
# 9724630980324a0a8aa467c0997a485f
msgid "For more documentation of basic MongoDB operations in the :program:`mongo` shell, see:"
msgstr ""

#: ../source/mongo.txt:139
#: ../source/mongo.txt:240
# bf6ba34a83f34095a6eb08cf94f00a0f
# eb1257db51a046dfba98ac61d78d4491
msgid ":gettingstarted:`Getting Started Guide </shell>`"
msgstr ""

#: ../source/mongo.txt:140
# d55b90c75d794812921d764f27c99ca0
msgid ":doc:`/tutorial/insert-documents`"
msgstr ""

#: ../source/mongo.txt:141
# 92b7bae8de9d4101a5d9394477600536
msgid ":doc:`/tutorial/query-documents`"
msgstr ""

#: ../source/mongo.txt:142
# 5610b0ecb4284a638f8861902bb5cb16
msgid ":doc:`/tutorial/update-documents`"
msgstr ""

#: ../source/mongo.txt:143
# 29688c673f5043f2aff8f907769e2614
msgid ":doc:`/tutorial/remove-documents`"
msgstr ""

#: ../source/mongo.txt:144
# bfd45175d1794065864c2f5dbb53ab05
msgid ":doc:`/reference/method`"
msgstr ""

#: ../source/mongo.txt:147
# a7d08ff921b64fe4ae7d6f4693d588c1
msgid "Format Printed Results"
msgstr ""

#: ../source/mongo.txt:149
# 6cee38eb5e744090b851eb591ab58ec2
msgid "The :method:`db.collection.find()` method returns a :term:`cursor` to the results; however, in the :program:`mongo` shell, if the returned cursor is not assigned to a variable using the ``var`` keyword, then the cursor is automatically iterated up to 20 times to print up to the first 20 documents that match the query. The :program:`mongo` shell will prompt ``Type it`` to iterate another 20 times."
msgstr ""

#: ../source/mongo.txt:156
# f59b95870da142058755ff174b1d4f84
msgid "To format the printed result, you can add the ``.pretty()`` to the operation, as in the following:"
msgstr ""

#: ../source/mongo.txt:163
# ab6d7ae7ae9d487fabc30288ee2086d2
msgid "In addition, you can use the following explicit print methods in the :program:`mongo` shell:"
msgstr ""

#: ../source/mongo.txt:166
# add7a435e4f144c88b39f1ca623682a6
msgid "``print()`` to print without formatting"
msgstr ""

#: ../source/mongo.txt:168
# bfa159efd24447d7b3b50153de50e121
msgid "``print(tojson(<obj>))`` to print with :term:`JSON` formatting and equivalent to ``printjson()``"
msgstr ""

#: ../source/mongo.txt:171
# e5273135b3f64f6ca69d0b77dc3cd915
msgid "``printjson()`` to print with :term:`JSON` formatting and equivalent to ``print(tojson(<obj>))``"
msgstr ""

#: ../source/mongo.txt:174
# ac53d7a336e549d6b6e4cd081fd26cdc
msgid "For more information and examples on cursor handling in the :program:`mongo` shell, see :doc:`/tutorial/iterate-a-cursor`. See also :ref:`mongo-shell-help-cursor` for list of cursor help in the :program:`mongo` shell."
msgstr ""

#: ../source/mongo.txt:180
# cb54d5a70c6b46f6bcc196ab519ea1f6
msgid "Multi-line Operations in the ``mongo`` Shell"
msgstr ""

#: ../source/mongo.txt:182
# fe96b3b2c475400db1154bb559808222
msgid "If you end a line with an open parenthesis (``'('``), an open brace (``'{'``), or an open bracket (``'['``), then the subsequent lines start with ellipsis (``\"...\"``) until you enter the corresponding closing parenthesis (``')'``), the closing brace (``'}'``) or the closing bracket (``']'``). The :program:`mongo` shell waits for the closing parenthesis, closing brace, or the closing bracket before evaluating the code, as in the following example:"
msgstr ""

#: ../source/mongo.txt:197
# aedb5b74f9a54b659107afad3b858393
msgid "You can exit the line continuation mode if you enter two blank lines, as in the following example:"
msgstr ""

#: ../source/mongo.txt:208
# 80681c34c3f048bca996e4b9cbf4ef40
msgid "Tab Completion and Other Keyboard Shortcuts"
msgstr ""

#: ../source/mongo.txt:210
# 2c0db24dc63145e690f7518608578228
msgid "The :program:`mongo` shell supports keyboard shortcuts. For example,"
msgstr ""

#: ../source/mongo.txt:212
# bb514269918a4bf2ae0ab674453ffab0
msgid "Use the up/down arrow keys to scroll through command history. See :ref:`.dbshell <mongo-dbshell-file>` documentation for more information on the ``.dbshell`` file."
msgstr ""

#: ../source/mongo.txt:216
# bea298248c404bd99268e8728cc1de79
msgid "Use ``<Tab>`` to autocomplete or to list the completion possibilities, as in the following example which uses ``<Tab>`` to complete the method name starting with the letter ``'c'``:"
msgstr ""

#: ../source/mongo.txt:224
# 066d5cae0e57419e9f37ab4a4e7287d6
msgid "Because there are many collection methods starting with the letter ``'c'``, the ``<Tab>`` will list the various methods that start with ``'c'``."
msgstr ""

#: ../source/mongo.txt:228
# 1df003b9f1754556b36e2a2b851c5214
msgid "For a full list of the shortcuts, see :ref:`Shell Keyboard Shortcuts <mongo-keyboard-shortcuts>`"
msgstr ""

#: ../source/mongo.txt:234
# cf4346d266e74f7aa0375be94ec7b2ba
msgid "Exit the Shell"
msgstr ""

#: ../source/mongo.txt:236
# b6a0b5676b194dd4941c27afa55718d8
msgid "To exit the shell, type ``quit()`` or use the ``<Ctrl-c>`` shortcut."
msgstr ""

#: ../source/mongo.txt:241
# 5edd303f2fb54f818df0bcd898802c51
msgid ":program:`mongo Reference Page <mongo>`"
msgstr ""


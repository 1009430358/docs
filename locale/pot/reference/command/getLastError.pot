# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/getLastError.txt:3
# 241e3e3c63f7406fa25f14cb6ee265dc
msgid "getLastError"
msgstr ""

#: ../source/reference/command/getLastError.txt:8
# d97948cf27df49869a77bda330434aee
msgid "Definition"
msgstr ""

#: ../source/includes/extracts/fact-2.6-wc-gle-change-cmd-getLastError.rst:5
# 080f3aeee2d94d1b99796476fc373b0d
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concerns with the write operations, eliminating the need for a separate :dbcommand:`getLastError`. :ref:`Most write methods <write-methods-incompatibility>` now return the status of the write operation, including error information. In previous versions, clients typically used the :dbcommand:`getLastError` in combination with a write operation to verify that the write succeeded."
msgstr ""

#: ../source/reference/command/getLastError.txt:14
# c348ad9e133f44458e4473ddc09405ca
msgid "Returns the error status of the preceding write operation on the *current connection*."
msgstr ""

#: ../source/reference/command/getLastError.txt:17
# b55be91d894f4230a2db6a1d9b9d6166
msgid ":dbcommand:`getLastError` uses the following prototype form:"
msgstr ""

#: ../source/reference/command/getLastError.txt:23
# 290d2c780f2c40eeb38a7b3fdd69dbb7
msgid ":dbcommand:`getLastError` uses the following fields:"
msgstr ""

#: ../source/reference/command/getLastError.txt:27
# a93bbeebac0e4144b5986ca471ad1e5c
msgid ":doc:`Write Concern </core/write-concern>`, :doc:`/reference/write-concern`, and :ref:`replica-set-write-concern`."
msgstr ""

#: ../source/reference/command/getLastError.txt:33
# 49ba09d9cdce4045bdc99f3e162f05b7
msgid "Output"
msgstr ""

#: ../source/reference/command/getLastError.txt:35
# fb767b0e1d8f45d483ea0bdb3da3e4c0
msgid "Each :dbcommand:`~db.collection.getLastError()` command returns a document containing a subset of the fields listed below."
msgstr ""

#: ../source/reference/command/getLastError.txt:40
# b0ffc6e6651641aa8fcae52ed7b1b4b0
msgid ":data:`~getLastError.ok` is ``true`` when the :dbcommand:`getLastError` command completes successfully."
msgstr ""

#: ../source/reference/command/getLastError.txt:43
# dc2bd664a23c49058f12822e562e3b66
msgid "A value of ``true`` does *not* indicate that the preceding operation did not produce an error."
msgstr ""

#: ../source/reference/command/getLastError.txt:48
# 5c1150576e4a425b8933d51aaf3b00c6
msgid ":data:`~getLastError.err` is ``null`` unless an error occurs. When there was an error with the preceding operation, ``err`` contains a string identifying the error."
msgstr ""

#: ../source/reference/command/getLastError.txt:56
# 7f1adeb4c93f4d87bd0c1bc2519e1f3b
msgid ":data:`~getLastError.errmsg` contains the description of the error. :data:`~getLastError.errmsg` only appears if there was an error with the preceding operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:62
# 00dfd91fa81345258a8dc5a595758c60
msgid ":data:`~getLastError.code` reports the preceding operation's error code. For description of the error, see :data:`~getLastError.err` and :data:`~getLastError.errmsg`."
msgstr ""

#: ../source/reference/command/getLastError.txt:68
# 2132b7c20cd24c6ba8f8f2bfcc8fb2fc
msgid "The identifier of the connection."
msgstr ""

#: ../source/reference/command/getLastError.txt:72
# e3a285b1cb604b05bc2265a16a68ea39
msgid "When issued against a replica set member and the preceding operation was a write or update, :data:`~getLastError.lastOp` is the *optime* timestamp in the :term:`oplog`  of the change."
msgstr ""

#: ../source/reference/command/getLastError.txt:78
# bdd7e710fc7442d0a0359f7c9077960c
msgid "If the preceding operation was an update or a remove operation, but *not* a :dbcommand:`findAndModify` operation, :data:`~getLastError.n` reports the number of documents matched by the update or remove operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:83
# 47b624269f8044978b3a0bfeda370b8f
msgid "For a remove operation, the number of matched documents will equal the number removed."
msgstr ""

#: ../source/reference/command/getLastError.txt:86
# a4aaf05612ae4d49a1a671c4ac9e30b3
msgid "For an update operation, if the update operation results in no change to the document, such as setting the value of the field to its current value, the number of matched documents may be smaller than the number of documents actually modified. If the update includes the ``upsert:true`` option and results in the creation of a new document, :data:`~getLastError.n` returns the number of documents inserted."
msgstr ""

#: ../source/reference/command/getLastError.txt:94
# def14c8c922b4e06a5c6d6387b561d70
msgid ":data:`~getLastError.n` is ``0`` if reporting on an update or remove that occurs through a :dbcommand:`findAndModify` operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:99
# b65da5f216ba4a0685ea206efbd4cabb
msgid ":data:`~getLastError.syncMillis` is the number of milliseconds spent waiting for the write to disk operation (e.g. write to journal files)."
msgstr ""

#: ../source/reference/command/getLastError.txt:105
# 50343f750d2b4a469a677957059f80c2
msgid "When issued against a sharded cluster after a write operation, :data:`~getLastError.shards` identifies the shards targeted in the write operation. :data:`~getLastError.shards` is present in the output only if the write operation targets multiple shards."
msgstr ""

#: ../source/reference/command/getLastError.txt:112
# bbc23ed06c11495eae7fe3dbf6e9daf8
msgid "When issued against a sharded cluster after a write operation, identifies the shard targeted in the write operation. :data:`~getLastError.singleShard` is only present if the write operation targets exactly one shard."
msgstr ""

#: ../source/reference/command/getLastError.txt:119
# e2daebdb10884cad8c4c5160f3cb4cc4
msgid ":data:`~getLastError.updatedExisting` is ``true`` when an update affects at least one document and does not result in an :term:`upsert`."
msgstr ""

#: ../source/reference/command/getLastError.txt:125
# 1293e09e1ba54b7e89cc7f6ea08f2233
msgid "If the update results in an insert, :data:`~getLastError.upserted` is the value of ``_id`` field of the document."
msgstr ""

#: ../source/reference/command/getLastError.txt:128
# 1bdf2090df154516a7fcb02da5aef6d7
msgid "Earlier versions of MongoDB included :data:`~getLastError.upserted` only if ``_id`` was an :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/reference/command/getLastError.txt:135
# a981a9c6d7ab43f28ac43f6d73286748
msgid "If set, ``wnote`` indicates that the preceding operation's error relates to using the ``w`` parameter to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:0
# ef8f67a732434233bb6e0912cff69632
msgid "See"
msgstr ""

#: ../source/reference/command/getLastError.txt:143
# 3a33f3963ee84ce4b794d014a935a0e2
msgid ":data:`~getLastError.wtimeout` is ``true`` if the :dbcommand:`getLastError` timed out because of the ``wtimeout`` setting to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:149
# d88745be347a4ad9ae2c15f7c7ef6ed1
msgid "If the preceding operation specified a timeout using the ``wtimeout`` setting to :dbcommand:`getLastError`, then :data:`~getLastError.waited` reports the number of milliseconds :dbcommand:`getLastError` waited before timing out."
msgstr ""

#: ../source/reference/command/getLastError.txt:156
# 0a9910ae910d46dca335bae9fabc422c
msgid ":data:`getLastError.wtime` is the number of milliseconds spent waiting for the preceding operation to complete. If :dbcommand:`getLastError` timed out, :data:`~getLastError.wtime` and :dbcommand:`getLastError.waited` are equal."
msgstr ""

#: ../source/reference/command/getLastError.txt:163
# 5ef3f3186f6548ee84ef897e0a50cb2e
msgid "If writing to a replica set, :data:`~getLastError.writtenTo` is an array that contains the hostname and port number of the members that confirmed the previous write operation, based on the value of the ``w`` field in the command."
msgstr ""

#: ../source/reference/command/getLastError.txt:171
# ae8563886e6c47aea04541a2bf758c87
msgid "Examples"
msgstr ""

#: ../source/reference/command/getLastError.txt:174
# 6579d723d353450481fa3a2615331847
msgid "Confirm Replication to Two Replica Set Members"
msgstr ""

#: ../source/reference/command/getLastError.txt:176
# ae3dd4c20fc841c9b38d9025ab19e03d
msgid "The following example ensures the preceding operation has replicated to two members (the primary and one other member). The command also specifies a timeout of ``5000`` milliseconds to ensure that the:dbcommand:`getLastError` command does not block forever if MongoDB cannot satisfy the requested write concern:"
msgstr ""

#: ../source/reference/command/getLastError.txt:187
# e53402feddce445faf34e63b389b7b03
msgid "Confirm Replication to a Majority of a Replica Set"
msgstr ""

#: ../source/reference/command/getLastError.txt:189
# 8bb5221b09844059b04a22b62eaddeac
msgid "The following example ensures the write operation has replicated to a majority of the voting members of the replica set. The command also specifies a timeout of ``5000`` milliseconds to ensure that the:dbcommand:`getLastError` command does not block forever if MongoDB cannot satisfy the requested write concern:"
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# ac9f1a23d4624936aa7f979ab8a712aa
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""


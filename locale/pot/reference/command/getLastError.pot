# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/command/getLastError.txt:3
# 1c64ddcfb8324ecfb6389ec984a57ca6
msgid "getLastError"
msgstr ""

#: ../source/reference/command/getLastError.txt:0
# d535df70f2b04ee48a27f0a055149e38
msgid "On this page"
msgstr ""

#: ../source/reference/command/getLastError.txt:14
# 10f481cb3c284ed080c77c06322f4269
msgid "Definition"
msgstr ""

#: ../source/includes/extracts/fact-2.6-wc-gle-change-cmd-getLastError.rst:5
# cf9b68a8e6454082a20077d6bb026d28
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concerns with the write operations, eliminating the need for a separate :dbcommand:`getLastError`. :ref:`Most write methods <write-methods-incompatibility>` now return the status of the write operation, including error information. In previous versions, clients typically used the :dbcommand:`getLastError` in combination with a write operation to verify that the write succeeded."
msgstr ""

#: ../source/reference/command/getLastError.txt:20
# f1add16093a34b3ca9804a15d11292f6
msgid "Returns the error status of the preceding write operation on the *current connection*."
msgstr ""

#: ../source/reference/command/getLastError.txt:23
# 34fe3df6eefe4418bfcaf1aa6eaeae08
msgid ":dbcommand:`getLastError` uses the following prototype form:"
msgstr ""

#: ../source/reference/command/getLastError.txt:29
# 5878595ddcb8428e86102e782b00d16c
msgid ":dbcommand:`getLastError` uses the following fields:"
msgstr ""

#: ../source/reference/command/getLastError.txt:33
# 59abde48cdfd405ba5df8d37b2e50221
msgid ":doc:`/reference/write-concern`"
msgstr ""

#: ../source/reference/command/getLastError.txt:38
# a12f09eb10e44ff2b9de9992ea70d50e
msgid "Output"
msgstr ""

#: ../source/reference/command/getLastError.txt:40
# 240201dd3ffa4db8b57e03e477dce3fa
msgid "Each :dbcommand:`~db.collection.getLastError()` command returns a document containing a subset of the fields listed below."
msgstr ""

#: ../source/reference/command/getLastError.txt:45
# 7c8cfdb8a84e4a87a90995fbd0a7429d
msgid ":data:`~getLastError.ok` is ``true`` when the :dbcommand:`getLastError` command completes successfully."
msgstr ""

#: ../source/reference/command/getLastError.txt:48
# 7acc6d4fc7044f89a638429e6628f33c
msgid "A value of ``true`` does *not* indicate that the preceding operation did not produce an error."
msgstr ""

#: ../source/reference/command/getLastError.txt:53
# 757d6be4703d462d86f6704a0fe70818
msgid ":data:`~getLastError.err` is ``null`` unless an error occurs. When there was an error with the preceding operation, ``err`` contains a string identifying the error."
msgstr ""

#: ../source/reference/command/getLastError.txt:61
# 4bddc801ccaa4bfb92ec5c11b61edd29
msgid ":data:`~getLastError.errmsg` contains the description of the error. :data:`~getLastError.errmsg` only appears if there was an error with the preceding operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:67
# b7da5b229dba4e349d0fc2c0fbe88c8e
msgid ":data:`~getLastError.code` reports the preceding operation's error code. For description of the error, see :data:`~getLastError.err` and :data:`~getLastError.errmsg`."
msgstr ""

#: ../source/reference/command/getLastError.txt:73
# b303a252c3f04af0bf965bc68c22d97b
msgid "The identifier of the connection."
msgstr ""

#: ../source/reference/command/getLastError.txt:77
# d3a05af2e0674f7ca4c04baad684a08b
msgid "When issued against a replica set member and the preceding operation was a write or update, :data:`~getLastError.lastOp` is the *optime* timestamp in the :term:`oplog`  of the change."
msgstr ""

#: ../source/reference/command/getLastError.txt:83
# 9f07723d5fae41fca19be91a0a6e09fa
msgid "If the preceding operation was an update or a remove operation, but *not* a :dbcommand:`findAndModify` operation, :data:`~getLastError.n` reports the number of documents matched by the update or remove operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:88
# 61a5292b54534c5e960a7ab53a56295e
msgid "For a remove operation, the number of matched documents will equal the number removed."
msgstr ""

#: ../source/reference/command/getLastError.txt:91
# 2ba831cea3184e54bbdb1b068d90ee97
msgid "For an update operation, if the operation results in no change to the document, such as setting the value of the field to its current value, the number of matched documents may be smaller than the number of documents actually modified. If the update includes the ``upsert:true`` option and results in the creation of a new document, :data:`~getLastError.n` returns the number of documents inserted."
msgstr ""

#: ../source/reference/command/getLastError.txt:99
# eb65296585cb4331a4c2162c9fdc61f9
msgid ":data:`~getLastError.n` is ``0`` if reporting on an update or remove that occurs through a :dbcommand:`findAndModify` operation."
msgstr ""

#: ../source/reference/command/getLastError.txt:104
# 3baf2dcb789940fb8d72b39bbacb8c61
msgid ":data:`~getLastError.syncMillis` is the number of milliseconds spent waiting for the write to disk operation (e.g. write to journal files)."
msgstr ""

#: ../source/reference/command/getLastError.txt:110
# 04381b3daa0b47579f7479808ebcbea3
msgid "When issued against a sharded cluster after a write operation, :data:`~getLastError.shards` identifies the shards targeted in the write operation. :data:`~getLastError.shards` is present in the output only if the write operation targets multiple shards."
msgstr ""

#: ../source/reference/command/getLastError.txt:117
# 2ac924f7a2204e2db01e81a803616711
msgid "When issued against a sharded cluster after a write operation, identifies the shard targeted in the write operation. :data:`~getLastError.singleShard` is only present if the write operation targets exactly one shard."
msgstr ""

#: ../source/reference/command/getLastError.txt:124
# 47b7ab6514d8412993a2fd38960d2773
msgid ":data:`~getLastError.updatedExisting` is ``true`` when an update affects at least one document and does not result in an :term:`upsert`."
msgstr ""

#: ../source/reference/command/getLastError.txt:130
# 23010a74fffa47bdb3eed53f926220bd
msgid "If the update results in an insert, :data:`~getLastError.upserted` is the value of ``_id`` field of the document."
msgstr ""

#: ../source/reference/command/getLastError.txt:133
# d84692f1115a4c07bc04eef62ac72b86
msgid "Earlier versions of MongoDB included :data:`~getLastError.upserted` only if ``_id`` was an :term:`ObjectId <objectid>`."
msgstr ""

#: ../source/reference/command/getLastError.txt:140
# 5c5ede23ec45483faa6897617e5e4a3f
msgid "If set, ``wnote`` indicates that the preceding operation's error relates to using the ``w`` parameter to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:0
# 8d0c842d031b4cca9fe27809298e641e
msgid "See"
msgstr ""

#: ../source/reference/command/getLastError.txt:148
# 518fa6453ee24468b3daa67a105b9281
msgid ":data:`~getLastError.wtimeout` is ``true`` if the :dbcommand:`getLastError` timed out because of the ``wtimeout`` setting to :dbcommand:`getLastError`."
msgstr ""

#: ../source/reference/command/getLastError.txt:154
# 9e9664a1ca014aa5961164cbb0402910
msgid "If the preceding operation specified a timeout using the ``wtimeout`` setting to :dbcommand:`getLastError`, then :data:`~getLastError.waited` reports the number of milliseconds :dbcommand:`getLastError` waited before timing out."
msgstr ""

#: ../source/reference/command/getLastError.txt:161
# e6f47732357c4506889d96e719304249
msgid ":data:`getLastError.wtime` is the number of milliseconds spent waiting for the preceding operation to complete. If :dbcommand:`getLastError` timed out, :data:`~getLastError.wtime` and :dbcommand:`getLastError.waited` are equal."
msgstr ""

#: ../source/reference/command/getLastError.txt:168
# 8ad9061f259e42ada4e852247ee3d160
msgid "If writing to a replica set, :data:`~getLastError.writtenTo` is an array that contains the hostname and port number of the members that confirmed the previous write operation, based on the value of the ``w`` field in the command."
msgstr ""

#: ../source/reference/command/getLastError.txt:176
# 01c838d1f0bd4758a4e260fee2424a3a
msgid "Examples"
msgstr ""

#: ../source/reference/command/getLastError.txt:179
# 3d794d2757174c389329e24b9b98caff
msgid "Confirm Replication to Two Replica Set Members"
msgstr ""

#: ../source/reference/command/getLastError.txt:181
# 0133a05c2fec4e7a96bec1d65957b534
msgid "The following example ensures the preceding operation has replicated to two members (the primary and one other member). The command also specifies a timeout of ``5000`` milliseconds to ensure that the:dbcommand:`getLastError` command does not block forever if MongoDB cannot satisfy the requested write concern:"
msgstr ""

#: ../source/reference/command/getLastError.txt:192
# 22562bc8918445f7857de7f62d393ebe
msgid "Confirm Replication to a Majority of a Replica Set"
msgstr ""

#: ../source/reference/command/getLastError.txt:194
# bfd07698788b48438c0b89e08bac0acd
msgid "The following example ensures the write operation has replicated to a majority of the voting members of the replica set. The command also specifies a timeout of ``5000`` milliseconds to ensure that the:dbcommand:`getLastError` command does not block forever if MongoDB cannot satisfy the requested write concern:"
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# 4e108028fa1a4a8e8241b1ce7c1a962f
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
# 16407a70d4e24a6babad6af67f3ae583
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:8
# e73d67a7976e48b4b711cf07d54cd6d6
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/regex.txt:12
# b2c3e735cf3746c093712399f6201b0f
msgid "Provides regular expression capabilities for pattern matching *strings* in queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE\" ) version 8.36 with UTF-8 support."
msgstr ""

#: ../source/reference/operator/query/regex.txt:16
# 30f6559a95534bfc83b03351cff83abd
msgid "To use :query:`$regex`, use one of the following syntax:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:24
# 3c2bec59724b40b49bf15975512a7197
msgid "In MongoDB, you can also use regular expression objects (i.e. ``/pattern/``) to specify regular expressions:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:31
# 0a097b31f8774b4c86c4d66cf079c79f
msgid "For restrictions on particular syntax use, see :ref:`syntax-restrictions`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:36
# fd1b98877a994143b78a3f1b31daf6e4
msgid "The following ``<options>`` are available for use with regular expression."
msgstr ""

#: ../source/reference/operator/query/regex.txt:43
# b193f90cfc474fbaa47b85ea9f2c9210
msgid "Option"
msgstr ""

#: ../source/reference/operator/query/regex.txt:44
# 307bde4fd83645a78ceb3fa63d3f52fc
msgid "Description"
msgstr ""

#: ../source/reference/operator/query/regex.txt:45
# a356beebe8a04f2b991864e09f83983b
msgid "Syntax Restrictions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:47
# 43aa44e03b7d42fcaf9f6e614b5125bd
msgid "``i``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:48
# 587b27323b9341149dade68c75a68d86
msgid "Case insensitivity to match upper and lower cases. For an example, see :ref:`regex-case-insensitive`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:52
# 4a30d9a74995427a873aea9bf152366c
msgid "``m``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:54
# bc9ce9aba8fa497583a34e7230623742
msgid "For patterns that include anchors (i.e. ``^`` for the start, ``$`` for the end), match at the beginning or end of each line for strings with multiline values. Without this option, these anchors match at beginning or end of the string. For an example, see :ref:`regex-multiline-match`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
# 4ca253486ae4405e891e05e41eecd280
msgid "If the pattern contains no anchors or if the string value has no newline characters (e.g. ``\\n``), the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:66
# 950e9a580dca4f00970958277d6969a6
msgid "``x``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:68
# d325e952268b4dccb026ee37615d8e9a
msgid "\"Extended\" capability to ignore all white space characters in the :query:`$regex` pattern unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
# 4c26d9a0192a4707ac5e28cb37b346d2
msgid "Additionally, it ignores characters in-between and including an un-escaped hash/pound (``#``) character and the next new line, so that you may include comments in complicated patterns. This only applies to data characters; white space characters may never appear within special character sequences in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:79
# a7904bd57cf64d51a71f56f2329c9b5c
msgid "The ``x`` option does not affect the handling of the VT character (i.e. code 11)."
msgstr ""

#: ../source/reference/operator/query/regex.txt:82
#: ../source/reference/operator/query/regex.txt:90
# d29eccc10f3b42d295769a60889a1e64
# 5f682667e3f844d0b2fa38a60b0e9ae4
msgid "Requires ``$regex`` with ``$options`` syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:84
# e47cea4fe54f49bcb37dc8f73315f413
msgid "``s``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:86
# 0dd5a693dd8c41718105bf30fe31d543
msgid "Allows the dot character (i.e. ``.``) to match all characters *including* newline characters. For an example, see :ref:`regex-dot-new-line`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:93
# 112f46bcc3f548b9911170211f3ba410
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/regex.txt:98
# 6933c0f99782410bbd9499778c353e70
msgid "$regex vs. /pattern/ Syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:101
# 307f3c650cfd4a4686a5d7868ec5e6c3
msgid "``$in`` Expressions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:103
# e347462a202849e28cc48d51ac3569ae
msgid "To include a regular expression in an ``$in`` query expression, you can only use JavaScript regular expression objects (i.e. ``/pattern/`` ). For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:111
# 89d644f1978b4c53a947d7d10adbf7c7
msgid "You *cannot* use :query:`$regex` operator expressions inside an :query:`$in`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:115
# 7571ee77931e40efbaea614c28646db8
msgid "Implicit ``AND`` Conditions for the Field"
msgstr ""

#: ../source/reference/operator/query/regex.txt:117
# 6cf31007513c4d318e2bf16796c1e9d8
msgid "To include a regular expression in a comma-separated list of query conditions for the field, use the :query:`$regex` operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:127
# b06690a5524f4355a0310af05beb6e54
msgid "``x`` and ``s`` Options"
msgstr ""

#: ../source/reference/operator/query/regex.txt:129
# 58993eb9b955400cba3e969083cef439
msgid "To use either the ``x`` option or ``s`` options, you must use the :query:`$regex` operator expression *with* the :query:`$options` operator. For example, to specify the ``i`` and the ``s`` options, you must use :query:`$options` for both:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:140
# c42bab9e32b14fb4b5ebe17631644a1d
msgid "PCRE vs JavaScript"
msgstr ""

#: ../source/reference/operator/query/regex.txt:142
# d9445c1d0d554e27a70f9f2a82cda38f
msgid "To use PCRE supported features in the regex pattern that are unsupported in JavaScript, you must use the :query:`$regex` operator expression with the pattern as a string. For example, to use ``(?i)`` in the pattern to turn case-insensitivity on for the remaining pattern and ``(?-i)`` to turn case-sensitivity on for the remaining pattern, you must use the :query:`$regex` operator with the pattern as a string:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:156
# a058586d80104c1e91e679493ed85434
msgid "Index Use"
msgstr ""

#: ../source/reference/operator/query/regex.txt:160
# bb3680d0418e4bd0a6a0d241523b1338
msgid "If an index exists for the field, then MongoDB matches the regular expression against the values in the index, which can be faster than a collection scan. Further optimization can occur if the regular expression is a \"prefix expression\", which means that all potential matches start with the same string. This allows MongoDB to construct a \"range\" from that prefix and only match against those values from the index that fall within that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:168
# c247499572ea4ebba43cacef02c20bca
msgid "A regular expression is a \"prefix expression\" if it starts with a caret (``^``) or a left anchor (``\\A``), followed by a string of simple symbols. For example, the regex ``/^abc.*/`` will be optimized by matching only against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:173
# e18e9e2fa4754ee2ba6835e2a5eeac15
msgid "Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent strings, they have different performance characteristics. All of these expressions use an index if an appropriate index exists; however, ``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after matching the prefix."
msgstr ""

#: ../source/reference/operator/query/regex.txt:180
# 6e64293cc0b442d29e731984dc603027
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/regex.txt:182
# 3454a40e87c34f16a6a6e8042a79a9b8
msgid "The following examples use a collection ``products`` with the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:195
# fcd23da6f0f84c698727433fb7626760
msgid "Perform Case-Insensitive Regular Expression Match"
msgstr ""

#: ../source/reference/operator/query/regex.txt:197
# c7355c67f82a4f83b8260171440ddd7b
msgid "The following example uses the ``i`` option perform a *case-insensitive* match for documents with ``sku`` value that starts with ``ABC``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:205
#: ../source/reference/operator/query/regex.txt:224
#: ../source/reference/operator/query/regex.txt:264
# 27ee5bba7ec44bf6ba685408dbb77158
# d107bfac3f114780a7ff7465a955fee7
# b729d4065f3844c7a91d422a3bb779ee
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:215
# e515876171114b97922c0f4027ab6947
msgid "Multiline Match for Lines Starting with Specified Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:217
# fc98f41cf8154a9c8fe53036833454c2
msgid "The following example uses the ``m`` option to match lines starting with the letter ``S`` for multiline strings:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:231
# d91b127aa69b4d6c895bd7b2746173a9
msgid "Without the ``m`` option, the query would match just the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:237
# c54bd95f265e410db6eb7d6342969498
msgid "If the :query:`$regex` pattern does not contain an anchor, the pattern matches against the string as a whole, as in the following example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:244
# b2bab0fc3485486abd40a749fcc017a5
msgid "Then, the :query:`$regex` would match both documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:254
# 21825e2d830440e9b4eb957566c45758
msgid "Use the ``.`` Dot Character to Match New Line"
msgstr ""

#: ../source/reference/operator/query/regex.txt:256
# d2367b14ca06476b93ec6b3436167042
msgid "The following example uses the ``s`` option to allow the  dot character (i.e. ``.``) to match all characters *including* new line as well as the ``i`` option to perform a case-insensitive match:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:271
# c41413840d5f4989a96c9951157817c1
msgid "*Without* the ``s`` option, the query would have matched only the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:280
# fbb23406ca324c82a90233059e0c8242
msgid "Ignore White Spaces in Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:282
# 93eab82440c940e1a807144f67ab90ff
msgid "The following example uses the ``x`` option ignore white spaces and the comments, denoted by the ``#`` and ending with the ``\\n`` in the matching pattern:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:291
# f854b4ce998941a094931c98ad9802e9
msgid "The query matches the following document:"
msgstr ""


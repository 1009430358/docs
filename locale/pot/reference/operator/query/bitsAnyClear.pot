# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/bitsAnyClear.txt:3
# 0ef40780d152411e9d54a19406679b66
msgid "$bitsAnyClear"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:0
# 92b782bf44574949a4281f7d1260ea99
msgid "On this page"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:17
# 6d569511522f4020aca3b9328b6f2ec8
msgid ":query:`$bitsAnyClear` matches documents where *any* of the bit positions given by the query are clear (i.e. ``0``) in ``field``."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:3
# d9283fa82a1d4662b280ff87c1fab1c7
msgid "``{ <field>: { $bitsAnyClear: <numeric bitmask> } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:5
# 3bf3360bddf0404ca1ba9e7703a6a13e
msgid "``{ <field>: { $bitsAnyClear: <`` :bsontype:`BinData <data_binary>` ``bitmask> } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:7
# e64954b0f0ed40bb805eb769995ee4d2
msgid "``{ <field>: { $bitsAnyClear: [ <position1>, <position2>, ... ] } }``"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:9
# e93c3fca5af24b2e985e2f366c9b59b3
msgid "The ``field`` value must be either numerical or a :bsontype:`BinData <data_binary>` instance. Otherwise, :query:`$bitsAnyClear` will not match the current document."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:16
# 0237e7e1786c4a85a1e24a3a2f70599e
msgid "Numeric Bitmask"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:14
# 1209201c47724afdba98deebf7cc8594
msgid "You can provide a numeric bitmask to be matched against the operand field. It must be representable as a non-negative 32-bit signed integer. Otherwise, :query:`$bitsAnyClear` will return an error."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:20
#: ../source/reference/operator/query/bitsAnyClear.txt:80
# 2b1d32daaaaa4ce9ae307fdd6d843121
# 488cecb642124b368ac12984c7a83016
msgid "BinData Bitmask"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:19
# 32fa4c820b11419a937477cbaaa31a18
msgid "You can also use an arbitrarily large :bsontype:`BinData <data_binary>` instance as a bitmask."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:25
# c98d679509de487faa5da55378c721b2
msgid "Position List"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:23
# b292bcc87e88460fa6a73dc6e389cbe4
msgid "If querying a list of bit positions, each ``<position>`` must be a non-negative integer. Bit positions start at ``0`` from the least significant bit. For example, the decimal number ``254`` would have the following bit positions:"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:29
# dccbd1d4a3c44f21b88736da84ff887e
msgid "**Bit Value**"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:31
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:33
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:35
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:37
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:39
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:41
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:43
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:61
# 6386092181a44df28781dbf7e9a181b6
# ffb3304a45d14f32941ff95c57145361
# b6c524430ec14c5885cb741e3fb16dcc
# 9374a6bdb0ff4185b61763debd1efde8
# 7b1332be41104757a3686ccd3e380c90
# e02429da44d643838cd6b14855b284e4
# 9179607a0ce34a48b95faecad091db59
# 8e67ede26ea7494c96a93c0c9f4cf80f
msgid "1"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:45
#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:63
# e569ebc5cbf245198dd4843e0a80926d
# cffbd36df9a744eba690c6f7f9b42a18
msgid "0"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:47
# ca6cdb4f8fd94bbfbb97d61b79579af9
msgid "**Position**"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:49
# 1eee190976b44243ac5cce79cf3fba42
msgid "7"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:51
# a65a68701db741af9a9c04511d62a8e6
msgid "6"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:53
# 1eb7b6f1852d4cb29677fdd063d2759b
msgid "5"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:55
# 66ce330dc2e845c798d1dc467b7411e7
msgid "4"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:57
# 5955d3eb266d4bf19980dd75b2ffa934
msgid "3"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-description.rst:59
# 49843169a4c347cf856deb7ae21ca64d
msgid "2"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:23
# 56e9d0b0133c45228d7ca9b4ad0bad76
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:26
# c39759c666374233b4b024cba484a79e
msgid "Floating Point Values"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsanyclear-floating-point.rst:1
# b8c3e817acc24054b3b306bd0286907c
msgid ":query:`$bitsAnyClear` will not match numerical values that cannot be represented as a signed 64-bit integer. This can be the case if a value is either too large or small to fit in a signed 64-bit integer, or if it has a fractional component."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:31
# 575e9e49e360423089b764fb1695cde5
msgid "Sign Extension"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsallset-sign-extension.rst:1
# 01424e854b17458da80d130ceb396e01
msgid "Numbers are sign extended. For example, $bitsAllSet considers bit position ``200`` to be set for the negative number ``-5``, but bit position ``200`` to be clear for the positive number ``+5``."
msgstr ""

#: ../source/includes/extracts/fact-query-bitsallset-sign-extension.rst:5
# ffe5d89d67be49a497f7c7d2a4b3be15
msgid "In contrast, :bsontype:`BinData <data_binary>` instances are zero-extended. For example, given the following document:"
msgstr ""

#: ../source/includes/extracts/fact-query-bitsallset-sign-extension.rst:12
# 9151926cb56b487b83a1f0aae6cf6cd8
msgid "$bitsAllSet will consider all bits outside of ``x`` to be clear."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:36
# 0dc006ec013d40b4a17b1b32933b5722
msgid "Examples"
msgstr ""

#: ../source/includes/extracts/fact-query-bitwise-example-collection.rst:1
# 6e16cb8e296e47598ddf4ecbb82a76e6
msgid "The following examples will use a collection with the following documents:"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:41
# fc47dcea0f8e4a3bb3cb44e141dc4313
msgid "Bit Position Array"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:43
# a80c0240c21b42beae2a142b8f784008
msgid "The following query uses the :query:`$bitsAnyClear` operator to test whether field ``a`` has either bit position ``1`` or bit position ``5`` clear, where the least significant bit is position ``0``."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:51
#: ../source/reference/operator/query/bitsAnyClear.txt:69
#: ../source/reference/operator/query/bitsAnyClear.txt:89
# 0835e5aef27e4c2a87b3539686a0c710
# b69d6f614ea846fa8b7ec93307fdaf0f
# 97b4b2c7eed04396a5e5a69153458e0a
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:59
# 9e7e3f02aba044aa8ca7710f2289c7d9
msgid "Integer Bitmask"
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:61
# f48fa78ee6d84dddb1b9bcdb35d5122e
msgid "The following query uses the :query:`$bitsAnyClear` operator to test whether field ``a`` has any bits clear at positions ``0``, ``1``, and ``5`` (the binary representation of the bitmask ``35`` is ``00100011``)."
msgstr ""

#: ../source/reference/operator/query/bitsAnyClear.txt:81
# 57c6af1c0cf64b90aa516af1c12e5cb5
msgid "The following query uses the :query:`$bitsAnyClear` operator to test whether field ``a`` has any bits clear at positions `4` and `5` (the binary representation of ``BinData(0, \"MC==\")`` is ``00110000``)."
msgstr ""


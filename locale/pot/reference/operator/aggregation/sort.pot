# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/aggregation/sort.txt:3
# caf14d3e0d0a4c8f99cf08dcf22278ec
msgid "$sort (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:8
# 9d81b9dfdea7421e8c6f9f8b9362de5e
msgid "Definition"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:12
# 85c599a320814cc28bae6e0f51f9d900
msgid "Sorts all input documents and returns them to the pipeline in sorted order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:15
# 47d3d1919add420a920dbb4ba8efcc02
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:21
# b971d2d649f14caca597afd0d2350f8b
msgid ":pipeline:`$sort` takes a document that specifies the field(s) to sort by and the respective sort order. ``<sort order>`` can have one of the following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:25
# 013e88ccea1346f9aa87311be2017815
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:27
# d42b60de0bc64a2284732331f62f68f3
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:29
# 6d94aac020a448f392224f13a37a84cc
msgid "``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` metadata in descending order. See :ref:`sort-pipeline-metadata` for an example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:34
# 21d7c077230346baa808b2df850f8ff4
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:39
# d35c16e881864f08bf09180a09d4f936
msgid "Ascending/Descending Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:41
# 097b9a519f2e47de87b8bdf6a7c5b318
msgid "To  ascending order for a field or fields to sort by and a value of ``1`` or ``-1`` to specify an ascending or descending sort respectively, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:53
# 512f44763afc4c5c996974d15163b68e
msgid "This operation sorts the documents in the ``users`` collection, in descending order according by the ``age`` field and then in ascending order according to the value in the ``posts`` field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# efa84af0fc14478498114060c59b4660
msgid "When comparing values of different :term:`BSON` types, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# 1c0310dbfc734267be7ed2bebc5c6288
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# d683a296546f43ca9b7a637ebf20e5c2
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# c177561cdfc340b9929ca08a619058cd
msgid "Numbers (ints, longs, doubles)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# 76199607c7354f96a21659c9a259ca34
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 5fa6c940973d4e1b9666c1e3d210100f
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# 2dfac7fc0e4e4bde9819f5db9b52144e
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# 2a6d7253e8f049afacc1892553b3b40d
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# ddbf9e5a9d6440c39345e241df104d3a
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# d079d9a928874d2eaaef5f43c124090f
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 9e17c16e10154caf954632fafa1d030b
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# e322ccc40d05415cbfd37f25674f61c8
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# 5ce80b74c8ef49948b8f70e34bc77a8f
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
# d665bfb8ff6a4cdbb950710c8c2513e2
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:18
# 6c7c3711621e444093d354596d16f16f
msgid "MongoDB treats some types as equivalent for comparison purposes. For instance, numeric types undergo conversion before comparison."
msgstr ""

#: ../source/includes/fact-sort-order.rst:21
# cbcf9c4fab684d2b89fb1fea0f413bef
msgid "Date objects sort before Timestamp objects. Previously Date and Timestamp objects sorted together."
msgstr ""

#: ../source/includes/fact-sort-order.rst:25
# 3b88e9f7d3a64192b3d4e94a3d1972c0
msgid "The comparison treats a non-existent field as it would an empty BSON Object. As such, a sort on the ``a`` field in documents ``{ }`` and ``{ a: null }`` would treat the documents as equivalent in sort order."
msgstr ""

#: ../source/includes/fact-sort-order.rst:29
# 0d5373a4deeb4a8da54e89c760f54657
msgid "With arrays, a less-than comparison or an ascending sort compares the smallest element of arrays, and a greater-than comparison or a descending sort compares the largest element of the arrays. As such, when comparing a field whose value is a single-element array (e.g. ``[ 1 ]``) with non-array fields (e.g. ``2``), the comparison is between ``1`` and ``2``. A comparison of an empty array (e.g. ``[ ]``) treats the empty array as less than ``null`` or a missing field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:37
# 93591ad8b6e74e52a4ff22721e169172
msgid "MongoDB sorts ``BinData`` in the following order:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:39
# cc1e242a05504cf4b8d9cbae69de73ce
msgid "First, the length or size of the data."
msgstr ""

#: ../source/includes/fact-sort-order.rst:41
# 5387d2dfd4c9490e9197e25a35ae707b
msgid "Then, by the BSON one-byte subtype."
msgstr ""

#: ../source/includes/fact-sort-order.rst:43
# 7db24ffeb4d843ddb98d156513dbf6d2
msgid "Finally, by the data, performing a byte-by-byte comparison."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:62
# 4b6cbcf6205d4333bb52710e95693970
msgid "Metadata Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:64
# a5ceef25a39c40d891ac306a4c477463
msgid "Specify in the ``{ <sort-key> }`` document, a new field name for the computed metadata and specify the :expression:`$meta` expression as its value, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:77
# 5f077d76c2e0418f97cf601371eb4e87
msgid "This operation uses the :query:`$text` operator to match the documents, and then sorts first by the ``\"textScore\"`` metadata and then by descending order of the ``posts`` field. The specified metadata determines the sort order. For example, the ``\"textScore\"`` metadata sorts in descending order. See :expression:`$meta` for more information on metadata."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:87
# 792a8786b5c9479eba2f3767fb4df4eb
msgid "``$sort`` Operator and Memory"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:92
# a6919080778e4dd7910c21f1ddf26a35
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
# f5498117b0fd4601964a58a3943b26a2
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory. This optimization still applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:8
# 26253fd143094a1180f6b46b8ae7da3a
msgid "Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in memory, and then limit the results to n results."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# 414d64211d6f4643a470312ba2ae9ad4
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:101
# 5418bdd4c06d4b92bddebab900bc15c6
msgid "``$sort`` and Memory Restrictions"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:103
# 454125e6c9d24afaa2b5cd8d21113600
msgid "The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, :pipeline:`$sort` will produce an error. To allow for the handling of large datasets, set the ``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` operations to write to temporary files. See the ``allowDiskUse`` option in :method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` command for details."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:111
# 571c6356f3bf4cf49780d705db57a61f
msgid "The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to 100 megabytes of RAM."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:116
# aee96da828b448d9a85ce39f855f62b9
msgid "``$sort`` Operator and Performance"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:118
# 4a404df2f2964091b8555ca435528275
msgid ":pipeline:`$sort` operator can take advantage of an index when placed at the **beginning** of the pipeline or placed **before** the :pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group` aggregation operators. If :pipeline:`$project`, :pipeline:`$unwind`, or :pipeline:`$group` occur prior to the :pipeline:`$sort` operation, :pipeline:`$sort` cannot use any indexes."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-preference.txt:3
# e00c71a9693f4183a5708c89e5c13a81
msgid "Read Preference Reference"
msgstr ""

#: ../source/reference/read-preference.txt:0
# 86eff49923714054abc8ace25c397716
msgid "On this page"
msgstr ""

#: ../source/includes/introduction-read-preference.rst:1
# ee795a87730b4b28bacac4582246c558
msgid "Read preference describes how MongoDB clients route read operations to the members of a :term:`replica set`."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:6
# 9134c27088bb4738a93d93a9dc9f1dc7
msgid "By default, an application directs its read operations to the :term:`primary` member in a :term:`replica set`."
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:2
# b8bed52d95454ed3ac0c2c30afdc0bba
msgid "In MongoDB, in a replica set with one primary member [#edge-cases-2-primaries]_,"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:5
# 3a80f75269444af7b2508fac50a74e33
msgid "With :readconcern:`\"local\"` ``readConcern``, reads from the primary reflect the latest writes in absence of a failover;"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:8
# ad9e23feb3094139ba18bed41c462ada
msgid "With :readconcern:`\"majority\"` ``readConcern``, read operations from the primary or the secondaries have :term:`eventual consistency`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:5
# 935805f3df3d4065a8262c9ea67e4ffa
msgid "Read Preference Mode"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:6
# 5b4f1fa17aa74470afbf9ea5be3f352c
msgid "Description"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:7
# d875c85a4b6144d28e96adf6887c1b70
msgid ":readmode:`primary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:8
# 8b867c1dca3340cfad210b7f3203775d
msgid "Default mode. All operations read from the current replica set :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:10
# a554c2bbc80c48bdbf7521149c39e49c
msgid ":readmode:`primaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:11
# 237caa6ff9e448bb8d9ea94adeaf6557
msgid "In most situations, operations read from the :term:`primary` but if it is unavailable, operations read from :term:`secondary` members."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:14
# 68cafdee1b9f417bbda39f3c3fbb817e
msgid ":readmode:`secondary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:15
# 7f14c45544d249a09ada29c508c07de0
msgid "All operations read from the :term:`secondary` members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:17
# 51821fcbe52c4af68a65b3a1355d5305
msgid ":readmode:`secondaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:18
# 96697c7628fa4475a4f6537eef732300
msgid "In most situations, operations read from :term:`secondary` members but if no :term:`secondary` members are available, operations read from the :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:21
# 820e85b1761345bc9ff2ce2b633a527e
msgid ":readmode:`nearest`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:22
# 9d94f14bddf747d3bbe22dac415509d3
msgid "Operations read from member of the :term:`replica set` with the least network latency, irrespective of the member's type."
msgstr ""

#: ../source/reference/read-preference.txt:19
# 76b8e7ab8d3a4ad6a7a186c5e7bb2b2d
msgid "The read preference does not affect the visibility of data; i.e, clients can see the results of writes before they are made :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# cfab670c20034adf9e433e4effe92a41
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` (i.e. the default) readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
# 57d339802dca41e99a127ba9a7e89cec
msgid "Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/reference/read-preference.txt:24
# f3e7d5f58ee1448dbc84708d151f36c1
msgid "For more information on read isolation level in MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

#: ../source/reference/read-preference.txt:33
# 5dc05712269940eaacfc4f02237ffe37
msgid "Read Preference Modes"
msgstr ""

#: ../source/reference/read-preference.txt:37
# 5d0d21c4fdd54e79a03636210525a1e5
msgid "All read operations use only the current replica set :term:`primary`. [#edge-cases-2-primaries]_ This is the default read mode. If the primary is unavailable, read operations produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:42
# 6fd00481d0554775b469ab034a6c2410
msgid "The :readmode:`primary` read preference mode is not compatible with read preference modes that use :ref:`tag sets <replica-set-read-preference-tag-sets>`. If you specify a tag set with :readmode:`primary`, the driver will produce an error."
msgstr ""

#: ../source/reference/read-preference.txt:49
# f514b0ed2ec14176ba46967a9e3b2c3a
msgid "In most situations, operations read from the :term:`primary` member of the set. However, if the primary is unavailable, as is the case during :term:`failover` situations, operations read from secondary members."
msgstr ""

#: ../source/reference/read-preference.txt:54
# 906774df67b9471ea58c1f95332fdb4f
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client reads first from the primary, if available, and then from :term:`secondaries <secondary>` that match the specified tags. If no secondaries have matching tags, the read operation produces an error."
msgstr ""

#: ../source/reference/read-preference.txt:60
# 07f246d336884eb6adc87fed8aae75d6
msgid "Since the application may receive data from a secondary, read operations using the :readmode:`primaryPreferred` mode may return stale data in some situations."
msgstr ""

#: ../source/reference/read-preference.txt:66
# 7266c9a504f644b6acede31adbc8c667
msgid "Operations read *only* from the :term:`secondary` members of the set. If no secondaries are available, then this read operation produces an error or exception."
msgstr ""

#: ../source/reference/read-preference.txt:70
# dc6a49de21db49bdb21c63d346d998c0
msgid "Most sets have at least one secondary, but there are situations where there may be no available secondary. For example, a set with a primary, a secondary, and an :term:`arbiter` may not have any secondaries if a member is in recovering state or unavailable."
msgstr ""

#: ../source/reference/read-preference.txt:75
# c63b51b82ad340a68cfb55f9e21f6ad2
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find secondary members that match the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the read operation produces an error. [#capacity-planning]_"
msgstr ""

#: ../source/reference/read-preference.txt:83
# 92ea603d94d1478e93747f968d7138e7
msgid "Read operations using the :readmode:`secondary` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:87
# b08a641b825e42a2b602d9a8d5ee29b4
msgid "In most situations, operations read from :term:`secondary` members, but in situations where the set consists of a single :term:`primary` (and no other members), the read operation will use the set's primary."
msgstr ""

#: ../source/reference/read-preference.txt:92
# a7f3643f4c0d450191e73aa7a2d7a84b
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a secondary member that matches the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the client ignores tags and reads from the primary."
msgstr ""

#: ../source/reference/read-preference.txt:99
# 4c3db4bb76a54c57be357b80bd3e7156
msgid "Read operations using the :readmode:`secondaryPreferred` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:104
# 990de1b74d10499f82046e10dfb10961
msgid "The driver reads from the *nearest* member of the :term:`set <replica set>` according to the :ref:`member selection <replica-set-read-preference-behavior-nearest>` process. Reads in the :readmode:`nearest` mode do not consider the member's *type*. Reads in :readmode:`nearest` mode may read from both primaries and secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:111
# bf4c2f266eb64533a4cf694b2b0db9bb
msgid "Set this mode to minimize the effect of network latency on read operations without preference for current or stale data."
msgstr ""

#: ../source/reference/read-preference.txt:114
# 7c68106903bd400793b0535f9d19bd4b
msgid "If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a replica set member that matches the specified tag set and directs reads to an arbitrary member from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/reference/read-preference.txt:120
# 3c1fec9c462b4a74a23cc1554f270685
msgid "Read operations using the :readmode:`nearest` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:125
# fd79b83944ce4815ad4aa8189013a321
msgid "All operations read from a member of the nearest group of the replica set that matches the specified read preference mode. The :readmode:`nearest` mode prefers low latency reads over a member's :term:`primary` or :term:`secondary` status."
msgstr ""

#: ../source/reference/read-preference.txt:130
# b3336263d2ec461d983f9d0204b44193
msgid "For :readmode:`nearest`, the client assembles a list of acceptable hosts based on tag set and then narrows that list to the host with the shortest ping time and all other members of the set that are within the \"local threshold,\" or acceptable latency. See :ref:`replica-set-read-preference-behavior-nearest` for more information."
msgstr ""

#: ../source/reference/read-preference.txt:138
# f5032298c2e245e097a149f57a331b1f
msgid "Use Cases"
msgstr ""

#: ../source/reference/read-preference.txt:140
# cdb99ce594f64d9eb921229401a2f075
msgid "Depending on the requirements of an application, you can configure different applications to use different read preferences, or use different read preferences for different queries in the same application. Consider the following applications for different read preference strategies."
msgstr ""

#: ../source/reference/read-preference.txt:149
# 78d1b51a624947aa82380d074d2e0f6d
msgid "Maximize Consistency"
msgstr ""

#: ../source/reference/read-preference.txt:151
# d39c7817a70e42eea8a617e4e33009cc
msgid "To avoid *stale* reads, use :readmode:`primary` read preference and :readconcern:`\"majority\"` ``readConcern``. If the primary is unavailable, e.g. during elections or when a majority of the replica set is not accessible, read operations using :readmode:`primary` read preference produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:159
# d4297bee1c2d450b935dd0a5d8f5ad28
msgid "In some circumstances, it may be possible for a replica set to temporarily have two primaries; however, only one primary will be capable of confirming writes with the :writeconcern:`\"majority\"` write concern."
msgstr ""

#: ../source/reference/read-preference.txt:164
# 03310db92b464eff8598aa010921b001
msgid "A partial :term:`network partition` may segregate a primary (``p``\\ :sub:`old`) into a partition with a minority of the nodes, while the other side of the partition contains a majority of nodes. The partition with the majority will elect a new primary (``P``\\ :sub:`new`), but for a brief period, the old primary (``p``\\ :sub:`old`) may still continue to serve reads and writes, as it has not yet detected that it can only see a minority of nodes in the replica set. During this period, if the old primary (``p``\\ :sub:`old`) is still visible to clients as a primary, reads from this primary may reflect stale data."
msgstr ""

#: ../source/reference/read-preference.txt:175
# d546a40bdc8b448ba2acab9485005d74
msgid "A primary (``p``\\ :sub:`old`) may become unresponsive, which will trigger an election and a new primary (``P``\\ :sub:`new`) can be elected, serving reads and writes. If the unresponsive primary (``p``\\ :sub:`old`) starts responding again, two primaries will be visible for a brief period. The brief period will end when ``p``\\ :sub:`old` steps down. However, during the brief period, clients might read from the old primary ``p``\\ :sub:`old`, which can provide stale data."
msgstr ""

#: ../source/reference/read-preference.txt:184
# 4cf15ea30d8043e19437c9eadab31ea8
msgid "To increase consistency, you can disable automatic :term:`failover`; however, disabling automatic failover sacrifices availability."
msgstr ""

#: ../source/reference/read-preference.txt:188
# 675a34374b75402999a2363d067d3054
msgid "Maximize Availability"
msgstr ""

#: ../source/reference/read-preference.txt:190
# 8e282ea0fe2d473a89f654fbb70dab77
msgid "To permit read operations when possible, use :readmode:`primaryPreferred`. When there's a primary you will get consistent reads [#edge-cases-2-primaries]_, but if there is no primary you can still query :term:`secondaries <secondary>`. However, when using this read mode, consider the situation described in :ref:`caveat-secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:198
# 6f4cb14d30ce40a6b5bf6a2341687c3f
msgid "Minimize Latency"
msgstr ""

#: ../source/reference/read-preference.txt:200
# 672d64cfad1a4d268409ef77c65a6c3e
msgid "To always read from a low-latency node, use :readmode:`nearest`. The driver or :program:`mongos` will read from the nearest member and those no more than 15 milliseconds [#secondary-acceptable-latency]_ further away than the nearest member."
msgstr ""

#: ../source/reference/read-preference.txt:205
# e87065c877b2445eaf85c08ce6aece9e
msgid ":readmode:`nearest` does *not* guarantee consistency. If the nearest member to your application server is a secondary with some replication lag, queries could return stale data. :readmode:`nearest` only reflects network distance and does not reflect I/O or CPU load."
msgstr ""

#: ../source/reference/read-preference.txt:211
# ab8e19e25e3b465ab1b998e2d6bebd93
msgid "Query From Geographically Distributed Members"
msgstr ""

#: ../source/reference/read-preference.txt:213
# e8526f2034e84a1184b1d3580cb41e81
msgid "If the members of a replica set are geographically distributed, you can create replica tags based that reflect the location of the instance and then configure your application to query the members nearby."
msgstr ""

#: ../source/reference/read-preference.txt:217
# bd2f56a488cd43b2a644bdf4f9e2dc5e
msgid "For example, if members in \"east\" and \"west\" data centers are :ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and ``{'dc': 'west'}``, your application servers in the east data center can read from nearby members with the following read preference:"
msgstr ""

#: ../source/reference/read-preference.txt:227
# cd2aa74c8325477090a84e20cd652320
msgid "Although :readmode:`nearest` already favors members with low network latency, including the tag makes the choice more predictable."
msgstr ""

#: ../source/reference/read-preference.txt:233
# e19124cba6b5418e981a2e72076b7671
msgid "``secondary`` vs ``secondaryPreferred``"
msgstr ""

#: ../source/reference/read-preference.txt:235
# e8cf089a711e47eea6d5b9d50654acbd
msgid "For specific dedicated queries (e.g. ETL, reporting), you may shift the read load from the primary by using the :readmode:`secondary` read preference mode. For this use case, the :readmode:`secondary` mode is preferable to the :readmode:`secondaryPreferred` mode because :readmode:`secondaryPreferred` risks the following situation: if all secondaries are unavailable and your replica set has enough :term:`arbiters <arbiter>` [#arbiter-limit]_ to prevent the primary from stepping down, then the primary will receive all traffic from the clients. If the primary is unable to handle this load, the queries will compete with the writes. For this reason, use read preference :readmode:`secondary` to distribute these specific dedicated queries instead of :readmode:`secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:249
# d15e01531af841b881830bfb100bf39e
msgid "In general, avoid deploying more than one arbiter per replica set."
msgstr ""

#: ../source/reference/read-preference.txt:252
# 17220e805eed48a0b9edf84e3a76f31a
msgid "Read Preferences for Database Commands"
msgstr ""

#: ../source/reference/read-preference.txt:254
# 4eea250ab3754bde9693aff72ff1d426
msgid "Because some :term:`database commands <database command>` read and return data from the database, all of the official drivers support full :ref:`read preference mode semantics <replica-set-read-preference-modes>` for the following commands:"
msgstr ""

#: ../source/reference/read-preference.txt:259
# 2813353b44114a0d8ccabd2e566f6d8d
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-preference.txt:260
# 0c474fdf0eae4473825238824d999f12
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

#: ../source/reference/read-preference.txt:261
# 0c8a39a5ec39433d8858c9e1f0fe1cd4
msgid ":dbcommand:`aggregate` [#aggregation-out]_"
msgstr ""

#: ../source/reference/read-preference.txt:262
# 1d07bb83830f467e9777b4a8c2c069d5
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/reference/read-preference.txt:263
# 194cc4d2d4ef41d897f006fad9d5d4c4
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/reference/read-preference.txt:264
# 198fc7e5fa07460b916029e612e4e90d
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-preference.txt:265
# fa9ae4b382574491aaa620830104d9cc
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-preference.txt:266
# ec081eb0c5d44ec2aa7c2935fa345831
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-preference.txt:267
# 32e5b780cd284e809335b8c89f0f0af5
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-preference.txt:268
# e268939302fc4c9e87c2e34b0ca1757d
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

#: ../source/reference/read-preference.txt:270
# 1e2de1a83db44d27a1c9d0286ed92ca4
msgid ":program:`mongos` adds support for routing commands to shards using read preferences. Previously :program:`mongos` sent all commands to shards' primaries."
msgstr ""

#: ../source/reference/read-preference.txt:275
# ae8e361ba5eb4dcc80d1d0e2bd936fdb
msgid "If your set has more than one secondary, and you use the :readmode:`secondary` read preference mode, consider the following effect. If you have a :ref:`three member replica set <replica-set-three-members>` with a primary and two secondaries, and one secondary becomes unavailable, all :readmode:`secondary` queries must target the remaining secondary. This will double the load on this secondary. Plan and provide capacity to support this as needed."
msgstr ""

#: ../source/reference/read-preference.txt:284
# d3eec8ded6b2482bb89c4f149f81942e
msgid "This threshold is configurable. See :setting:`~replication.localPingThresholdMs` for :program:`mongos` or your driver documentation for the appropriate setting."
msgstr ""

#: ../source/reference/read-preference.txt:288
# 5ae615b550074577a257ddfcff55874d
msgid "Only \"inline\" :dbcommand:`mapReduce` operations that do not write data support read preference, otherwise these operations must run on the :term:`primary` members."
msgstr ""

#: ../source/reference/read-preference.txt:293
# 253aab9b22be4860a2d774cc6fc6039f
msgid "Using the ``$out`` pipeline operator forces the aggregation pipeline to run on the primary."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# db4b969917f9453bb2c46582ad6b58ba
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""

#: ../source/reference/read-preference.txt:27
#: ../source/reference/read-preference.txt:29
# e131e9dea93c465a9dbe12649200cbc7
# 993bba26c7274a439afb5ff357457574
msgid "read preference"
msgstr ""

#: ../source/reference/read-preference.txt:27
# e131e9dea93c465a9dbe12649200cbc7
msgid "semantics"
msgstr ""

#: ../source/reference/read-preference.txt:29
# 993bba26c7274a439afb5ff357457574
msgid "modes"
msgstr ""


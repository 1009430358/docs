# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/read-preference.txt:3
# 9d41f3beed2f48fca3bb6af07a6dc001
msgid "Read Preference Reference"
msgstr ""

#: ../source/includes/introduction-read-preference.rst:1
# 60746080c509493180c214a38361bfac
msgid "Read preference describes how MongoDB clients route read operations to the members of a :term:`replica set`."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:6
# d89d958cfe4d475abb89ea24b0b57a30
msgid "By default, an application directs its read operations to the :term:`primary` member in a :term:`replica set`. Because write operations are issued to the single primary, reading from the primary returns the latest version of a document [#edge-cases-2-primaries]_."
msgstr ""

#: ../source/includes/introduction-read-preference.rst:11
# 3685bb98d155462aa575f6aee03ad68c
msgid "For an application that does not require fully up-to-date data, you can improve read throughput or reduce latency by distributing some or all reads to secondary members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:5
# 821399b02f3e4e229abdcbacaf04588e
msgid "Read Preference Mode"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:6
# 31174221ac744f31bdb7cf23c2b55eb0
msgid "Description"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:7
# 039959a2c7474ea9b58027eeb6780272
msgid ":readmode:`primary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:8
# f4c7f69003ca4786a98e6de16f8bde39
msgid "Default mode. All operations read from the current replica set :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:10
# 9795f4d2702d452da3bf902bbf18f4de
msgid ":readmode:`primaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:11
# bedc9f3feef842d381561d35df5c31d9
msgid "In most situations, operations read from the :term:`primary` but if it is unavailable, operations read from :term:`secondary` members."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:14
# ebea8095da9943f9a0e455e7bcfba0ae
msgid ":readmode:`secondary`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:15
# 168e7ede81c54e7b806e8a0c8d2effdd
msgid "All operations read from the :term:`secondary` members of the replica set."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:17
# 22ed42dce36e45218b22d6236b02feeb
msgid ":readmode:`secondaryPreferred`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:18
# af1a290d705649e183067cd29a2866ad
msgid "In most situations, operations read from :term:`secondary` members but if no :term:`secondary` members are available, operations read from the :term:`primary`."
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:21
# b35e97032de8408e8d516b63e15058c5
msgid ":readmode:`nearest`"
msgstr ""

#: ../source/includes/read-preference-modes-table.rst:22
# 43f4d89f536d4e8b81501cee97e22187
msgid "Operations read from member of the :term:`replica set` with the least network latency, irrespective of the member's type."
msgstr ""

#: ../source/reference/read-preference.txt:13
# d2d671ce03be4dce97d34d2c937e5d2c
msgid "The read preference does not affect the visibility of data; i.e, clients can see the results of writes before they are made durable:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# 626aa20c3dbe478d808662db90c6cba5
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients can see the result of the write operations before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:5
# 8312cd09f64f4a3ab483f98ae9fd9445
msgid "Clients can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/reference/read-preference.txt:24
# 8e92666c99be4c26b519628166d77b85
msgid "Read Preference Modes"
msgstr ""

#: ../source/reference/read-preference.txt:28
# 0d7d9ceaf5984faea4febf8185ba1e40
msgid "All read operations use only the current replica set :term:`primary`. [#edge-cases-2-primaries]_ This is the default read mode. If the primary is unavailable, read operations produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:33
# 13e8f087326e42da814c587bc34af006
msgid "The :readmode:`primary` read preference mode is not compatible with read preference modes that use :ref:`tag sets <replica-set-read-preference-tag-sets>`. If you specify a tag set with :readmode:`primary`, the driver will produce an error."
msgstr ""

#: ../source/reference/read-preference.txt:40
# 2990bb28ec0846a49238f62ce143f74c
msgid "In most situations, operations read from the :term:`primary` member of the set. However, if the primary is unavailable, as is the case during :term:`failover` situations, operations read from secondary members."
msgstr ""

#: ../source/reference/read-preference.txt:45
# f2844d2522044d9a8e0c4cc8a791957a
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client reads first from the primary, if available, and then from :term:`secondaries <secondary>` that match the specified tags. If no secondaries have matching tags, the read operation produces an error."
msgstr ""

#: ../source/reference/read-preference.txt:51
# d287f278755045d49992515cfd8fa559
msgid "Since the application may receive data from a secondary, read operations using the :readmode:`primaryPreferred` mode may return stale data in some situations."
msgstr ""

#: ../source/reference/read-preference.txt:57
# 4221bb1434744987b87a1e8f91b68aec
msgid ":program:`mongos` added full support for read preferences."
msgstr ""

#: ../source/reference/read-preference.txt:60
# 4fa05d92da4149d6891d0e95f6142a04
msgid "When connecting to a :program:`mongos` instance older than 2.2, using a client that supports read preference modes, :readmode:`primaryPreferred` will send queries to secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:66
# ca975b4f6ae74270b6e69a0c020cc196
msgid "Operations read *only* from the :term:`secondary` members of the set. If no secondaries are available, then this read operation produces an error or exception."
msgstr ""

#: ../source/reference/read-preference.txt:70
# 69a8d55f562744808f47cd1f8ac916ed
msgid "Most sets have at least one secondary, but there are situations where there may be no available secondary. For example, a set with a primary, a secondary, and an :term:`arbiter` may not have any secondaries if a member is in recovering state or unavailable."
msgstr ""

#: ../source/reference/read-preference.txt:75
# 42f19c977db24a4ca25c1724e8078d36
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find secondary members that match the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the read operation produces an error. [#capacity-planning]_"
msgstr ""

#: ../source/reference/read-preference.txt:83
# 1fee6806fcf641499487b56bbe2a0dc7
msgid "Read operations using the :readmode:`secondary` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:87
# 915ceae1148641c1b7acf7e1398fec57
msgid "In most situations, operations read from :term:`secondary` members, but in situations where the set consists of a single :term:`primary` (and no other members), the read operation will use the set's primary."
msgstr ""

#: ../source/reference/read-preference.txt:92
# 39383043cc80459d87709bbab5d318eb
msgid "When the read preference includes a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a secondary member that matches the specified tag set and directs reads to a random secondary from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`. If no secondaries have matching tags, the client ignores tags and reads from the primary."
msgstr ""

#: ../source/reference/read-preference.txt:99
# 7a9e561616144e42a0450266ac5e0cce
msgid "Read operations using the :readmode:`secondaryPreferred` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:104
# 2e0a0715ab47486c8fee943752ffb7f8
msgid "The driver reads from the *nearest* member of the :term:`set <replica set>` according to the :ref:`member selection <replica-set-read-preference-behavior-nearest>` process. Reads in the :readmode:`nearest` mode do not consider the member's *type*. Reads in :readmode:`nearest` mode may read from both primaries and secondaries."
msgstr ""

#: ../source/reference/read-preference.txt:111
# 812ccf8c94e143ba82b83cdae94cbe88
msgid "Set this mode to minimize the effect of network latency on read operations without preference for current or stale data."
msgstr ""

#: ../source/reference/read-preference.txt:114
# 88311c3b96a642a9854ec74e8a85d825
msgid "If you specify a :ref:`tag set <replica-set-read-preference-tag-sets>`, the client attempts to find a replica set member that matches the specified tag set and directs reads to an arbitrary member from among the :ref:`nearest group <replica-set-read-preference-behavior-nearest>`."
msgstr ""

#: ../source/reference/read-preference.txt:120
# bdb42fbd2cee4d55bb4de2e2b87ea127
msgid "Read operations using the :readmode:`nearest` mode may return stale data."
msgstr ""

#: ../source/reference/read-preference.txt:125
# 0383585d395340178a8cf7f0ffd5b1f4
msgid "All operations read from a member of the nearest group of the replica set that matches the specified read preference mode. The :readmode:`nearest` mode prefers low latency reads over a member's :term:`primary` or :term:`secondary` status."
msgstr ""

#: ../source/reference/read-preference.txt:130
# 85f9e63a47d74824bd09c419c73f841d
msgid "For :readmode:`nearest`, the client assembles a list of acceptable hosts based on tag set and then narrows that list to the host with the shortest ping time and all other members of the set that are within the \"local threshold,\" or acceptable latency. See :ref:`replica-set-read-preference-behavior-nearest` for more information."
msgstr ""

#: ../source/reference/read-preference.txt:138
# d105172f3f4842079d9eaca3686f54bf
msgid "Use Cases"
msgstr ""

#: ../source/reference/read-preference.txt:140
# 55e231700e4a4415aca5c7cf74cbe83e
msgid "Depending on the requirements of an application, you can configure different applications to use different read preferences, or use different read preferences for different queries in the same application. Consider the following applications for different read preference strategies."
msgstr ""

#: ../source/reference/read-preference.txt:149
# 819885f0440f45619df47faaecdbb23f
msgid "Maximize Consistency"
msgstr ""

#: ../source/reference/read-preference.txt:151
# 67a8bcab2a094c0d8095c01b9d19f087
msgid "To avoid *stale* reads, use :readmode:`primary` read preference. If the primary is unavailable, e.g. during elections or when a majority of the replica set is not accessible, read operations produce an error or throw an exception."
msgstr ""

#: ../source/reference/read-preference.txt:156
# ba806195c296404d80c6795dc45d01f4
msgid "In some rare edge cases, it may be possible for a replica set to temporarily have two primaries. For example,"
msgstr ""

#: ../source/reference/read-preference.txt:159
# 2098d22118f0404995bfb86151c0efb9
msgid "A partial :term:`network partition` may segregate a primary (``p``\\ :sub:`old`) into a partition with a minority of the nodes, while the other side of the partition contains a majority of nodes. The partition with the majority will elect a new primary (``P``\\ :sub:`new`), but for a brief period, the old primary (``p``\\ :sub:`old`) may still continue to serve reads and writes, as it has not yet detected that it can only see a minority of nodes in the replica set. During this period, if the old primary (``p``\\ :sub:`old`) is still visible to clients as a primary, reads from this primary may reflect stale data."
msgstr ""

#: ../source/reference/read-preference.txt:170
# 35e62b2b3577439da0e20b7f2c6ccb9a
msgid "A primary (``p``\\ :sub:`old`) may become unresponsive, which will trigger an election and a new primary (``P``\\ :sub:`new`) can be elected, serving reads and writes. If the unresponsive primary (``p``\\ :sub:`old`) starts responding again, two primaries will be visible for a brief period. The brief period will end when ``p``\\ :sub:`old` steps down. However, during the brief period, clients might read from the old primary ``p``\\ :sub:`old`, which can provide stale data."
msgstr ""

#: ../source/reference/read-preference.txt:179
# ee8afee5496d46fc86363002c9475c8e
msgid "To increase consistency, you can disable automatic :term:`failover`; however, disabling automatic failover sacrifices availability."
msgstr ""

#: ../source/reference/read-preference.txt:183
# ba7e9ec624cd41ea81f2ae9985a8bc7c
msgid "Maximize Availability"
msgstr ""

#: ../source/reference/read-preference.txt:185
# cc534784b06d4cd6a2be5ea1ccca3070
msgid "To permit read operations when possible, use :readmode:`primaryPreferred`. When there's a primary you will get consistent reads [#edge-cases-2-primaries]_, but if there is no primary you can still query :term:`secondaries <secondary>`. However, when using this read mode, consider the situation described in :ref:`caveat-secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:193
# adf651aa8ca648bdbb68dfd449c7541a
msgid "Minimize Latency"
msgstr ""

#: ../source/reference/read-preference.txt:195
# a5052e79aa5b422eb82f582596aa9b5f
msgid "To always read from a low-latency node, use :readmode:`nearest`. The driver or :program:`mongos` will read from the nearest member and those no more than 15 milliseconds [#secondary-acceptable-latency]_ further away than the nearest member."
msgstr ""

#: ../source/reference/read-preference.txt:200
# 948a41dcc583406f97edcdf016cb0da1
msgid ":readmode:`nearest` does *not* guarantee consistency. If the nearest member to your application server is a secondary with some replication lag, queries could return stale data. :readmode:`nearest` only reflects network distance and does not reflect I/O or CPU load."
msgstr ""

#: ../source/reference/read-preference.txt:206
# 3c2b1d6f56a34709ad12754706b6a2d2
msgid "Query From Geographically Distributed Members"
msgstr ""

#: ../source/reference/read-preference.txt:208
# 86775a9d77e14c09817382d53cca3ad4
msgid "If the members of a replica set are geographically distributed, you can create replica tags based that reflect the location of the instance and then configure your application to query the members nearby."
msgstr ""

#: ../source/reference/read-preference.txt:212
# 6e16e91e8b89420498355ef47bd5207f
msgid "For example, if members in \"east\" and \"west\" data centers are :ref:`tagged <replica-set-configuration-tag-sets>` ``{'dc': 'east'}`` and ``{'dc': 'west'}``, your application servers in the east data center can read from nearby members with the following read preference:"
msgstr ""

#: ../source/reference/read-preference.txt:222
# 8f7e65d2d96442f1bdc851d73eba9975
msgid "Although :readmode:`nearest` already favors members with low network latency, including the tag makes the choice more predictable."
msgstr ""

#: ../source/reference/read-preference.txt:228
# 8784aeeb80b14b66a4c2f2f1d79c8afc
msgid "Reduce load on the primary"
msgstr ""

#: ../source/reference/read-preference.txt:230
# c386a99bb35d4120a7f54e64e9db900c
msgid "To shift read load from the primary, use mode :readmode:`secondary`. Although :readmode:`secondaryPreferred` is tempting for this use case, it carries some risk: if all secondaries are unavailable and your set has enough :term:`arbiters <arbiter>` to prevent the primary from stepping down, then the primary will receive all traffic from clients. If the primary is unable to handle this load, queries will compete with writes. For this reason, use :readmode:`secondary` to distribute read load to replica sets, not :readmode:`secondaryPreferred`."
msgstr ""

#: ../source/reference/read-preference.txt:240
# d29b8cb27fa0453db573df043b79e235
msgid "Read Preferences for Database Commands"
msgstr ""

#: ../source/reference/read-preference.txt:242
# c8465f7c5bc24de482aee773002d151a
msgid "Because some :term:`database commands <database command>` read and return data from the database, all of the official drivers support full :ref:`read preference mode semantics <replica-set-read-preference-modes>` for the following commands:"
msgstr ""

#: ../source/reference/read-preference.txt:247
# 3ef137ea9edd4da3be23c3437cb81264
msgid ":dbcommand:`group`"
msgstr ""

#: ../source/reference/read-preference.txt:248
# 431dec7060b84516961eb27b10175dc6
msgid ":dbcommand:`mapReduce` [#inline-map-reduce]_"
msgstr ""

#: ../source/reference/read-preference.txt:249
# ad6590ef53ea4c09a687d42f2c4d9877
msgid ":dbcommand:`aggregate` [#aggregation-out]_"
msgstr ""

#: ../source/reference/read-preference.txt:250
# 642bb482c9374f33b07b8452e3884e3b
msgid ":dbcommand:`collStats`"
msgstr ""

#: ../source/reference/read-preference.txt:251
# 5a8c12748574495f8b874a9dd2b2cc8a
msgid ":dbcommand:`dbStats`"
msgstr ""

#: ../source/reference/read-preference.txt:252
# a5c0a2cddd444744a3eb8c5349f51302
msgid ":dbcommand:`count`"
msgstr ""

#: ../source/reference/read-preference.txt:253
# bcf5890cb4b841f1ba164e225939fc9e
msgid ":dbcommand:`distinct`"
msgstr ""

#: ../source/reference/read-preference.txt:254
# a8becf70a8f6473fa3f74c981fda53e3
msgid ":dbcommand:`geoNear`"
msgstr ""

#: ../source/reference/read-preference.txt:255
# 5f61fef748e5481f821498a4999d3d5a
msgid ":dbcommand:`geoSearch`"
msgstr ""

#: ../source/reference/read-preference.txt:256
# 80a0bcfbe9a84ae5ab27c1240988c5f8
msgid ":dbcommand:`geoWalk`"
msgstr ""

#: ../source/reference/read-preference.txt:257
# ec29d3135d254ca5b5269b84caa166fa
msgid ":dbcommand:`parallelCollectionScan`"
msgstr ""

#: ../source/reference/read-preference.txt:259
# e278a626de0b4477afb79666ddf9938a
msgid ":program:`mongos` adds support for routing commands to shards using read preferences. Previously :program:`mongos` sent all commands to shards' primaries."
msgstr ""

#: ../source/reference/read-preference.txt:264
# 8e4bebef1c78486ebc2f9b0521325be2
msgid "If your set has more than one secondary, and you use the :readmode:`secondary` read preference mode, consider the following effect. If you have a :ref:`three member replica set <replica-set-three-members>` with a primary and two secondaries, and one secondary becomes unavailable, all :readmode:`secondary` queries must target the remaining secondary. This will double the load on this secondary. Plan and provide capacity to support this as needed."
msgstr ""

#: ../source/reference/read-preference.txt:273
# 9961ef7e44314c568908a66e9fe3b0ab
msgid "This threshold is configurable. See :setting:`~replication.localPingThresholdMs` for :program:`mongos` or your driver documentation for the appropriate setting."
msgstr ""

#: ../source/reference/read-preference.txt:277
# eae7d15bf8114cf290c249d74aff8c25
msgid "Only \"inline\" :dbcommand:`mapReduce` operations that do not write data support read preference, otherwise these operations must run on the :term:`primary` members."
msgstr ""

#: ../source/reference/read-preference.txt:282
# cda7df675872425f8bf387783582242a
msgid "Using the ``$out`` pipeline operator forces the aggregation pipeline to run on the primary."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 53e11e912c2140baa974e3d07d797a96
msgid "In some circumstances, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :ref:`{w: majority} write concern <wc-w>`. The node that can complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`."
msgstr ""

#: ../source/reference/read-preference.txt:18
#: ../source/reference/read-preference.txt:20
# ded628c2192c42d58a70846caa1e868e
# 00a387b3917947349126643635fd667b
msgid "read preference"
msgstr ""

#: ../source/reference/read-preference.txt:18
# ded628c2192c42d58a70846caa1e868e
msgid "semantics"
msgstr ""

#: ../source/reference/read-preference.txt:20
# 00a387b3917947349126643635fd667b
msgid "modes"
msgstr ""


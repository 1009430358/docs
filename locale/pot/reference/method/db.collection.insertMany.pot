# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/method/db.collection.insertMany.txt:3
# cba8c8bca4cf47faaca6db70552111ba
msgid "db.collection.insertMany()"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:0
# d66924bc24f44def9fccc2f9059e9100
msgid "On this page"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:14
# 1d3af90ded614a9b8989fb82eab2d6bb
msgid "Definition"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:20
# 4fe10aadba9c4d06b2e4a1148f4630ab
msgid "Inserts multiple documents into a collection."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:22
# 53be0e96810d4057b5f622e116b70725
msgid "The :method:`~db.collection.insertMany()` method has the following syntax:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:37
# 8a9d5d31f95c4eaf9327dda8b11a3df8
msgid "A document containing:  - A boolean ``acknowledged`` as ``true`` if the operation ran with   :term:`write concern` or ``false`` if write concern was disabled  - An array of ``_id`` for each successfully inserted documents"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:39
# 1ba70c74e0af47ac9b3549c7deda906c
msgid "A document containing:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:41
# c52e3fc196aa46adad19d5e9a857e4f1
msgid "A boolean ``acknowledged`` as ``true`` if the operation ran with :term:`write concern` or ``false`` if write concern was disabled"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:44
# 1303210531e843fbacd32c032885fada
msgid "An array of ``_id`` for each successfully inserted documents"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:47
# 70ee9dc12c134c8182e637ec39c33b3a
msgid "Behaviors"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:49
# caacfa8ebb1944aba6442b2b971532fe
msgid "Given an array of documents, :method:`~db.collection.insertMany()` inserts each document in the array into the collection."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:53
# 30661e12fc344cc8b49ce0a002c62b37
msgid "Execution of Operations"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:55
# 22c246fc10a74af6aa7e6c1c40dbfd5b
msgid "By default documents are inserted in order."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:57
# 71c02bdc1afe490b8ab268996391152a
msgid "If ``ordered`` is set to false, documents are inserted in an unordered format and may be reordered by :program:`mongod` to increase performance. Applications should not depend on ordering of inserts if using an unordered :method:`~db.collection.insertMany()`."
msgstr ""

#: ../source/includes/fact-bulkwrite-operation-batches.rst:1
# 6dd98364567b49bfa2036ea45adbc2cf
msgid "Each group of operations can have at most :limit:`1000 operations <Write Command Operation Limit Size>`. If a group exceeds this :limit:`limit<Write Command Operation Limit Size>`, MongoDB will divide the group into smaller groups of 1000 or less. For example, if the queue consists of 2000 operations, MongoDB creates 2 groups, each with 1000 operations."
msgstr ""

#: ../source/includes/fact-bulkwrite-operation-batches.rst:8
# 0a2156ecedc944989134b8de8b654920
msgid "The sizes and grouping mechanics are internal performance details and are subject to change in future versions."
msgstr ""

#: ../source/includes/fact-bulk-operation-sharded-cluster.rst:1
# 06281b0729cc439abf7ef9927bef91ea
msgid "Executing an :method:`ordered <db.collection.initializeOrderedBulkOp()>` list of operations on a sharded collection will generally be slower than executing an :method:`unordered <db.collection.initializeUnorderedBulkOp()>` list since with an ordered list, each operation must wait for the previous operation to finish."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:68
# b716283d99be4034aad567561d72ce77
msgid "Collection Creation"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:70
# d61f33a4dbc84d1c85397c746dc41e19
msgid "If the collection does not exist, then :method:`~db.collection.insertMany()` creates the collection on successful write."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:74
# 4a6b769ca0424a76a02c3c12f1521f08
msgid "``_id`` Field"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:76
# f1723e8ad8ef408fb3ba76b47fc0474e
msgid "If the document does not specify an :term:`_id` field, then :program:`mongod` adds the ``_id`` field and assign a unique :method:`ObjectId` for the document. Most drivers create an ObjectId and insert the ``_id`` field, but the :program:`mongod` will create and populate the ``_id`` if the driver or application does not."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:83
# a8508b436d7f49df807dc9ec15529ea9
msgid "If the document contains an ``_id`` field, the ``_id`` value must be unique within the collection to avoid duplicate key error."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:87
# 646cff7a8e8449aaa1a1f8b3b0929ca7
msgid "Explainability"
msgstr ""

#: ../source/includes/fact-bulkwrite-explainable.rst:1
# 6817341866594bf7b5d861c55d405ebe
msgid "|write-method| is not compatible with :method:`db.collection.explain()`."
msgstr ""

#: ../source/includes/fact-bulkwrite-explainable.rst:6
# a1b43de016444c68bd77ed8b2a0e588b
msgid "Use |old-write-method| instead."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:99
# efbd8eef7f934448be5dce3f790c806f
msgid "Error Handling"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:101
# 512be806935048c99f0fc93bde642f66
msgid "Inserts throw a ``BulkWriteError`` exception."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:103
# 87e74803ed514c5b85fce44473c747d6
msgid "Excluding :doc:`/reference/write-concern` errors, ordered operations stop after an error, while unordered operations continue to process any remaining write operations in the queue."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:107
# 34932fcf73174ceca4dadb074f772d1c
msgid "Write concern errors are displayed in the ``writeConcernErrors`` field, while all other errors are displayed in the ``writeErrors`` field. If an error is encountered, the number of successful write operations are displayed instead of a list of inserted _ids. Ordered operations display the single error encountered while unordered operations display each error in an array."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:114
# 210fd9a30fc749089ed0ca30e3b0e65f
msgid "Examples"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:116
# eaaac7580c19479795b48eea7316068c
msgid "The following examples insert documents into the ``products`` collection."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:120
# 992a321a5b06479cb416c2bbd8a0dcf5
msgid "Insert Several Document without Specifying an ``_id`` Field"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:122
# 785d5bdbcd9a418a8dbecc57d9467834
msgid "The following example uses :method:`db.collection.insertMany()` to insert documents that do not contain the ``_id`` field:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:137
#: ../source/reference/method/db.collection.insertMany.txt:175
# b062b48b97e94393a0f0d63435fe3b7f
# d7c812e4e4b846b98efafcca2630e7c3
msgid "The operation returns the following document:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:150
# 1d19dce92a6442aea3c535bf9296f176
msgid "Because the documents did not include ``_id``, :program:`mongod` creates and adds the ``_id`` field for each document and assigns it a unique :method:`ObjectId` value."
msgstr ""

#: ../source/includes/fact-object-id-may-differ.rst:1
# ebda49e59887442e84bb58cb04bfb6f9
msgid "The ``ObjectId`` values are specific to the machine and time when the operation is run. As such, your values may differ from those in the example."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:157
# 3820a7a405514c32883eb968603606a4
msgid "Insert Several Document Specifying an ``_id`` Field"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:159
# 4b03f85ce93b4ab08dd79bb2ac53966a
msgid "The following example/operation uses :method:`~db.collection.insertMany()` to insert documents that include the ``_id`` field. The value of ``_id`` must be unique within the collection to avoid a duplicate key error."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:181
# fde4a66ad4fe4c1eb1347a0518d277b4
msgid "Inserting a duplicate value for any key that is part of a :term:`unique index`, such as ``_id``, throws an exception. The following attempts to insert a document with a ``_id`` value that already exists:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:197
# cc4d22f1a57d4d589b6338292fc566df
msgid "Since ``_id: 13`` already exists, the following exception is thrown:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:223
# 8b53d8a90eee480cb794812b15927fd8
msgid "Note that one document was inserted: The first document of ``_id: 13`` will insert successfully, but the second insert will fail. This will also stop additional documents left in the queue from being inserted."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:227
# 0a56a3590b68435b8b911d380cfff449
msgid "With ``ordered`` to ``false``, the insert operation would continue with any remaining documents."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:231
# bd4e9f98f2b647c980c39d87a2d39be4
msgid "Unordered Inserts"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:233
# 2cbe26766be64cc391c84eec42ce0fcd
msgid "The following attempts to insert multiple documents with ``_id`` field and ``ordered: false``. The array of documents contains two documents with duplicate ``_id`` fields."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:253
# b0dfb8d4e3644d2f8fb1dc4b700a597f
msgid "The operation throws the following exception:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:289
# 32ee57ab83c240eeafa7adcb49ef1e9f
msgid "While the document with ``item: \"medium box\"`` and ``item: \"tape\"`` failed to insert due to duplicate ``_id`` values, ``nInserted`` shows that the remaining 5 documents were inserted."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:296
# 44a185707fba40cebcb8699e70c44f10
msgid "Using Write Concern"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:298
# a3bd02984a8e42619f7ebce4bc6ccfa0
msgid "Given a three member replica set, the following operation specifies a ``w`` of ``majority`` and ``wtimeout`` of ``100``:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:316
# 83fae870e1af4b42aa2eb24a1155ff80
msgid "If the primary and at least one secondary acknowledge each write operation within 100 milliseconds, it returns:"
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:330
# 93af917bfe2f43298acf1d0c73b17136
msgid "If the total time required for all required nodes in the replica set to acknowledge the write operation is greater than ``wtimeout``, the following ``writeConcernError`` is displayed when the ``wtimeout`` period has passed."
msgstr ""

#: ../source/reference/method/db.collection.insertMany.txt:335
# ad53b58adf504264b4c16947b2c94a8b
msgid "This operation returns:"
msgstr ""


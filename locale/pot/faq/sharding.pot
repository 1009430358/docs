# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
# f316aa699f114cbd8dec8d04e3cd0d89
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:7
# faa7f17608ce4f2b82f4122721b86df0
msgid "This document answers common questions about horizontal scaling using MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:10
# fad79ec8e72e412e97184217e3f7de00
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:15
# c4b7795c572943619e92f18b65800cb3
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:17
# e4295acb277142ba9772d1c6c5fbc4ec
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:19
# e0ef3e84bb9a4fbca092c1d6aaf22cdc
msgid "If your data set fits on a single server, you should begin with an unsharded deployment."
msgstr ""

#: ../source/faq/sharding.txt:22
# f3d51b0975f24b1ab8b9e34da6c9029a
msgid "Converting an unsharded database to a :term:`sharded cluster` is easy and seamless, so there is *little advantage* in configuring sharding while your data set is small."
msgstr ""

#: ../source/faq/sharding.txt:26
# b149c639d455419598ef8b8777f738bc
msgid "Still, all production deployments should use :term:`replica sets <replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:30
# 28409c7717d84abeae4194eaafd42b3d
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:32
# 85e4264e663c46698a4116b5fce8f66d
msgid "To use replication with sharding, deploy each :term:`shard` as a :term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:38
# 1568c8f3a5534ddaa9addd8f0c592e83
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:40
# 598e6517345d44a58f06b42840d1a890
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:42
# 6e34dd1b5edb4b4e8276afe6dd27b1ab
msgid "There is no automatic support in MongoDB for changing a shard key after sharding a collection. This reality underscores the importance of choosing a good :ref:`shard key <shard-key>`. If you *must* change a shard key after sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:47
# 996eeafb194e4c7795977afc6ada8d61
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:49
# 2fca7af07bb74bf6b1f7b2e544f70347
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:51
# 92d845203c5f43f8840d65822cd32271
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:53
# 8e745fe5409a461e8f0596d96764017b
msgid ":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:56
# e90c23b13c9c4659836728dd1d528302
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:58
# 981f579400364561b045f21ba523f5b9
msgid "See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the :ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:64
# ea568ade9ad04f3e80e5f5512822986e
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:66
# 86b726cdcc444df281c0d622a2bb3f25
msgid "In the current implementation, all databases in a :term:`sharded cluster` have a \"primary :term:`shard`.\" All unsharded collection within that database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:71
# 6fdfd64bc49b42f189ecb99ec98642f0
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:73
# 52a763cf4ea741c6a8cdc5e54df982b3
msgid "Sharding must be specifically enabled on a collection. After enabling sharding on the collection, MongoDB will assign various ranges of collection data to the different shards in the cluster. The cluster automatically corrects imbalances between shards by migrating ranges of data from one shard to another."
msgstr ""

#: ../source/faq/sharding.txt:80
# ca82344c527f47d0b7488412def89aeb
msgid "What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:82
# 113e102bd1d748aaa82feff96808987f
msgid "The :program:`mongos` routes the operation to the \"old\" shard, where it will succeed immediately. Then the :term:`shard` :program:`mongod` instances will replicate the modification to the \"new\" shard before the :term:`sharded cluster` updates that chunk's \"ownership,\" which effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:89
# 9d496ac1a74448f49018c7680bde7c0c
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:91
# 9461395b223f41e59ea598ac08f5575e
msgid "If a :term:`shard` is inaccessible or unavailable, queries will return with an error."
msgstr ""

#: ../source/faq/sharding.txt:94
# a17dd0f9127d485cbf71ab63f779f655
msgid "However, a client may set the ``partial`` query bit, which will then return results from all available shards, regardless of whether a given shard is unavailable."
msgstr ""

#: ../source/faq/sharding.txt:98
# b62b088ee7284a1d8dda37a0fb0d6ca9
msgid "If a shard is responding slowly, :program:`mongos` will merely wait for the shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:102
# d6b4468e0dd84b97ae6581b480e9d272
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:106
# 821c70ced17a4aef979f4277e426ff16
msgid "The exact method for distributing queries to :term:`shards <shard>` in a :term:`cluster <sharded cluster>` depends on the nature of the query and the configuration of the sharded cluster. Consider a sharded collection, using the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` attributes:"
msgstr ""

#: ../source/faq/sharding.txt:112
# 3f7445b7805249489fa689cfee91a9b4
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:115
# 5dd6f079bdc94743a7909b7743733fc7
msgid ":program:`mongos` determines which shard or shards contains the relevant data, based on the cluster metadata, and directs a query to the required shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:120
# 7cdffc584748475ab17c53bbc56b98c0
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:122
# f97d9de5f28e4603a169e888b3c27ced
msgid ":program:`mongos` can make a straightforward translation of this operation into a number of queries against the relevant shards, ordered by ``user_id``. When the sorted queries return from all shards, the :program:`mongos` merges the sorted results and returns the complete result to the client."
msgstr ""

#: ../source/faq/sharding.txt:128
# e5efa555ecef4e3493e3af59ffdb77ac
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:130
# 2858919a1ab643a390488991e2c223ed
msgid "These queries must run on all shards: :program:`mongos` must parallelize the query over the shards and perform a merge-sort on the ``email`` of the documents found."
msgstr ""

#: ../source/faq/sharding.txt:135
# 9d4bd5dcac8e4bef8beda993c7648ee3
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:137
# d32500fc783c42f49d7591071ac36461
msgid "If you call the :method:`cursor.sort()` method on a query in a sharded environment, the :program:`mongod` for each shard will sort its results, and the :program:`mongos` merges each shard's results before returning them to the client."
msgstr ""

#: ../source/faq/sharding.txt:143
# 0a1d5e6290ab4e1b992b014b2c076dc6
msgid "How does MongoDB ensure unique ``_id`` field values when using a shard key *other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:145
# 99e0420befc146bbb7a907fa5f97f968
msgid "If you do not use ``_id`` as the shard key, then your application/client layer must be responsible for keeping the ``_id`` field unique. It is problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:150
# 1dd1fac1cdfb4bd0b174960d65705c59
msgid "If you're not sharding your collection by the ``_id`` field, then you should be sure to store a globally unique identifier in that field. The default :doc:`BSON ObjectId </reference/object-id>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:156
# d0c353b1b4a5498182352bff2fc99b94
msgid "I've enabled sharding and added a second shard, but all the data is still on one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:158
# 5a57a21bb0f84b8a8f03dfaad93a8d21
msgid "First, ensure that you've declared a :term:`shard key` for your collection. Until you have configured the shard key, MongoDB will not create :term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:162
# a9fd1c7dd37f4ea18867e1773081cd34
msgid "Next, keep in mind that the default chunk size is 64 MB. As a result, in most situations, the collection needs to have at least 64 MB of data before a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:166
# 950826ae8a104043803cc5826f5f476c
msgid "Additionally, the system which balances chunks among the servers attempts to avoid superfluous migrations. Depending on the number of shards, your shard key, and the amount of data, systems often require at least 10 chunks of data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:171
# 2c061f13efcc4efcbcd46c0e66d3e0a4
msgid "You can run :method:`db.printShardingStatus()` to see all the chunks present in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:175
# f2c066118330426597106bf1a1cbae1b
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:177
# 2e80a8b868344fe9bb591452411444d1
msgid "Yes. :program:`mongod` creates these files as backups during normal :term:`shard` balancing operations. If some error occurs during a :doc:`migration </core/sharding-chunk-migration>`, these files may be helpful in recovering documents affected during the migration."
msgstr ""

#: ../source/faq/sharding.txt:182
# 32305cddbe9f4c42885f3a7f5920be66
msgid "Once the migration has completed successfully and there is no need to recover documents from these files, you may safely delete these files. Or, if you have an existing backup of the database that you can use for recovery, you may also delete these files after migration."
msgstr ""

#: ../source/faq/sharding.txt:187
# 29986629757c41cc8607903c5faf6f88
msgid "To determine if all migrations are complete, run :method:`sh.isBalancerRunning()` while connected to a :program:`mongos` instance."
msgstr ""

#: ../source/faq/sharding.txt:192
# 48c80bfe19a249d5b61ee68e5ef03366
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:194
# 4495388da6f24202b2447f30dcaa81eb
msgid "Each client maintains a connection to a :program:`mongos` instance. Each :program:`mongos` instance maintains a pool of connections to the members of a replica set supporting the sharded cluster.  Clients use connections between :program:`mongos` and :program:`mongod` instances one at a time. Requests are not multiplexed or pipelined. When client requests complete, the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:202
# 29d757aed1fe4b4dbfa45009c6b952d8
msgid "See the :ref:`System Resource Utilization <system-resource-utilization>` section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:207
# 9c14dcbbfab44745a8d33f3c62be21bd
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:209
# 208ef1f2fe5c4073a3d8c3a8a75901ec
msgid ":program:`mongos` uses a set of connection pools to communicate with each :term:`shard`.  These pools do not shrink when the number of clients decreases."
msgstr ""

#: ../source/faq/sharding.txt:213
# 4fd25b6f71184b25828ee91417a16299
msgid "This can lead to an unused :program:`mongos` with a large number of open connections. If the :program:`mongos` is no longer in use, it is safe to restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:218
# 1325cbc1031149f688f0a2e892fdbfef
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:220
# f90452bc83fe43559649cac9fe84eb7f
msgid "Connect to the :program:`mongos` with the :program:`mongo` shell, and run the following command:"
msgstr ""

#: ../source/faq/sharding.txt:230
# 37092429c06347a29ca8d81f0a0eb775
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:232
# 8d8bef3600994fb4a31f825171d8aa47
msgid "The writeback listener is a process that opens a long poll to relay writes back from a :program:`mongod` or :program:`mongos` after migrations to make sure they have not gone to the wrong server.  The writeback listener sends writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:238
# b417df0e29ef4ea0a7bc282c30002463
msgid "These messages are a key part of the sharding infrastructure and should not cause concern."
msgstr ""

#: ../source/faq/sharding.txt:242
# 55c8d53148c94176a028cb204cf9e859
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:244
# 258ecccf31e74344a2b25b2b3d70ff4d
msgid "Failed migrations require no administrative intervention. Chunk migrations always preserve a consistent state. If a migration fails to complete for some reason, the :term:`cluster` retries the operation. When the migration completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:251
# b7aec1ba37114b6b8f975db6195f61be
msgid "What is the process for moving, renaming, or changing the number of config servers?"
msgstr ""

#: ../source/faq/sharding.txt:253
# 56bb678cd70f46b2a7e255c9f3a0e3e9
msgid "See :doc:`/administration/sharded-clusters` for information on migrating and replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:257
# caf630b255874b2aa66e5333d099d55b
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:259
# bc13ec77eee94971a29ec5d42e52a519
msgid ":program:`mongos` instances maintain a cache of the :term:`config database` that holds the metadata for the :term:`sharded cluster`. This metadata includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:264
# 6c2836284a42418ba797ea693a79eef1
msgid ":program:`mongos` updates its cache lazily by issuing a request to a shard and discovering that its metadata is out of date.  There is no way to control this behavior from the client, but you can run the :dbcommand:`flushRouterConfig` command against any :program:`mongos` to force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:271
# 5baebb4bfd354f9faaf2d4617ff94a4d
msgid "Is it possible to quickly update ``mongos`` servers after updating a replica set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:273
# fa845edd496f4a6d8bfa54a1de1abeb5
msgid "The :program:`mongos` instances will detect these changes without intervention over time. However, if you want to force the :program:`mongos` to reload its configuration, run the :dbcommand:`flushRouterConfig` command against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:280
# 97e77164d25748f5a13e00a4922ec13c
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:282
# bfbb173efde64bf08b3aeb90e94d64ff
msgid "The :setting:`~net.maxIncomingConnections` option limits the number of connections accepted by :program:`mongos`."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:1
# 01c3e91e676449c5bb7bcb304c41dfae
msgid "This is particularly useful for a :program:`mongos` if you have a client that creates multiple connections and allows them to timeout rather than closing them."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:5
# 36b372006e5e4c6e8fae0b2ba05b237a
msgid "In this case, set :setting:`~net.maxIncomingConnections` to a value slightly higher than the maximum number of connections that the client creates, or the maximum size of the connection pool."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:9
# 68c7cdf580df4e53b1893ebbb84b1522
msgid "This setting prevents the :program:`mongos` from causing connection spikes on the individual :term:`shards <shard>`. Spikes like these may disrupt the operation and memory allocation of the :term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:288
# 89bd82b100ab49ac874a9338610e7821
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:290
# bdf818f40c044dd78e9e827cec77caa8
msgid "If the query does not include the :term:`shard key`, the :program:`mongos` must send the query to all shards as a \"scatter/gather\" operation. Each shard will, in turn, use *either* the shard key index or another more efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:295
# 9b6a0af120874ed290cebad998cd9da0
msgid "If the query includes multiple sub-expressions that reference the fields indexed by the shard key *and* the secondary index, the :program:`mongos` can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently. See `this presentation <http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for more information."
msgstr ""

#: ../source/faq/sharding.txt:303
# 81b2fc6097ca4931abd67d2338b4083f
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:305
# 16e8df8ad9704553b9aad5f8112c57f3
msgid ":term:`Shard keys <shard key>` can be random. Random keys ensure optimal distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:308
# 2d18df9e611140b3a80c32c0ea9490bc
msgid ":term:`Sharded clusters <sharded cluster>`, attempt to route queries to *specific* shards when queries include the shard key as a parameter, because these directed queries are more efficient. In many cases, random keys can make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:317
# 24c9507b99064e01b0e0c3361b237637
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:319
# c8c83a46303c43bb8adca011c1f5564a
msgid "Yes. There is no requirement that documents be evenly distributed by the shard key."
msgstr ""

#: ../source/faq/sharding.txt:322
# 84e2bbb5f2f24ca3bca7ace00991d3e7
msgid "However, documents that have the same shard key *must* reside in the same *chunk* and therefore on the same server. If your sharded data set has too many documents with the exact same shard key you will not be able to distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:330
# c6c3f39aebf74371a090c65e85b53dd2
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:332
# 772bd59cefb0401899900f87292c1437
msgid "You can use any field for the shard key. The ``_id`` field is a common shard key."
msgstr ""

#: ../source/faq/sharding.txt:335
# 0fa9ec6acefe48399f6561f5eef6eba1
msgid "Be aware that ``ObjectId()`` values, which are the default value of the ``_id`` field, increment as a timestamp. As a result, when used as a shard key, all new documents inserted into the collection will initially belong to the same chunk on a single shard. Although the system will eventually divide this chunk and migrate its contents to distribute data more evenly, at any moment the cluster can only direct insert operations at a single shard. This can limit the throughput of inserts. If most of your write operations are updates, this limitation should not impact your performance. However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:346
# fd3bfb78a00f4b8b95f4b500d5f9120d
msgid "To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys <sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:350
# f94a769f5a354358ae2bd2af1764bb0c
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:352
# 958d441d4ae444588b87d2f38c82d4d0
msgid "At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the :term:`shard` must connect to the :term:`config database` to update the chunk's record in the cluster metadata. If the :term:`shard` fails to connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:363
# f686a7c9412d49cb8e63589e2eea9e1e
msgid "When this happens, the :term:`primary` member of the shard's replica set then terminates to protect data consistency. If a :term:`secondary` member can access the config database, data on the shard becomes accessible again after an election."
msgstr ""

#: ../source/faq/sharding.txt:368
# c4c7e1ede76f4b939d7f438a691abed9
msgid "The user will need to resolve the chunk migration failure independently. If you encounter this issue, contact the `MongoDB User Group <http://groups.google.com/group/mongodb-user>`_ or :about:`MongoDB Support </support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:374
# 7e510ff87b324b1a9f0ba9109eb003b6
msgid "How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:376
# 0ffddcd7a5c74f0e91f18d5bba6f39c2
msgid "The sharded cluster balancing process controls both migrating chunks from decommissioned shards (i.e. draining) and normal cluster balancing activities. Consider the following behaviors for different versions of MongoDB in situations where you remove a shard in a cluster with an uneven chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:382
# ac4ddca2ecd44edeb3682a5444362fd6
msgid "After MongoDB 2.2, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:386
# 1b6f41a40e5a4e3bbcd9ffaebfd26e15
msgid "Before MongoDB 2.2, the balancer handles the uneven chunk distribution and *then* removes the chunks from the draining shard."
msgstr ""


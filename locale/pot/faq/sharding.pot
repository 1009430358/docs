# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/sharding.txt:3
# bbac205b3f734112bf0c7eb7b73b35eb
msgid "FAQ: Sharding with MongoDB"
msgstr ""

#: ../source/faq/sharding.txt:0
# b48b9eb8f5a940fb9f2f8034693a968e
msgid "On this page"
msgstr ""

#: ../source/faq/sharding.txt:13
# 6f91f4af9f874017b00845ea27611fbd
msgid "This document answers common questions about horizontal scaling using MongoDB's :term:`sharding`."
msgstr ""

#: ../source/faq/sharding.txt:16
# cf4b519a37984645be74e83cacb6817d
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/sharding.txt:21
# 47379b795395492580d8a0882267534f
msgid "Is sharding appropriate for a new deployment?"
msgstr ""

#: ../source/faq/sharding.txt:23
# e71726c87fa54afbafa5fcb13edca4ee
msgid "Sometimes."
msgstr ""

#: ../source/faq/sharding.txt:25
# 85a50c374e884f5f97bb2d3f2764107e
msgid "If your data set fits on a single server, you should begin with an unsharded deployment."
msgstr ""

#: ../source/faq/sharding.txt:28
# 19a3db6025fa469c85cd85c86b6ea912
msgid "Converting an unsharded database to a :term:`sharded cluster` is easy and seamless, so there is *little advantage* in configuring sharding while your data set is small."
msgstr ""

#: ../source/faq/sharding.txt:32
# 5079222c415142afa9b3687f733cb7b2
msgid "Still, all production deployments should use :term:`replica sets <replication>` to provide high availability and disaster recovery."
msgstr ""

#: ../source/faq/sharding.txt:36
# 76dedd545ca141c9be07fb79d0f30a36
msgid "How does sharding work with replication?"
msgstr ""

#: ../source/faq/sharding.txt:38
# 3e5b66374fa6415bbc795e514dce2e65
msgid "To use replication with sharding, deploy each :term:`shard` as a :term:`replica set`."
msgstr ""

#: ../source/faq/sharding.txt:44
# 46e0612dcff24b3eb986ac768715226e
msgid "Can I change the shard key after sharding a collection?"
msgstr ""

#: ../source/faq/sharding.txt:46
# 3539a586466f404ba8eac3044628a82f
msgid "No."
msgstr ""

#: ../source/faq/sharding.txt:48
# 14410aec235041c8be4040106aa019de
msgid "There is no automatic support in MongoDB for changing a shard key after sharding a collection. This reality underscores the importance of choosing a good :ref:`shard key <shard-key>`. If you *must* change a shard key after sharding a collection, the best option is to:"
msgstr ""

#: ../source/faq/sharding.txt:53
# a04e507cdda9424fa838e07dd5302a45
msgid "dump all data from MongoDB into an external format."
msgstr ""

#: ../source/faq/sharding.txt:55
# 3b964b20b24e45f399de91b188f0492f
msgid "drop the original sharded collection."
msgstr ""

#: ../source/faq/sharding.txt:57
# 514129f02ed94ebdb58b1353914f994b
msgid "configure sharding using a more ideal shard key."
msgstr ""

#: ../source/faq/sharding.txt:59
# ccf6c10f71cc43f7bbea890998d07319
msgid ":doc:`pre-split </tutorial/create-chunks-in-sharded-cluster>` the shard key range to ensure initial even distribution."
msgstr ""

#: ../source/faq/sharding.txt:62
# 036f059b29d6437ca0a07e7e650a32bb
msgid "restore the dumped data into MongoDB."
msgstr ""

#: ../source/faq/sharding.txt:64
# da887019cf76442dace89b54910e4669
msgid "See :dbcommand:`shardCollection`, :method:`sh.shardCollection()`, the :ref:`Shard Key <sharding-internals-shard-keys>`, :doc:`/tutorial/deploy-shard-cluster`, and :issue:`SERVER-4000` for more information."
msgstr ""

#: ../source/faq/sharding.txt:70
# 8a2e59acb6f14ee68cd94960e985a1c3
msgid "What happens to unsharded collections in sharded databases?"
msgstr ""

#: ../source/faq/sharding.txt:72
# 4b3ac5dc556d4d4087a0c90dad603fdc
msgid "In the current implementation, all databases in a :term:`sharded cluster` have a \"primary :term:`shard`.\" All unsharded collection within that database will reside on the same shard."
msgstr ""

#: ../source/faq/sharding.txt:77
# a4d79fe65d8e496ab3fc2ee5d9e95137
msgid "How does MongoDB distribute data across shards?"
msgstr ""

#: ../source/faq/sharding.txt:79
# 8169aca4fded431596a726df92a5866d
msgid "Sharding must be specifically enabled on a collection. After enabling sharding on the collection, MongoDB will assign various ranges of collection data to the different shards in the cluster. The cluster automatically corrects imbalances between shards by migrating ranges of data from one shard to another."
msgstr ""

#: ../source/faq/sharding.txt:86
# c8fa18c29bdb4ee691e5a0a3d5afb974
msgid "What happens if a client updates a document in a chunk during a migration?"
msgstr ""

#: ../source/faq/sharding.txt:88
# b524c1d778b34143ac2de82285dd96e1
msgid "The :program:`mongos` routes the operation to the \"old\" shard, where it will succeed immediately. Then the :term:`shard` :program:`mongod` instances will replicate the modification to the \"new\" shard before the :term:`sharded cluster` updates that chunk's \"ownership,\" which effectively finalizes the migration process."
msgstr ""

#: ../source/faq/sharding.txt:95
# 45141b44caac44c9a6389edaea9554f9
msgid "What happens to queries if a shard is inaccessible or slow?"
msgstr ""

#: ../source/faq/sharding.txt:97
# f6b5429a761c4b649280dc8ef26eef20
msgid "If a :term:`shard` is inaccessible or unavailable, queries will return with an error."
msgstr ""

#: ../source/faq/sharding.txt:100
# 03fc4946b66445caaf5d3c90c69d1e61
msgid "However, a client may set the ``partial`` query bit, which will then return results from all available shards, regardless of whether a given shard is unavailable."
msgstr ""

#: ../source/faq/sharding.txt:104
# 8c6b9e7228994531b6566de4fb6a6601
msgid "If a shard is responding slowly, :program:`mongos` will merely wait for the shard to return results."
msgstr ""

#: ../source/faq/sharding.txt:108
# 8a322f34290c431c9ff1c366428da550
msgid "How does MongoDB distribute queries among shards?"
msgstr ""

#: ../source/faq/sharding.txt:110
# 59df97278067405b9ad40981beffa407
msgid "The exact method for distributing queries to :term:`shards <shard>` in a :term:`cluster <sharded cluster>` depends on the nature of the query and the configuration of the sharded cluster. Consider a sharded collection, using the :term:`shard key` ``user_id``, that has ``last_login`` and ``email`` attributes:"
msgstr ""

#: ../source/faq/sharding.txt:116
# 05ca2670c8434fa99a65e5b76c64d1f4
msgid "For a query that selects one or more values for the ``user_id`` key:"
msgstr ""

#: ../source/faq/sharding.txt:119
# 78041a119c5c432aba498af6cf63c657
msgid ":program:`mongos` determines which shard or shards contains the relevant data, based on the cluster metadata, and directs a query to the required shard or shards, and returns those results to the client."
msgstr ""

#: ../source/faq/sharding.txt:124
# 701eea0020714d909a19dca55401eaaa
msgid "For a query that selects ``user_id`` and also performs a sort:"
msgstr ""

#: ../source/faq/sharding.txt:126
# dd8630a48986459095185356644fa140
msgid ":program:`mongos` can make a straightforward translation of this operation into a number of queries against the relevant shards, ordered by ``user_id``. When the sorted queries return from all shards, the :program:`mongos` merges the sorted results and returns the complete result to the client."
msgstr ""

#: ../source/faq/sharding.txt:132
# efa0d95a870143f188246c882422fce9
msgid "For queries that select on ``last_login``:"
msgstr ""

#: ../source/faq/sharding.txt:134
# ec09f5387b474a569e41ecf0768d3cc1
msgid "These queries must run on all shards: :program:`mongos` must parallelize the query over the shards and perform a merge-sort on the ``email`` of the documents found."
msgstr ""

#: ../source/faq/sharding.txt:139
# 800dc1759fc34a4da560b32ddc8eba63
msgid "How does MongoDB sort queries in sharded environments?"
msgstr ""

#: ../source/faq/sharding.txt:141
# 091dc900d2c645b99c8ff761d8ce5798
msgid "If you call the :method:`cursor.sort()` method on a query in a sharded environment, the :program:`mongod` for each shard will sort its results, and the :program:`mongos` merges each shard's results before returning them to the client."
msgstr ""

#: ../source/faq/sharding.txt:147
# d16d3e0b063b4253a6058c0a5bbe5ace
msgid "How does MongoDB ensure unique ``_id`` field values when using a shard key *other* than ``_id``?"
msgstr ""

#: ../source/faq/sharding.txt:149
# 423e19343ce84392b000f48577b43223
msgid "If you do not use ``_id`` as the shard key, then your application/client layer must be responsible for keeping the ``_id`` field unique. It is problematic for collections to have duplicate ``_id`` values."
msgstr ""

#: ../source/faq/sharding.txt:154
# 59893da969a64300af996603dea6a2de
msgid "If you're not sharding your collection by the ``_id`` field, then you should be sure to store a globally unique identifier in that field. The default :ref:`BSON ObjectId <objectid>` works well in this case."
msgstr ""

#: ../source/faq/sharding.txt:160
# f153b6a5deea4b108d6aacfc20aeb5db
msgid "I've enabled sharding and added a second shard, but all the data is still on one server. Why?"
msgstr ""

#: ../source/faq/sharding.txt:162
# 1bca4a27b52d44d39ac4f631f19e9558
msgid "First, ensure that you've declared a :term:`shard key` for your collection. Until you have configured the shard key, MongoDB will not create :term:`chunks <chunk>`, and :term:`sharding` will not occur."
msgstr ""

#: ../source/faq/sharding.txt:166
# 9952e56978f644bc825b1460475a614f
msgid "Next, keep in mind that the default chunk size is 64 MB. As a result, in most situations, the collection needs to have at least 64 MB of data before a migration will occur."
msgstr ""

#: ../source/faq/sharding.txt:170
# 0d9da4391dd94e529f8471f67eec6ff2
msgid "Additionally, the system which balances chunks among the servers attempts to avoid superfluous migrations. Depending on the number of shards, your shard key, and the amount of data, systems often require at least 10 chunks of data to trigger migrations."
msgstr ""

#: ../source/faq/sharding.txt:175
# d102e09cf13f4d4999157cc7c9a64d56
msgid "You can run :method:`db.printShardingStatus()` to see all the chunks present in your cluster."
msgstr ""

#: ../source/faq/sharding.txt:179
# 0133b3e09e054ce7b5277d37098ec316
msgid "Is it safe to remove old files in the ``moveChunk`` directory?"
msgstr ""

#: ../source/faq/sharding.txt:181
# 6e61e970e70b452fa1f8b6067b34b0bf
msgid "Yes. :program:`mongod` creates these files as backups during normal :term:`shard` balancing operations. If some error occurs during a :doc:`migration </core/sharding-chunk-migration>`, these files may be helpful in recovering documents affected during the migration."
msgstr ""

#: ../source/faq/sharding.txt:186
# aa0e063de007431fa6c6a355872ed033
msgid "Once the migration has completed successfully and there is no need to recover documents from these files, you may safely delete these files. Or, if you have an existing backup of the database that you can use for recovery, you may also delete these files after migration."
msgstr ""

#: ../source/faq/sharding.txt:191
# 52c5100f55d944e486606728756698cf
msgid "To determine if all migrations are complete, run :method:`sh.isBalancerRunning()` while connected to a :program:`mongos` instance."
msgstr ""

#: ../source/faq/sharding.txt:196
# 160afe45c76d4e5a84d9ba0ff518cf6d
msgid "How does ``mongos`` use connections?"
msgstr ""

#: ../source/faq/sharding.txt:198
# b7371fe31fc24fefbc7295e18cb89734
msgid "Each client maintains a connection to a :program:`mongos` instance. Each :program:`mongos` instance maintains a pool of connections to the members of a replica set supporting the sharded cluster.  Clients use connections between :program:`mongos` and :program:`mongod` instances one at a time. Requests are not multiplexed or pipelined. When client requests complete, the :program:`mongos` returns the connection to the pool."
msgstr ""

#: ../source/faq/sharding.txt:206
# bb0d0460220f4b6f89705a40637c7e1e
msgid "See the :ref:`System Resource Utilization <system-resource-utilization>` section of the :doc:`/reference/ulimit` document."
msgstr ""

#: ../source/faq/sharding.txt:211
# 5310fa466cdc41a182aa24631fceb7d8
msgid "Why does ``mongos`` hold connections open?"
msgstr ""

#: ../source/faq/sharding.txt:213
# f7e219759742498fa1e3bafec806ef85
msgid ":program:`mongos` uses a set of connection pools to communicate with each :term:`shard`.  These pools do not shrink when the number of clients decreases."
msgstr ""

#: ../source/faq/sharding.txt:217
# ed602cac4a444c36afc9a033f32533c5
msgid "This can lead to an unused :program:`mongos` with a large number of open connections. If the :program:`mongos` is no longer in use, it is safe to restart the process to close existing connections."
msgstr ""

#: ../source/faq/sharding.txt:222
# 4f58ad728b7e4da7a91d823115e19569
msgid "Where does MongoDB report on connections used by ``mongos``?"
msgstr ""

#: ../source/faq/sharding.txt:224
# ce4343e3abfc462c84bc72b43d38e35f
msgid "Connect to the :program:`mongos` with the :program:`mongo` shell, and run the following command:"
msgstr ""

#: ../source/faq/sharding.txt:234
# bb46a67d7d4d4683b26dc4bb112d3254
msgid "What does ``writebacklisten`` in the log mean?"
msgstr ""

#: ../source/faq/sharding.txt:236
# 932e36fa6573426f82165ac8eb77fd3f
msgid "The writeback listener is a process that opens a long poll to relay writes back from a :program:`mongod` or :program:`mongos` after migrations to make sure they have not gone to the wrong server.  The writeback listener sends writes back to the correct server if necessary."
msgstr ""

#: ../source/faq/sharding.txt:242
# d90430e4a3aa442ea2cdc51fa093816c
msgid "These messages are a key part of the sharding infrastructure and should not cause concern."
msgstr ""

#: ../source/faq/sharding.txt:246
# 4c0032a569614ea9b0587d57aece3894
msgid "How should administrators deal with failed migrations?"
msgstr ""

#: ../source/faq/sharding.txt:248
# d86bd472768a44ebabf6c7b51d4f4809
msgid "Failed migrations require no administrative intervention. Chunk migrations always preserve a consistent state. If a migration fails to complete for some reason, the :term:`cluster` retries the operation. When the migration completes successfully, the data resides only on the new shard."
msgstr ""

#: ../source/faq/sharding.txt:255
# 83c2e3e8f00b4c9191f8009a1946932a
msgid "What is the process for moving, renaming, or changing the number of config servers?"
msgstr ""

#: ../source/faq/sharding.txt:257
# 90561f95ca04422894e8cb12a11a957d
msgid "See :doc:`/administration/sharded-clusters` for information on migrating and replacing config servers."
msgstr ""

#: ../source/faq/sharding.txt:261
# e62b2e7c145c4b999169ef34d7185cbd
msgid "When do the ``mongos`` servers detect config server changes?"
msgstr ""

#: ../source/faq/sharding.txt:263
# fc21f4643dd1413794893c1007118acc
msgid ":program:`mongos` instances maintain a cache of the :term:`config database` that holds the metadata for the :term:`sharded cluster`. This metadata includes the mapping of :term:`chunks <chunk>` to :term:`shards <shard>`."
msgstr ""

#: ../source/faq/sharding.txt:268
# 0dc8aedcc22d448a82914475a44a5d47
msgid ":program:`mongos` updates its cache lazily by issuing a request to a shard and discovering that its metadata is out of date.  There is no way to control this behavior from the client, but you can run the :dbcommand:`flushRouterConfig` command against any :program:`mongos` to force it to refresh its cache."
msgstr ""

#: ../source/faq/sharding.txt:275
# 11e3d9f1918244839ffbe4ba875172b6
msgid "Is it possible to quickly update ``mongos`` servers after updating a replica set configuration?"
msgstr ""

#: ../source/faq/sharding.txt:277
# 71ab294f865d4df19e8e6c38cb516dc3
msgid "The :program:`mongos` instances will detect these changes without intervention over time. However, if you want to force the :program:`mongos` to reload its configuration, run the :dbcommand:`flushRouterConfig` command against to each :program:`mongos` directly."
msgstr ""

#: ../source/faq/sharding.txt:284
# c377fccce365404f850368efeefdedec
msgid "What does the ``maxConns`` setting on ``mongos`` do?"
msgstr ""

#: ../source/faq/sharding.txt:286
# 66e51dd6d3d24409a2535c1014b4ad77
msgid "The :setting:`~net.maxIncomingConnections` option limits the number of connections accepted by :program:`mongos`."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:1
# aaab8d03a44749109e7ba4c065f894b4
msgid "This is particularly useful for a :program:`mongos` if you have a client that creates multiple connections and allows them to timeout rather than closing them."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:5
# d476e7ddbba34eeda36002fda4854080
msgid "In this case, set :setting:`~net.maxIncomingConnections` to a value slightly higher than the maximum number of connections that the client creates, or the maximum size of the connection pool."
msgstr ""

#: ../source/includes/fact-maxconns-mongos.rst:9
# d9179266be344120a2bc87b3bac033d3
msgid "This setting prevents the :program:`mongos` from causing connection spikes on the individual :term:`shards <shard>`. Spikes like these may disrupt the operation and memory allocation of the :term:`sharded cluster`."
msgstr ""

#: ../source/faq/sharding.txt:292
# ccb6781cf2624694a3b4fdbdda121f82
msgid "How do indexes impact queries in sharded systems?"
msgstr ""

#: ../source/faq/sharding.txt:294
# 3f1884ca82ec4e8e8a8695d9a4f5f292
msgid "If the query does not include the :term:`shard key`, the :program:`mongos` must send the query to all shards as a \"scatter/gather\" operation. Each shard will, in turn, use *either* the shard key index or another more efficient index to fulfill the query."
msgstr ""

#: ../source/faq/sharding.txt:299
# b309ff368c9c4a4db40edfcea3a4ac41
msgid "If the query includes multiple sub-expressions that reference the fields indexed by the shard key *and* the secondary index, the :program:`mongos` can route the queries to a specific shard and the shard will use the index that will allow it to fulfill most efficiently. See `this presentation <http://www.slideshare.net/mongodb/how-queries-work-with-sharding>`_ for more information."
msgstr ""

#: ../source/faq/sharding.txt:307
# 692db84d6732462c9bfa0c75dc6aff5a
msgid "Can shard keys be randomly generated?"
msgstr ""

#: ../source/faq/sharding.txt:309
# 023a031f354d4e07b417a9798635c799
msgid ":term:`Shard keys <shard key>` can be random. Random keys ensure optimal distribution of data across the cluster."
msgstr ""

#: ../source/faq/sharding.txt:312
# a125595e71944362a83433346e595d61
msgid ":term:`Sharded clusters <sharded cluster>`, attempt to route queries to *specific* shards when queries include the shard key as a parameter, because these directed queries are more efficient. In many cases, random keys can make it difficult to direct queries to specific shards."
msgstr ""

#: ../source/faq/sharding.txt:321
# bac8f01c9bf2401f8ee9d03869aa0a27
msgid "Can shard keys have a non-uniform distribution of values?"
msgstr ""

#: ../source/faq/sharding.txt:323
# 5fe462ea36ee406f938f6592b27a3881
msgid "Yes. There is no requirement that documents be evenly distributed by the shard key."
msgstr ""

#: ../source/faq/sharding.txt:326
# bf97790606174815b0475d4f95d6b94d
msgid "However, documents that have the same shard key *must* reside in the same *chunk* and therefore on the same server. If your sharded data set has too many documents with the exact same shard key you will not be able to distribute *those* documents across your sharded cluster."
msgstr ""

#: ../source/faq/sharding.txt:334
# a0df4ea594ba4bf18bebb75b5ac81a7e
msgid "Can you shard on the ``_id`` field?"
msgstr ""

#: ../source/faq/sharding.txt:336
# f437068fc7434ec8a7304d89f4bb89fa
msgid "You can use any field for the shard key. The ``_id`` field is a common shard key."
msgstr ""

#: ../source/faq/sharding.txt:339
# 2040d8998dcd4f53916c99c9bf09ea17
msgid "Be aware that ``ObjectId()`` values, which are the default value of the ``_id`` field, increment as a timestamp. As a result, when used as a shard key, all new documents inserted into the collection will initially belong to the same chunk on a single shard. Although the system will eventually divide this chunk and migrate its contents to distribute data more evenly, at any moment the cluster can only direct insert operations at a single shard. This can limit the throughput of inserts. If most of your write operations are updates, this limitation should not impact your performance. However, if you have a high insert volume, this may be a limitation."
msgstr ""

#: ../source/faq/sharding.txt:350
# fbe6506e47144cda8a93b80e0c2c14b1
msgid "To address this issue, MongoDB 2.4 provides :ref:`hashed shard keys <sharding-hashed-sharding>`."
msgstr ""

#: ../source/faq/sharding.txt:354
# c1d9e7b41005458aab7e8cddb30589b7
msgid "What do ``moveChunk commit failed`` errors mean?"
msgstr ""

#: ../source/faq/sharding.txt:356
# a2ee96e86be94a50ac98abc13559a688
msgid "At the end of a :ref:`chunk migration <sharding-chunk-migration>`, the :term:`shard` must connect to the :term:`config database` to update the chunk's record in the cluster metadata. If the :term:`shard` fails to connect to the :term:`config database`, MongoDB reports the following error:"
msgstr ""

#: ../source/faq/sharding.txt:367
# 48a4981f85634db48d3a67f9ce03dd63
msgid "When this happens, the :term:`primary` member of the shard's replica set then terminates to protect data consistency. If a :term:`secondary` member can access the config database, data on the shard becomes accessible again after an election."
msgstr ""

#: ../source/faq/sharding.txt:372
# 1e5052c1c8db4b849778325ffbccdb1f
msgid "The user will need to resolve the chunk migration failure independently. If you encounter this issue, contact the `MongoDB User Group <http://groups.google.com/group/mongodb-user>`_ or :doc:`MongoDB Support </support>` to address this issue."
msgstr ""

#: ../source/faq/sharding.txt:378
# cf720f143ee24a1680396588065db7dc
msgid "How does draining a shard affect the balancing of uneven chunk distribution?"
msgstr ""

#: ../source/faq/sharding.txt:380
# 18f4d59980e442cb81c700918f3272b5
msgid "The sharded cluster balancing process controls both migrating chunks from decommissioned shards (i.e. draining) and normal cluster balancing activities. Consider the following behaviors for different versions of MongoDB in situations where you remove a shard in a cluster with an uneven chunk distribution:"
msgstr ""

#: ../source/faq/sharding.txt:386
# f48138eb3dd84aaa9c0c79d3504a8715
msgid "After MongoDB 2.2, the balancer first removes the chunks from the draining shard and then balances the remaining uneven chunk distribution."
msgstr ""

#: ../source/faq/sharding.txt:390
# 5975fa1e67824c7ca49772518ff365dc
msgid "Before MongoDB 2.2, the balancer handles the uneven chunk distribution and *then* removes the chunks from the draining shard."
msgstr ""


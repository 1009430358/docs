# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/storage.txt:3
# f1176aa63a784c3bb0a46ee13127f282
msgid "FAQ: MongoDB Storage"
msgstr ""

#: ../source/faq/storage.txt:0
# f55d4c18f8fe40b1b95539e98bdebf78
msgid "On this page"
msgstr ""

#: ../source/faq/storage.txt:13
# 79421fcf7db74e4e9f2a86c7a7954025
msgid "This document addresses common questions regarding MongoDB's storage system."
msgstr ""

#: ../source/faq/storage.txt:17
# 7229e9f968c0488aa16ddbda46e6a77a
msgid "Storage Engine Fundamentals"
msgstr ""

#: ../source/faq/storage.txt:20
# 65cccc6186d14a91b550f81547cbb07f
msgid "What is a storage engine?"
msgstr ""

#: ../source/faq/storage.txt:22
# 277f5e675f494182b7eb60365d6d61a3
msgid "A storage engine is the part of a database that is responsible for managing how data is stored, both in memory and on disk. Many databases support multiple storage engines, where different engines perform better for specific workloads. For example, one storage engine might offer better performance for read-heavy workloads, and another might support a higher-throughput for write operations."
msgstr ""

#: ../source/faq/storage.txt:29
# 925c61e91fbc46238efb59960541d9d4
msgid ":doc:`/core/storage-engines`"
msgstr ""

#: ../source/faq/storage.txt:32
# 03dafb68d8094b1e9a3a13ddef9f9402
msgid "Can you mix storage engines in a replica set?"
msgstr ""

#: ../source/faq/storage.txt:34
# 0963622769154cd7b144be7757b657f7
msgid "Yes. You can have a replica set members that use different storage engines."
msgstr ""

#: ../source/faq/storage.txt:37
# 0bdb99e81e18410cb5a41bc166950659
msgid "When designing these multi-storage engine deployments consider the following:"
msgstr ""

#: ../source/faq/storage.txt:40
# bdf12edbfb1e471193f9cb5046a32f34
msgid "the oplog on each member may need to be sized differently to account for differences in throughput between different storage engines."
msgstr ""

#: ../source/faq/storage.txt:43
# 1a87fccd28e54af3a2486131be48f39c
msgid "recovery from backups may become more complex if your backup captures data files from MongoDB: you may need to maintain backups for each storage engine."
msgstr ""

#: ../source/faq/storage.txt:48
# fb0fdae0a6fd4be282d5e7f45ae95bdc
msgid "WiredTiger Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:51
# 04757342f46c449c9486cea713a4b780
msgid "Can I upgrade an existing deployment to a WiredTiger?"
msgstr ""

#: ../source/faq/storage.txt:53
# 02ae5cba3bac4ac198dc22f5db9dc93a
msgid "Yes. See:"
msgstr ""

#: ../source/faq/storage.txt:55
# 2a4e732aa61e41b4a417a4859a137b9e
msgid ":doc:`/tutorial/change-standalone-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:57
# 18bfcedc5da74d00a7fcbfbf3a834b30
msgid ":doc:`/tutorial/change-replica-set-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:59
# 90f1803200c54e3c9f8fd87c12a22374
msgid ":doc:`/tutorial/change-sharded-cluster-wiredtiger`"
msgstr ""

#: ../source/faq/storage.txt:62
# cb0fae4981b34f91ace32613c4c9027c
msgid "How much compression does WiredTiger provide?"
msgstr ""

#: ../source/faq/storage.txt:64
# cfeabfb617ff4fe58879f2d04278e81d
msgid "The ratio of compressed data to uncompressed data depends on your data and the compression library used. By default, collection data in WiredTiger use :term:`Snappy block compression <snappy>`; :term:`zlib` compression is also available. Index data use :term:`prefix compression` by default."
msgstr ""

#: ../source/faq/storage.txt:73
# f7181d425ff64f86a4cae4026a30ea43
msgid "To what size should I set the WiredTiger cache?"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:1
# ec12c336e21e413bbd0419fa670ed8b6
msgid "With WiredTiger, MongoDB utilizes both the WiredTiger cache and the filesystem cache."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:6
# 0b5df83d2ede423b84f47fc7db806b7e
msgid "Starting in MongoDB 3.2, the WiredTiger cache, by default, will use the larger of either:"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:9
# 0b6a02273104485981900558736ba7f7
msgid "60% of RAM minus 1 GB, or"
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:11
# 2b2b24d04e6b4428a0703551e4197b49
msgid "1 GB."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:13
# 322d5139168b46bd9a056c18dec86a43
msgid "For systems with up to 10 GB of RAM, the new default setting is less than or equal to the 3.0 default setting (For MongoDB 3.0, the WiredTiger cache uses either 1 GB or half of the installed physical RAM, whichever is larger)."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:18
# 13608f0cca4a4aa59027adb106031ad3
msgid "For systems with more than 10 GB of RAM, the new default setting is greater than the 3.0 setting."
msgstr ""

#: ../source/includes/extracts/wt-cache-default-setting.rst:21
# 0bd0d8c7330b42fb89552710f2fa6ed2
msgid "Via the filesystem cache, MongoDB automatically uses all free memory that is not used by the WiredTiger cache or by other processes. Data in the filesystem cache is compressed."
msgstr ""

#: ../source/includes/extracts/wt-cache-setting.rst:1
# 58677d17ee0f4d01a609c98106b6bef5
msgid "To adjust the size of the WiredTiger cache, see :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` and :option:`--wiredTigerCacheSizeGB`. Avoid increasing the WiredTiger cache size above its default value."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:3
# f853ea59b5b94a448a075a6462c25174
msgid "The :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` only limits the size of the WiredTiger cache, not the total amount of memory used by :program:`mongod`. The WiredTiger cache is only one component of the RAM used by MongoDB. MongoDB also automatically uses all free memory on the machine via the filesystem cache (data in the filesystem cache is compressed)."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:10
# 7649da0366de45ed91ca3f4bfe25fd93
msgid "In addition, the operating system will use any free RAM to buffer filesystem blocks."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:13
# 54feec4dcd6640f3b78cb707e65ca1fa
msgid "To accommodate the additional consumers of RAM, you may have to decrease WiredTiger cache size."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:16
# 6e7c2d6d208f41a9b1b2e83c27216a7e
msgid "The default WiredTiger cache size value assumes that there is a single :program:`mongod` instance per machine. If a single machine contains multiple MongoDB instances, then you should decrease the setting to accommodate the other :program:`mongod` instances."
msgstr ""

#: ../source/includes/extracts/wt-cache-additional-constraints-mongod-config.rst:22
# 73d55953f1044cb0b3559aaa423804ef
msgid "If you run :program:`mongod` in a container (e.g. ``lxc``, ``cgroups``, Docker, etc.) that does *not* have access to all of the RAM available in a system, you must set :setting:`storage.wiredTiger.engineConfig.cacheSizeGB` to a value less than the amount of RAM available in the container. The exact amount depends on the other processes running in the container."
msgstr ""

#: ../source/includes/extracts/wt-configure-cache.rst:7
# 96b31fb3450d42f1a6f19d37515bffdb
msgid "To view statistics on the cache and eviction rate, see the :serverstatus:`wiredTiger.cache` field returned from the :dbcommand:`serverStatus` command."
msgstr ""

#: ../source/faq/storage.txt:78
# dba5d33aede5489798556629804255ee
msgid "How frequently does WiredTiger write to disk?"
msgstr ""

#: ../source/includes/extracts/wt-snapshot-frequency.rst:1
# bf3e6f1e6f314e2caa046963e8c4be6d
msgid "MongoDB configures WiredTiger to create checkpoints (i.e. write the snapshot data to disk) at intervals of 60 seconds or 2 gigabytes of journal data."
msgstr ""

#: ../source/faq/storage.txt:82
# 25929415b9304d78b9759fcd55635ad7
msgid "For journal data, MongoDB writes to disk according to the following intervals or condition:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
# 33b5e5d3d2904fbbbc34f3f55aac37f0
msgid "Every 50 milliseconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:4
# 7b52c6a7a32c4c01bdb746408a6a2dbf
msgid "MongoDB sets checkpoints to occur in WiredTiger on user data at an interval of 60 seconds or when 2 GB of journal data has been written, whichever occurs first."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:8
# 71923c11020d4ac19d55cbf0004fa0d1
msgid "If the write operation includes a write concern of :writeconcern:`j: true <j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:11
# 810e328e5b4f46a18c0aa429ef576c5e
msgid "Because MongoDB uses a journal file size limit of 100 MB, WiredTiger creates a new journal file approximately every 100 MB of data. When WiredTiger creates a new journal file, WiredTiger syncs the previous journal file."
msgstr ""

#: ../source/faq/storage.txt:88
# 6b313babeec7464cb6ab94b4b204866c
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/faq/storage.txt:93
# 6cfec5e847284db08199f3cae86c71c1
msgid "What are memory mapped files?"
msgstr ""

#: ../source/faq/storage.txt:95
# 9086492fc3b64174a369b45f62ffadbc
msgid "A memory-mapped file is a file with data that the operating system places in memory by way of the ``mmap()`` system call. ``mmap()`` thus *maps* the file to a region of virtual memory. Memory-mapped files are the critical piece of the MMAPv1 storage engine in MongoDB. By using memory mapped files, MongoDB can treat the contents of its data files as if they were in memory. This provides MongoDB with an extremely fast and simple method for accessing and manipulating data."
msgstr ""

#: ../source/faq/storage.txt:104
# 223a671eef184e8192b81285378fb054
msgid "How do memory mapped files work?"
msgstr ""

#: ../source/faq/storage.txt:106
# a8ab33a7e4ed481e8a709aae0ea855f9
msgid "MongoDB uses memory mapped files for managing and interacting with all data."
msgstr ""

#: ../source/faq/storage.txt:109
# f7d4547a3ad74db4bb84ad28bc6df72d
msgid "Memory mapping assigns files to a block of virtual memory with a direct byte-for-byte correlation. MongoDB memory maps data files to memory as it accesses documents. Unaccessed data is *not* mapped to memory."
msgstr ""

#: ../source/faq/storage.txt:113
# 5dd148282b92479987071e1d093be8a9
msgid "Once mapped, the relationship between file and memory allows MongoDB to interact with the data in the file as if it were memory."
msgstr ""

#: ../source/faq/storage.txt:117
# 88dc19d9c4ad445bb0477f7d78b69725
msgid "How frequently does MMAPv1 write to disk?"
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
# b7cdd0f0338b407682ed53b18db51aa3
msgid "In the default configuration for the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB writes to the data files on disk every 60 seconds and writes to the :term:`journal` files roughly every 100 milliseconds."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
# 77021bdbf511400899c528962b664f62
msgid "To change the interval for writing to the data files, use the :setting:`storage.syncPeriodSecs` setting. For the journal files, see :setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
# b12b9e5727e041baadcc11067fe78bbd
msgid "These values represent the *maximum* amount of time between the completion of a write operation and when MongoDB writes to the data files or to the journal files. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/faq/storage.txt:124
# e7efbec28e94456393ad13210c7c5e99
msgid "Why are the files in my data directory larger than the data in my database?"
msgstr ""

#: ../source/faq/storage.txt:126
# b9cd019edb304bda84d8aaec48bdf91e
msgid "The data files in your data directory, which is the :file:`/data/db` directory in default configurations, might be larger than the data set inserted into the database. Consider the following possible causes:"
msgstr ""

#: ../source/faq/storage.txt:131
# 2c75b99eae9a456ebb8ceb02be2cdd4b
msgid "Preallocated data files"
msgstr ""

#: ../source/faq/storage.txt:133
# 50c53fce02924299b333e34cdf704771
msgid "MongoDB preallocates its data files to avoid filesystem fragmentation, and because of this, the size of these files do not necessarily reflect the size of your data."
msgstr ""

#: ../source/faq/storage.txt:137
# 97b9ab716cc741409e49cf06c2bb451c
msgid "The :setting:`storage.mmapv1.smallFiles` option will reduce the size of these files, which may be useful if you have many small databases on disk."
msgstr ""

#: ../source/faq/storage.txt:142
# abf4e42c89f84212bed20eea5ef6c30a
msgid "The ``oplog``"
msgstr ""

#: ../source/faq/storage.txt:144
# 799f0d01f39d4051a68b463d52ca8505
msgid "If this :program:`mongod` is a member of a replica set, the data directory includes the :term:`oplog.rs <oplog>` file, which is a preallocated :term:`capped collection` in the ``local`` database."
msgstr ""

#: ../source/faq/storage.txt:149
# 78680a0ff1cc47e4b682b48e4bc2d5e1
msgid "The default allocation is approximately 5% of disk space on 64-bit installations. In most cases, you should not need to resize the oplog. See :ref:`Oplog Sizing <replica-set-oplog-sizing>` for more information."
msgstr ""

#: ../source/faq/storage.txt:154
# 6d6da6d873834df499d65e506b6c840e
msgid "The ``journal``"
msgstr ""

#: ../source/faq/storage.txt:156
# a4967de7b6bf4848b2d2c7bd834cd776
msgid "The data directory contains the journal files, which store write operations on disk before MongoDB applies them to databases. See :doc:`/core/journaling`."
msgstr ""

#: ../source/faq/storage.txt:163
# f51bdce093ad482992808c5efbd33a85
msgid "Empty records"
msgstr ""

#: ../source/faq/storage.txt:165
# 4ee5aafe002049f3b312840688fb2317
msgid "MongoDB maintains lists of empty records in data files as it deletes documents and collections. MongoDB can reuse this space, but will not, by default, return this space to the operating system."
msgstr ""

#: ../source/faq/storage.txt:169
# 36215710cefb4e05a3f37df004cd0e59
msgid "To allow MongoDB to more effectively reuse the space, you can de-fragment your data. To de-fragment, use the :dbcommand:`compact` command. The :dbcommand:`compact` requires up to 2 gigabytes of extra disk space to run. Do not use :dbcommand:`compact` if you are critically low on disk space. For more information on its behavior and other considerations, see :dbcommand:`compact`."
msgstr ""

#: ../source/faq/storage.txt:176
# 23e5b712365c48f29149fc042d6849e5
msgid ":dbcommand:`compact` only removes fragmentation from MongoDB data files within a collection and does not return any disk space to the operating system. To return disk space to the operating system, see :ref:`faq-reclaim-disk-space`."
msgstr ""

#: ../source/faq/storage.txt:184
# 318e7b250ff245d5ab235016270e2d77
msgid "How do I reclaim disk space?"
msgstr ""

#: ../source/faq/storage.txt:186
# dfe8ed75efb943e0a4c38dde4a315184
msgid "The following provides some options to consider when reclaiming disk space."
msgstr ""

#: ../source/faq/storage.txt:191
# 84ed7dea4b76412fa64b6a81c147b6e6
msgid "You do not need to reclaim disk space for MongoDB to reuse freed space. See :ref:`faq-empty-records` for information on reuse of freed space."
msgstr ""

#: ../source/faq/storage.txt:196
# 0e13ee74bf1743f0814dabd7bfa1fdea
msgid "``repairDatabase``"
msgstr ""

#: ../source/faq/storage.txt:198
# f417d3a0c5c94f629d1ce628ab618234
msgid "You can use :dbcommand:`repairDatabase` on a database to rebuilds the database, de-fragmenting the associated storage in the process."
msgstr ""

#: ../source/faq/storage.txt:201
# 3a7f9bbd9bf44538841c8b82da73d43d
msgid ":dbcommand:`repairDatabase` requires free disk space equal to the size of your current data set plus 2 gigabytes. If the volume that holds dbpath lacks sufficient space, you can mount a separate volume and use that for the repair. For additional information and considerations, see :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/faq/storage.txt:209
# 2124c0988b2340f29ca135e46589d86c
msgid "Do not use :dbcommand:`repairDatabase` if you are critically low on disk space."
msgstr ""

#: ../source/faq/storage.txt:212
# c06a928c65434f32bcdc2a65d6a31e9d
msgid ":dbcommand:`repairDatabase` will block all other operations and may take a long time to complete."
msgstr ""

#: ../source/faq/storage.txt:215
# 0acdfabb617e4ea3b3f6eb93986bc2ea
msgid "You can only run :dbcommand:`repairDatabase` on a standalone :program:`mongod` instance."
msgstr ""

#: ../source/faq/storage.txt:218
# 995d7d8442a645d995e453e3fc26ab6d
msgid "You can also run the :dbcommand:`repairDatabase` operation for all databases on the server by restarting your :program:`mongod` standalone instance with the :option:`--repair` and :option:`--repairpath` options. All databases on the server will be unavailable during this operation."
msgstr ""

#: ../source/faq/storage.txt:224
# 53c8439a6e004a8d809a9de67762f240
msgid "Resync the Member of the Replica Set"
msgstr ""

#: ../source/faq/storage.txt:226
# 2cf080147c9c469b887d4afecbde8843
msgid "For a secondary member of a replica set, you can perform a :doc:`resync of the member </tutorial/resync-replica-set-member>` by: stopping the secondary member to resync, deleting all data and subdirectories from the member's data directory, and restarting."
msgstr ""

#: ../source/faq/storage.txt:231
# c17f178686d748bd9879114419cf0313
msgid "For details, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/faq/storage.txt:236
# 0e6b19b6ef084b5a8e6dc8c7926295ef
msgid "What is the working set?"
msgstr ""

#: ../source/faq/storage.txt:238
# 169324cb4473492db87dd9449f26078d
msgid "Working set represents the total body of data that the application uses in the course of normal operation. Often this is a subset of the total data size, but the specific size of the working set depends on actual moment-to-moment use of the database."
msgstr ""

#: ../source/faq/storage.txt:243
# 08b94ee1a1114f7aabb726f10aff8d18
msgid "If you run a query that requires MongoDB to scan every document in a collection, the working set will expand to include every document. Depending on physical memory size, this may cause documents in the working set to \"page out,\" or to be removed from physical memory by the operating system. The next time MongoDB needs to access these documents, MongoDB may incur a hard page fault."
msgstr ""

#: ../source/faq/storage.txt:250
# 8ab6c84af5074c3c89e7f53e664bdfff
msgid "For best performance, the majority of your *active* set should fit in RAM."
msgstr ""

#: ../source/faq/storage.txt:256
# 548f6340beec45969338109a99713e70
msgid "What are page faults?"
msgstr ""

#: ../source/includes/fact-page-fault.rst:1
# 7df7650521db4bea899ba8755ab6c6a9
msgid "With the MMAPv1 storage engine, page faults can occur as MongoDB reads from or writes data to parts of its data files that are not currently located in physical memory. In contrast, operating system page faults happen when physical memory is exhausted and pages of physical memory are swapped to disk."
msgstr ""

#: ../source/faq/storage.txt:260
# 8166c2b0ff6641e8b0f0ee79afe9c9ff
msgid "If there is free memory, then the operating system can find the page on disk and load it to memory directly. However, if there is no free memory, the operating system must:"
msgstr ""

#: ../source/faq/storage.txt:264
# 0932f7859dcc4db2aecb89924f958745
msgid "find a page in memory that is stale or no longer needed, and write the page to disk."
msgstr ""

#: ../source/faq/storage.txt:267
# fabc1fba47ca46fb8d42afd17aff4780
msgid "read the requested page from disk and load it into memory."
msgstr ""

#: ../source/faq/storage.txt:269
# 6425bb1a9f4743bdb62b00f93079df5a
msgid "This process, on an active system, can take a long time, particularly in comparison to reading a page that is already in memory."
msgstr ""

#: ../source/faq/storage.txt:273
#: ../source/faq/storage.txt:285
# cde33a08b14e421bb154259015f3d8b9
# 3191f810df5c4c69bee3a2e33daf45e4
msgid "See :ref:`administration-monitoring-page-faults` for more information."
msgstr ""

#: ../source/faq/storage.txt:276
# 5c8fce0f34e44bab9406a5ca05d9ed12
msgid "What is the difference between soft and hard page faults?"
msgstr ""

#: ../source/faq/storage.txt:278
# 8e7ba3f7e6c34c6787a55986b57281b2
msgid ":term:`Page faults <page fault>` occur when MongoDB, with the MMAP storage engine, needs access to data that isn't currently in active memory. A \"hard\" page fault refers to situations when MongoDB must access a disk to access the data. A \"soft\" page fault, by contrast, merely moves memory pages from one list to another, such as from an operating system file cache."
msgstr ""

#: ../source/faq/storage.txt:292
# f1a7eb943d3942df8c68c0989c60fc84
msgid "Can I manually pad documents to prevent moves during updates?"
msgstr ""

#: ../source/faq/storage.txt:296
# 17089bbeea1544c8b4436c16657931aa
msgid "With the :doc:`MMAPv1 storage engine </core/mmapv1>`, an update can cause a document to move on disk if the document grows in size. To *minimize* document movements, MongoDB uses :term:`padding`."
msgstr ""

#: ../source/faq/storage.txt:300
# 79f4814d9aaa49c68c735183ceaae08e
msgid "You should not have to pad manually because by default, MongoDB uses :ref:`power-of-2-allocation` to add :ref:`padding automatically <record-allocation-strategies>`. The :ref:`power-of-2-allocation` ensures that MongoDB allocates document space in sizes that are powers of 2, which helps ensure that MongoDB can efficiently reuse free space created by document deletion or relocation as well as reduce the occurrences of reallocations in many cases."
msgstr ""

#: ../source/faq/storage.txt:308
# 0b02f156c4e5485e98a998cf763a729d
msgid "However, *if you must* pad a document manually, you can add a temporary field to the document and then :update:`$unset` the field, as in the following example."
msgstr ""

#: ../source/faq/storage.txt:312
# d48f2bc1cf694bba832c59fd9012dc81
msgid "Do not manually pad documents in a capped collection. Applying manual padding to a document in a capped collection can break replication. Also, the padding is not preserved if you re-sync the MongoDB instance."
msgstr ""

#: ../source/faq/storage.txt:336
# a1db950d992b422991461f3b9f10121f
msgid ":ref:`record-allocation-strategies`"
msgstr ""

#: ../source/faq/storage.txt:339
# d54b563c7ae24eaa9794de38d22ddf2f
msgid "Data Storage Diagnostics"
msgstr ""

#: ../source/faq/storage.txt:342
# 2957139bb64e4aa8b2693e3288304d94
msgid "How can I check the size of a collection?"
msgstr ""

#: ../source/faq/storage.txt:344
# 2b346159d59945e88d38309e4518f29d
msgid "To view the statistics for a collection, including the data size, use the :method:`db.collection.stats()` method from the :program:`mongo` shell. The following example issues :method:`db.collection.stats()` for the ``orders`` collection:"
msgstr ""

#: ../source/faq/storage.txt:353
# 71b46675248d404c89abd023f579184c
msgid "MongoDB also provides the following methods to return specific sizes for the collection:"
msgstr ""

#: ../source/faq/storage.txt:356
# 401a0ae31eea47b89698716f1f084dff
msgid ":method:`db.collection.dataSize()` to return data size in bytes for the collection."
msgstr ""

#: ../source/faq/storage.txt:359
# b5e07eacaa5d43f29267a8078c226c26
msgid ":method:`db.collection.storageSize()` to return allocation size in bytes, including unused space."
msgstr ""

#: ../source/faq/storage.txt:362
# c134ba64de2549a09e42a34809776429
msgid ":method:`db.collection.totalSize()` to return the data size plus the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:365
# e338cf79a59a48618a1b08e4a44f5ca6
msgid ":method:`db.collection.totalIndexSize()` to return the index size in bytes."
msgstr ""

#: ../source/faq/storage.txt:368
# a8c42626e6384db1babc64a66d74701e
msgid "The following script prints the statistics for each database:"
msgstr ""

#: ../source/faq/storage.txt:377
# b4c0a8ab0c344c50bf5551150e87ccc9
msgid "The following script prints the statistics for each collection in each database:"
msgstr ""

#: ../source/faq/storage.txt:391
# e16ced8bf8ae4e11beb02b095b21fcc9
msgid "How can I check the size of indexes for a collection?"
msgstr ""

#: ../source/faq/storage.txt:393
# bc5312e9774f42709c0b00d90e5b1e23
msgid "To view the size of the data allocated for an index, use the :method:`db.collection.stats()` method and check the :data:`~collStats.indexSizes` field in the returned document."
msgstr ""

#: ../source/faq/storage.txt:400
# def8b649de0345b7b14ff835c4ccfcce
msgid "How can I get information on the storage use of a database?"
msgstr ""

#: ../source/faq/storage.txt:402
# e46beb62075545f890951f17e0f0cecb
msgid "The :method:`db.stats()` method in the :program:`mongo` shell returns the current state of the \"active\" database. For the description of the returned fields, see :ref:`dbStats Output <dbstats-output>`."
msgstr ""


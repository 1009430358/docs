# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/replica-sets.txt:3
# cee3125917014a7083eb03e4ee97c7df
msgid "FAQ: Replication and Replica Sets"
msgstr ""

#: ../source/faq/replica-sets.txt:7
# 7ad0f532a9f8435f9b8878422822c9bd
msgid "This document answers common questions about database replication in MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:10
# 31c655d4061a4f83911e7198d3db7c1d
msgid "If you don't find the answer you're looking for, check the :doc:`complete list of FAQs </faq>` or post your question to the `MongoDB User Mailing List <https://groups.google.com/forum/?fromgroups#!forum/mongodb-user>`_."
msgstr ""

#: ../source/faq/replica-sets.txt:15
# 392a962513ea4b45b749c27f6c66699d
msgid "What kinds of replication does MongoDB support?"
msgstr ""

#: ../source/faq/replica-sets.txt:17
# 49ca58e06ceb4bec94284a0904f3325f
msgid "MongoDB supports master-slave replication and a variation on master-slave replication known as replica sets. Replica sets are the recommended replication topology."
msgstr ""

#: ../source/faq/replica-sets.txt:22
# dd82e9ff856742b09b6b28619df0153c
msgid "What do the terms \"primary\" and \"master\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:24
# 06acf165e4a04129bdf694e8ec647c11
msgid ":term:`Primary` and :term:`master` nodes are the nodes that can accept writes. MongoDB's replication is \"single-master:\" only one node can accept write operations at a time."
msgstr ""

#: ../source/faq/replica-sets.txt:28
# 5fcb1291889a47dd90594b9c49f3b5ac
msgid "In a replica set, if the current \"primary\" node fails or becomes inaccessible, the other members can autonomously :term:`elect <election>` one of the other members of the set to be the new \"primary\"."
msgstr ""

#: ../source/faq/replica-sets.txt:32
# 3b7e391c8e614ab88fb600cc33b37f30
msgid "By default, clients send all reads to the primary; however, :term:`read preference` is configurable at the client level on a per-connection basis, which makes it possible to send reads to secondary nodes instead."
msgstr ""

#: ../source/faq/replica-sets.txt:38
# 4881707bad944f4b8b4587d5bf416eb5
msgid "What do the terms \"secondary\" and \"slave\" mean?"
msgstr ""

#: ../source/faq/replica-sets.txt:40
# f3cdf98b2c684919b3b1f9da64396c0e
msgid ":term:`Secondary` and :term:`slave` nodes are read-only nodes that replicate from the :term:`primary`."
msgstr ""

#: ../source/faq/replica-sets.txt:43
# a4529243027646f694bdeba310287203
msgid "Replication operates by way of an :term:`oplog`, from which secondary/slave members apply new operations to themselves. This replication process is asynchronous, so secondary/slave nodes may not always reflect the latest writes to the primary. But usually, the gap between the primary and secondary nodes is just few milliseconds on a local network connection."
msgstr ""

#: ../source/faq/replica-sets.txt:50
# 4367ea9630bf4ca2a0fd68f46084844f
msgid "How long does replica set failover take?"
msgstr ""

#: ../source/faq/replica-sets.txt:52
# 8a4222fbd8d844b7ae90f77d12e462fd
msgid "It varies, but a replica set will select a new primary within a minute."
msgstr ""

#: ../source/faq/replica-sets.txt:54
# 2a3da26345ef400aa22e84d3f9b22ec1
msgid "It may take 10-30 seconds for the members of a :term:`replica set` to declare a :term:`primary` inaccessible. This triggers an :term:`election`. During the election, the cluster is unavailable for writes."
msgstr ""

#: ../source/faq/replica-sets.txt:59
# 7b5a4a8486194b19971289891eb1e976
msgid "The election itself may take another 10-30 seconds."
msgstr ""

#: ../source/faq/replica-sets.txt:63
# 4d5a007e24044448a73213716b046740
msgid ":term:`Eventually consistent <eventual consistency>` reads, like the ones that will return from a replica set are only possible with a :term:`write concern` that permits reads from :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:69
# 6187ffa671384dbd9ab3de824ca2171d
msgid "Does replication work over the Internet and WAN connections?"
msgstr ""

#: ../source/faq/replica-sets.txt:71
#: ../source/faq/replica-sets.txt:141
#: ../source/faq/replica-sets.txt:259
# ac0b411ac40242279eb233ec6064cdfd
# 0c9fc5e272504815ac2ec6db52f1afd6
# c089934fe40944929003247cd21f96ea
msgid "Yes."
msgstr ""

#: ../source/faq/replica-sets.txt:73
# 4463be7cad2e47d6939952ba78fb4fe2
msgid "For example, a deployment may maintain a :term:`primary` and :term:`secondary` in an East-coast data center along with a :term:`secondary` member for disaster recovery in a West-coast data center."
msgstr ""

#: ../source/faq/replica-sets.txt:77
# b54832806a3e445fa2b4187b0c5611b4
msgid ":doc:`/tutorial/deploy-geographically-distributed-replica-set`"
msgstr ""

#: ../source/faq/replica-sets.txt:80
# 59d7b4987e06422fb526db239f12371f
msgid "Can MongoDB replicate over a \"noisy\" connection?"
msgstr ""

#: ../source/faq/replica-sets.txt:82
# 557949d7ebfc4b3091772e855dea3a41
msgid "Yes, but not without connection failures and the obvious latency."
msgstr ""

#: ../source/faq/replica-sets.txt:84
# b4acad0de57247bdb4e0f7c4c78ad7ed
msgid "Members of the set will attempt to reconnect to the other members of the set in response to networking flaps. This does not require administrator intervention. However, if the network connections among the nodes in the replica set are very slow, it might not be possible for the members of the node to keep up with the replication."
msgstr ""

#: ../source/faq/replica-sets.txt:90
# 459a3ee23e454f35bb423035cc4ac694
msgid "If the TCP connection between the secondaries and the :term:`primary` instance breaks, a :term:`replica set` will automatically elect one of the :term:`secondary` members of the set as primary."
msgstr ""

#: ../source/faq/replica-sets.txt:95
# f8274788df824b80854a819f016d90d3
msgid "What is the preferred replication method: master/slave or replica sets?"
msgstr ""

#: ../source/faq/replica-sets.txt:99
# d1201b1f61074ae7b8958e0955521c99
msgid "In MongoDB 3.0.0, replica sets can have up to :ref:`50 nodes <3.0-replica-sets-max-members>`. Previous versions limited the maximum number of replica set members to 12."
msgstr ""

#: ../source/faq/replica-sets.txt:103
# d22995896a0c42739e6f33f185e818ff
msgid ":term:`Replica sets <replica set>` are the preferred :term:`replication` mechanism in MongoDB. However, if your deployment requires more than 50 nodes, you must use master/slave replication."
msgstr ""

#: ../source/faq/replica-sets.txt:108
# f3c9360e4db14a08ab2080e029937fbe
msgid "What is the preferred replication method: replica sets or replica pairs?"
msgstr ""

#: ../source/faq/replica-sets.txt:112
# 6959ad982d9047159ce9da97ecf70c7d
msgid ":term:`Replica sets <replica set>` replaced :term:`replica pairs` in version 1.6. :term:`Replica sets <replica set>` are the preferred :term:`replication` mechanism in MongoDB."
msgstr ""

#: ../source/faq/replica-sets.txt:117
# d87c7b93c9c34f1b86e17a4103aeef61
msgid "Why use journaling if replication already provides data redundancy?"
msgstr ""

#: ../source/faq/replica-sets.txt:119
# 24e7fedcfdbe4b9f8c081848cc629201
msgid ":term:`Journaling <journal>` facilitates faster crash recovery. Prior to journaling, crashes often required :dbcommand:`database repairs <repairDatabase>` or full data resync. Both were slow, and the first was unreliable."
msgstr ""

#: ../source/faq/replica-sets.txt:123
# 751ff725c20d4629a20dfd056bda344a
msgid "Journaling is particularly useful for protection against power failures, especially if your replica set resides in a single data center or power circuit."
msgstr ""

#: ../source/faq/replica-sets.txt:127
# 1ae167cd864148038895e6ca1cb6d3c7
msgid "When a :term:`replica set` runs with journaling, :program:`mongod` instances can safely restart without any administrator intervention."
msgstr ""

#: ../source/faq/replica-sets.txt:132
# 0501208edad242d78705e167429a760d
msgid "Journaling requires some resource overhead for write operations. Journaling has no effect on read performance, however."
msgstr ""

#: ../source/faq/replica-sets.txt:135
# 290a53fe18824ac9a7c8aa61171febfd
msgid "Journaling is enabled by default on all 64-bit builds of MongoDB v2.0 and greater."
msgstr ""

#: ../source/faq/replica-sets.txt:139
# 8a36ca220ab148dbbe22e3f8ceb72a1b
msgid "Are write operations durable if write concern does not acknowledge writes?"
msgstr ""

#: ../source/faq/replica-sets.txt:143
# 7c9c6eb7a747437f9c31d029662f0cbb
msgid "However, if you want confirmation that a given write has arrived at the server, use :ref:`write concern <write-concern>`."
msgstr ""

#: ../source/faq/replica-sets.txt:146
# d360d1d3832b42e0b6f6e68f93a30ac8
msgid "After the :ref:`default write concern change <driver-write-concern-change>`, the default write concern acknowledges all write operations, and unacknowledged writes must be explicitly configured. See the :doc:`/applications/drivers` documentation for your driver for more information."
msgstr ""

#: ../source/faq/replica-sets.txt:154
# 59ef8b63851b4bb8bde8a63a41914437
msgid "The :program:`mongo` shell now defaults to use :doc:`safe writes </core/write-concern>`. See :ref:`write-methods-incompatibility` for more information."
msgstr ""

#: ../source/faq/replica-sets.txt:158
# 9b9d145d878a431e80769e86ddafe0bd
msgid "A new protocol for :ref:`write operations <rel-notes-write-operations>` integrates write concerns with the write operations. Previous versions issued a :dbcommand:`getLastError` command after a write to specify a write concern."
msgstr ""

#: ../source/faq/replica-sets.txt:165
# d1dad9949e1f4794bfa181dd27fcc0a2
msgid "How many arbiters do replica sets need?"
msgstr ""

#: ../source/faq/replica-sets.txt:167
# 986a1e5066264756916f653aed760b47
msgid "Some configurations do not require any :term:`arbiter` instances. Arbiters vote in :term:`elections <election>` for :term:`primary` but do not replicate the data like :term:`secondary` members."
msgstr ""

#: ../source/faq/replica-sets.txt:172
# e6d58746dce64268a43e5c8a6ce4fb5a
msgid ":term:`Replica sets <replica set>` require a majority of the remaining nodes present to elect a primary. Arbiters allow you to construct this majority without the overhead of adding replicating nodes to the system."
msgstr ""

#: ../source/faq/replica-sets.txt:177
# 5b6c130ca75e4e6d983b9f6bc1e745b4
msgid "There are many possible replica set :doc:`architectures </core/replica-set-architectures>`."
msgstr ""

#: ../source/faq/replica-sets.txt:180
# 0720139708034c8ba88290fdceda6eb0
msgid "A replica set with an odd number of voting nodes does not need an arbiter."
msgstr ""

#: ../source/faq/replica-sets.txt:182
# 74c37962b7454d6d94c0a58fc7a2f2a2
msgid "A common configuration consists of two replicating nodes that include a :term:`primary` and a :term:`secondary`, as well as an :term:`arbiter` for the third node. This configuration makes it possible for the set to elect a primary in the event of failure, without requiring three replicating nodes."
msgstr ""

#: ../source/faq/replica-sets.txt:188
# 4a362cd40fe14caf86f3f80146308c7d
msgid "You may also consider adding an arbiter to a set if it has an equal number of nodes in two facilities and network partitions between the facilities are possible. In these cases, the arbiter will break the tie between the two facilities and allow the set to elect a new primary."
msgstr ""

#: ../source/faq/replica-sets.txt:194
# b68dc05724a94e1bb3489c3c52776146
msgid ":doc:`/core/replica-set-architectures`"
msgstr ""

#: ../source/faq/replica-sets.txt:197
# 1dabf0e04ffc4d229d17a17429b2ed5a
msgid "What information do arbiters exchange with the rest of the replica set?"
msgstr ""

#: ../source/faq/replica-sets.txt:199
# 8b11346207f943e2890f110911f22fd6
msgid "Arbiters never receive the contents of a collection but do exchange the following data with the rest of the replica set:"
msgstr ""

#: ../source/faq/replica-sets.txt:202
# 0ef2e7d3638d42ceabcbfe4e1fbab714
msgid "Credentials used to authenticate the arbiter with the replica set. All MongoDB processes within a replica set use keyfiles. These exchanges are encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:206
# 80103f6a0169474b89134c65b0bd5a35
msgid "Replica set configuration data and voting data. This information is not encrypted. Only credential exchanges are encrypted."
msgstr ""

#: ../source/faq/replica-sets.txt:209
# 97a6e00d1d8843d6ad72eff5264aef86
msgid "If your MongoDB deployment uses TLS/SSL, then all communications between arbiters and the other members of the replica set are secure. See the documentation for :doc:`/tutorial/configure-ssl` for more information. Run all arbiters on secure networks, as with all MongoDB components."
msgstr ""

#: ../source/faq/replica-sets.txt:0
# bc133f1bd9fa4e2eac9635daca56be76
msgid "See"
msgstr ""

#: ../source/faq/replica-sets.txt:219
# 362bb34e22224eedaadbaefab6cca3f8
msgid "Which members of a replica set vote in elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:221
# 89026917e8c04e569da18149ac197048
msgid "All members of a replica set, unless the value of :data:`votes <replSetGetConfig.members[n].votes>` is equal to ``0``, vote in elections. This includes all :ref:`delayed <replica-set-delayed-members>`, :ref:`hidden <replica-set-hidden-members>` and :ref:`secondary-only <replica-set-secondary-only-members>` members. :ref:`Arbiters <replica-set-arbiters>` always vote in elections and always have ``1`` vote."
msgstr ""

#: ../source/faq/replica-sets.txt:230
# ef14ff5876d646bdaaa0c35294c673d6
msgid "Additionally, the :data:`~replSetGetStatus.members.state` of the voting members also determine whether the member can vote. Only voting members in the following states are eligible to vote:"
msgstr ""

#: ../source/faq/replica-sets.txt:234
# 6544eb830a254a0a9a8304676574789c
msgid "``PRIMARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:236
# ee3e4d7440354a07a6c9ca8fd4db1d4a
msgid "``SECONDARY``"
msgstr ""

#: ../source/faq/replica-sets.txt:238
# e753f263353c4264a95d986eef5b2163
msgid "``RECOVERING``"
msgstr ""

#: ../source/faq/replica-sets.txt:240
# 7bbd60084e5843cbbad7008bf0670570
msgid "``ARBITER``"
msgstr ""

#: ../source/faq/replica-sets.txt:242
# 0c9750538c8143a884eee7f3b007380c
msgid "``ROLLBACK``"
msgstr ""

#: ../source/faq/replica-sets.txt:244
#: ../source/faq/replica-sets.txt:254
# 0c199634d38748f7b01097a4bd2f1dcf
# ff711bb9c8ad4145bb52d9088390f369
msgid ":ref:`replica-set-elections`"
msgstr ""

#: ../source/faq/replica-sets.txt:247
# fe5fd2559ef34cb7b4070502f5ba701e
msgid "Do hidden members vote in replica set elections?"
msgstr ""

#: ../source/faq/replica-sets.txt:249
# bf919d4693824a2a8542a85d3a575a59
msgid ":ref:`Hidden members <replica-set-hidden-members>` of :term:`replica sets <replica set>` *do* vote in elections. To exclude a member from voting in an :term:`election`, change the value of the member's :data:`~replSetGetConfig.members[n].votes` configuration to ``0``."
msgstr ""

#: ../source/faq/replica-sets.txt:257
# 798c3dab6aff435487e3696af9921486
msgid "Is it normal for replica set members to use different amounts of disk space?"
msgstr ""

#: ../source/faq/replica-sets.txt:261
# 16fb6d0829944be39635dddcba60ea66
msgid "Factors including: different oplog sizes, different levels of storage fragmentation, and MongoDB's data file pre-allocation can lead to some variation in storage utilization between nodes. Storage use disparities will be most pronounced when you add members at different times."
msgstr ""


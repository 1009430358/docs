# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
# 6c11247d26164bf8bff1d75cc8e27f66
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:9
# 05363ad1f57d49cc9951d075d243feb0
msgid "MongoDB allows multiple clients to read and write the same data. In order to ensure consistency, it uses locking and other :term:`concurrency control` measures to prevent multiple clients from modifying the same piece of data simultaneously. Together, these mechanisms guarantee that all writes to a single document occur either in full or not at all and that clients never see an inconsistent view of the data."
msgstr ""

#: ../source/faq/concurrency.txt:20
# 0d222f7202e94bbc9988e0bacc3c85b3
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/faq/concurrency.txt:22
# 03eb120b968f4bc0b85e069f60d382ef
msgid "MongoDB uses reader-writer locks that allow concurrent readers shared access to a resource, such as a database or collection, but give exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:26
# 8ad948fed5a04edfa31db91bf6b6b476
msgid "MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to lock at the global, database or collection level, and allows for individual storage engines to implement their own concurrency control below the collection (i.e., at the document-level in WiredTiger)."
msgstr ""

#: ../source/faq/concurrency.txt:32
# aaf2e2fcd9c645adb29ad01ccd46e8f9
msgid "In addition to a shared (S) locking mode for reads and an exclusive (X) locking mode for write operations, intent shared (IS) and intent exclusive (IX) modes indicate an intent to read or write a resource using a finer granularity lock.  When locking at a certain granularity all higher levels are locked using an :term:`intent lock`."
msgstr ""

#: ../source/faq/concurrency.txt:38
# c2bfefdd1fba448dbba8407797804e1a
msgid "For example, when locking a collection for writing (using mode X), both the corresponding database lock and the global lock must be locked in intent exclusive (IX) mode. A single database can simultaneously be locked in IS and IX mode, but an exclusive (X) lock cannot coexist with any other modes, and a shared (S) lock can only coexists with intent shared (IS) locks."
msgstr ""

#: ../source/faq/concurrency.txt:47
# 7034376c15e5408488e60dec5b4646d5
msgid "Locks are fair, with reads and writes being queued in order. However, to optimize throughput, when one request is granted, all other compatible requests will be granted at the same time, potentially releasing them before a conflicting request.  For example, consider a case in which an X lock was just released, and in which the conflict queue contains the following items:"
msgstr ""

#: ../source/faq/concurrency.txt:54
# c9848c77b52d4bdb920bb596a03414c1
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""

#: ../source/faq/concurrency.txt:56
# a49a4285dc3d48b785f96f55ed9b5bd5
msgid "In strict first-in, first-out (FIFO) ordering, only the first two IS modes would be granted. Instead MongoDB will actually grant all IS and S modes, and once they all drain, it will grant X, even if new IS or S requests have been queued in the meantime. As a grant will always move all other requests ahead in the queue, no starvation of any request is possible."
msgstr ""

#: ../source/faq/concurrency.txt:63
# d41de871f9f2468f8ba46be11e5ea5a9
msgid "See the Wikipedia page on `Multiple granularity locking <http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more information."
msgstr ""

#: ../source/faq/concurrency.txt:69
# b66e12713a0047c3ac40123ea3dae673
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:73
# 4922222f5ecc480ebfb3eb76053b2b8d
msgid "Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger <storage-wiredtiger>` storage engine, which uses optimistic concurrency control for most read and write operations. WiredTiger uses only intent locks at the global, database and collection levels. When the storage engine detects conflicts between two operations, one will incur a write conflict causing MongoDB to transparently retry that operation."
msgstr ""

#: ../source/faq/concurrency.txt:81
# 3fe64a2bf9bc443ca2e0341e31519a3b
msgid "Some global operations, typically short lived operations involving multiple databases, still require a global \"instance-wide\" lock. Some other operations, such as dropping a collection, still require an exclusive database lock."
msgstr ""

#: ../source/faq/concurrency.txt:86
# 9db4f55724c943b1bab0f98e83b351de
msgid "The MMAPv1 storage engine uses collection-level locking as of the 3.0 release series, an improvement on earlier versions in which the database lock was the finest-grain lock. Third-party storage engines may either use collection-level locking or implement their own finer-grained concurrency control."
msgstr ""

#: ../source/faq/concurrency.txt:92
# a9deb591ec484a478ee5a2f062cfb933
msgid "For example, if you have six collections in a database using the MMAPv1 storage engine and an operation takes a collection-level write lock, the other five collections are still available for read and write operations. An exclusive database lock makes all six collections unavailable for the duration of the operation holding the lock."
msgstr ""

#: ../source/faq/concurrency.txt:99
# cabb92b3e81c4929b623ae1f3b7e236f
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:101
# be5abcceaf54491c98b1230b3f50093b
msgid "For reporting on lock utilization information on locks, use any of the following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:104
#: ../source/faq/concurrency.txt:199
# 3919f3cbec064bf79cbcf7bb68d42694
# ab138e6dd3184812b03eecbd4f97651d
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:105
# 7993820fa77447b7bd408c1a5ac70404
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:106
# 2a1b2dc7a1944eb1a268644acdac0ab7
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:107
# 22a142c4a59c4e1d8626ee083ba529f8
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:108
# df4b3e3d42d24aabac04297ac9705cf1
msgid "the |mms-home| or :products:`Ops Manager, an on-premise solution available in MongoDB Enterprise Advanced </mongodb-enterprise-advanced?jmp=docs>`"
msgstr ""

#: ../source/faq/concurrency.txt:113
# 714f461782c94ad3930943515e56a59e
msgid "Specifically, the :data:`~serverStatus.locks` document in the :doc:`output of serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field in the :doc:`current operation reporting </reference/method/db.currentOp>` provides insight into the type of locks and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:119
# e33a1a5a6f284d9c947a4a690f0f4f31
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:126
# ebde39d1f1e34b849a3d1e64a1911b2b
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:128
# 42902856824346cbbc9fe5509d057ae3
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:130
# 412f696a8a304ad68c496ff299398821
msgid "Long running read and write operations, such as queries, updates, and deletes, yield under many conditions.  MongoDB operations can also yield locks between individual document modifications in write operations that affect multiple documents like :method:`~db.collection.update()` with the ``multi`` parameter."
msgstr ""

#: ../source/faq/concurrency.txt:136
# e19e6e7a0db148f185b572aa2539141e
msgid "MongoDB's :ref:`mmapv1 <storage-mmapv1>` storage engine uses heuristics based on its access pattern to predict whether data is likely in physical memory before performing a read. If MongoDB *predicts* that the data is not in physical memory, an operation will yield its lock while MongoDB loads the data into memory. Once data is available in memory, the operation will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:144
# dae1398c1a05439085fbfe1018a2a44d
msgid "For storage engines supporting document level :term:`concurrency control`, yielding is not necessary when accessing storage, as the :term:`intent locks <intent lock>` held at the global, database and collection level do not block other readers and writers."
msgstr ""

#: ../source/faq/concurrency.txt:149
# b500445863c04218a4ca7bc198a83898
msgid "MongoDB does not yield locks when scanning an index even if it predicts that the index is not in memory."
msgstr ""

#: ../source/faq/concurrency.txt:156
# d19edfc4f8c74f27bfa75672038318ee
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:160
# 5551df7431ca4899accde860ed07c68b
msgid "The following table lists common database operations and the types of locks they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
# d5227ebc39ff43e68488da92d7df0011
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
# 707d6e0a223e431b9f61ec39465b9122
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
# 83165a3daff14b8ca0c1d1df9568d4ce
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
# d6f8c522850d41f5bf388240063494dd
# 1dd3d91d6c644e06aa6540f9d4a05905
# a070ff0e6dd243a58701cfd50b5f62f1
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
# 49c5c9719704475b9d9b77a009bb8a4b
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
# 1e0b06bcfca546a3bc000b68f20cfda0
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
# 1c2663309a094942ad7409fe9c21d8b9
# 96ccfb01979a4167a6ff08a1d7334e8e
# 0934c1edebf647eeb61e09e71fd54d3b
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
# 9a081b63573c475fa19aef56f31d9f5d
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
# b065ed5aa8a34450ae566174d599349e
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
# 02f7ddf1cdda4482ae8067a6f948e78d
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
# ccf822dd78054be2a205b6bd405614a3
msgid "Read lock and write lock, unless operations are specified as non-atomic. Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
# 478d63cf4e2e4ca79be290a447809739
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
# c62dbf4f021e46798d7bacb1d6ad8827
msgid "Building an index in the foreground, which is the default, locks the database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
# 6def3e11de9f4e62a8491dc75705a124
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:45
# 2d4e0db9498d4479a92630fb0b631e65
msgid "Write lock. The :method:`db.eval()` method takes a global write lock while evaluating the JavaScript function. To avoid taking this global write lock, you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:51
# ca6d7b182bbc4d2cbbe7a17110e71957
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:56
# 51e00f0380234972b2a9631cba21e971
msgid "Write lock. By default, :dbcommand:`eval` command takes a global write lock while evaluating the JavaScript function. If used with ``nolock: true``, the :dbcommand:`eval` command does *not* take a global write lock while evaluating the JavaScript function. However, the logic within the JavaScript function may take write locks for write operations."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:64
# d0941b10e9a943058529eb9ff13cbcc9
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:169
# 37d44e4915a94b8a879dd7c7dff32ee8
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:171
# d6f4ae815ed844e193e4f030e589805f
msgid "Certain administrative commands can exclusively lock the database for extended periods of time. In some deployments, for large databases, you may consider taking the :program:`mongod` instance offline so that clients are not affected. For example, if a :program:`mongod` is part of a :term:`replica set`, take the :program:`mongod` offline and let other members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:178
# db8bd84705b4431ebc1f0e795622a582
msgid "The following administrative operations require an exclusive (i.e. write) lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:181
# 0f9dba9c3a4f4adfa4ac159f3bb0b15c
msgid ":method:`db.collection.createIndex()`, when issued *without* setting ``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:183
# c446b82fbcda4b839cb429f2261697d9
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:184
# 6e73599d9046476d81c9441e5f04f98c
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:185
# ccc922fa1e414307ae36909210bd9fdb
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:186
# a23a0c9b7934465dbc74ed593ff51023
msgid ":method:`db.createCollection()`, when creating a very large (i.e. many gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:188
# f9c8f9cac6d641b98c31320d1a639d14
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:189
# 65618c77006a4c52839cb419c145f4b3
msgid ":method:`db.copyDatabase()`. This operation may lock all databases. See :ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:192
# 0f6bf3d0bb4a49bd8fe7518c1311b435
msgid "The following administrative commands lock the database but only hold the lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:195
# 34fae6fbf07a4d52bd2ebaf264a4fbb1
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:196
# 20bb36c70757449eaa1cf33f6e7c9421
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:197
# b8ac683a9f564f48963dc6fa313e5959
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:198
# 4bb1355b7c624a6080ddb192af74dd89
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:200
# f17428020a2549e2a94d9652616ab815
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:201
# 5c136f641a2e405c828c418bb9a43d3f
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:206
# 565feb007a9a4099849645273c7f7b41
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:208
# 1f8c89e2847f47eba7267cb8c8cdc886
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:210
# 290854c9b2034670bd32f8710313a041
msgid ":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance at once."
msgstr ""

#: ../source/faq/concurrency.txt:213
# f855cbee55684fb6a5132ab917c30c5d
msgid ":method:`db.repairDatabase()` obtains a global write lock and will block other operations until it finishes."
msgstr ""

#: ../source/faq/concurrency.txt:216
# 441c92fdc0354b03825c392d88bed463
msgid ":term:`Journaling <journal>`, which is an internal operation, locks all databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:220
# 7cc2fb09aa3b4c7d8b21eb2714deef63
msgid ":doc:`User authentication </core/authentication>` requires a read lock on the ``admin`` database for deployments using :ref:`2.6 user credentials <admin-system-users-collection>`. For deployments using the 2.4 schema for user credentials, authentication locks the ``admin`` database as well as the database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:226
# c8794f0056aa498da72cd98624becc28
msgid "All writes to a replica set's :term:`primary` lock both the database receiving the writes and then the ``local`` database for a short time. The lock for the ``local`` database allows the :program:`mongod` to write to the primary's :term:`oplog` and accounts for a small portion of the total time of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:233
# d05c3bb75fec4f5085e2f20d2c59f0b0
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:235
# a0569635449e4b6690e57ee549f9715c
msgid ":term:`Sharding <sharding>` improves concurrency by distributing collections over multiple :program:`mongod` instances, allowing shard servers (i.e. :program:`mongos` processes) to perform any number of operations concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/faq/concurrency.txt:241
# dce6645d11a14e80b6af5b99c6d63c49
msgid "Each :program:`mongod` instance is independent of the others in the shard cluster and uses its own :ref:`locks <faq-concurrency-locking>`. The operations on one :program:`mongod` instance do not block the operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:249
# bad475b3d05b41818dcf702b4ebd0b3a
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:251
# 603566e108e346e49bc31d3598bc801b
msgid "In :term:`replication`, when MongoDB writes to a collection on the :term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which is a special collection in the ``local`` database.  Therefore, MongoDB must lock both the collection's database and the ``local`` database. The :program:`mongod` must lock both databases at the same time to keep the database consistent and ensure that write operations, even with replication, are \"all-or-nothing\" operations."
msgstr ""

#: ../source/faq/concurrency.txt:260
# cd2fa814b7a44dc7983ac6b1e2fea262
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:262
# 6eee6278e7aa4230b676d72feed3840b
msgid "In :term:`replication`, MongoDB does not apply writes serially to :term:`secondaries <secondary>`. Secondaries collect oplog entries in batches and then apply those batches in parallel. Secondaries do not allow reads while applying the write operations, and apply write operations in the order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:268
# 4b7ea17499204227818969bdd5fc7a8b
msgid "MongoDB can apply several writes in parallel on replica set secondaries, in two phases:"
msgstr ""

#: ../source/faq/concurrency.txt:271
# e95fb71cf04e4c7aa10bececb2e59cc6
msgid "During the first *prefer* phase, under a read lock, the :program:`mongod` ensures that all documents affected by the operations are in memory. During this phase, other clients may execute queries against this member."
msgstr ""

#: ../source/faq/concurrency.txt:276
# 162d3c2b923c493a95835ba7f349a177
msgid "A thread pool using write locks applies all write operations in the batch as part of a coordinated write phase."
msgstr ""

#: ../source/faq/concurrency.txt:280
# c036ea1d7d66485cbdaba6beb210fb66
msgid "What kind of concurrency does MongoDB provide for JavaScript operations?"
msgstr ""

#: ../source/faq/concurrency.txt:282
# e7fb56ea707444d2b1c9ec4aa4ce294f
msgid "The V8 JavaScript engine added in 2.4 allows multiple JavaScript operations to run at the same time. Prior to 2.4, a single :program:`mongod` could only run a *single* JavaScript operation at once."
msgstr ""

#: ../source/faq/concurrency.txt:289
# d52b67dffa844e23a9334894e5233006
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/faq/concurrency.txt:291
# 4fd12e289dd84b6bba2a705b93a10ce2
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/concurrency.txt:293
# 28aaca5365f245749bc17b425190d3b7
msgid "However, MongoDB does provide atomic operations on a single document. Often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/concurrency.txt:298
# f4709586fb9f4bdcb3c9087e1076ed25
msgid "For example, in MongoDB, you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation. Relational databases might represent the same kind of data with multiple tables and rows, which would require transaction support to update the data atomically."
msgstr ""

#: ../source/faq/concurrency.txt:304
#: ../source/faq/concurrency.txt:356
# d027c80206e544a09adbc73a0e7e0caf
# 6068f843bcfe4ad3994a0832acbdaa40
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/faq/concurrency.txt:307
# b2c9a7d149eb4482a4d872e9d64cc070
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

#: ../source/faq/concurrency.txt:309
# 60b27fafd87243ac89ee1184a9f1677b
msgid "MongoDB provides the following guarantees in the presence of concurrent read and write operations. These guarantees hold on systems configured with either the MMAPv1 or WiredTiger storage engines."
msgstr ""

#: ../source/faq/concurrency.txt:313
# 85115ac5955f4c5b88388492fc70a2bf
msgid "Read and write operations are atomic with respect to a single document and will always leave the document in a consistent state. This means that readers will never see a partially updated document, and indices will always be consistent with the contents of the collection. Furthermore, a set of read and write operations to a single document are serializable."
msgstr ""

#: ../source/faq/concurrency.txt:319
# 824db71aff764f8ab94db1faedf63974
msgid "Correctness with respect to query predicates, e.g. :method:`db.collection.find()` will only return documents that match and :method:`db.collection.update()` will only write to matching documents."
msgstr ""

#: ../source/faq/concurrency.txt:323
# 1890a5df4057490eafd24dbf567c1b5f
msgid "Correctness with respect to sort. For read operations that request a sort order (e.g. :method:`db.collection.find()` or :method:`db.collection.aggregate()`), the sort order will not be violated due to concurrent writes."
msgstr ""

#: ../source/faq/concurrency.txt:328
# 1c0eda1cb2cd444e9cfd8e8c2ac00107
msgid "Although MongoDB provides these strong guarantees for single-document operations, read and write operations may access an arbitrary number of documents during execution.  Multi-document operations do *not* occur transactionally and are not isolated from concurrent writes. This means that the following behaviors are expected under the normal operation of the system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

#: ../source/faq/concurrency.txt:335
# f42247cf571f481ca9301b0e2dfb20de
msgid "Non-point-in-time read operations. Suppose a read operation begins at time *t*\\ :sub:`1` and starts reading documents. A write operation then commits an update to a document at some later time *t*\\ :sub:`2`. The reader may see the updated version of the document, and therefore does not see a point-in-time snapshot of the data."
msgstr ""

#: ../source/faq/concurrency.txt:341
# 72843319468b4f3c8e6c83b57e79839f
msgid "Non-serializable operations. Suppose a read operation reads a document *d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write dependency such that, if the operations were to be serialized, the read operation must precede the write operation. But also suppose that the write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ :sub:`4`. This introduces a write-read dependency which would instead require the read operation to come *after* the write operation in a serializable schedule. There is a dependency cycle which makes serializability impossible."
msgstr ""

#: ../source/faq/concurrency.txt:352
# c0155203212b4ea8b4b9d258bd09fe8a
msgid "Dropped results. Reads may miss matching documents that are updated or deleted during the course of the read operation. However, data that has not been modified during the operation will always be visible."
msgstr ""

#: ../source/faq/concurrency.txt:359
# c2ae61158d2a4319b81fa78152538353
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

#: ../source/faq/concurrency.txt:361
# 95e0c640e6f34306b6526680160ddc23
msgid "Yes, readers can see the results of writes before they are made durable, regardless of write concern level or journaling configuration. As a result, applications may observe the following behaviors:"
msgstr ""

#: ../source/faq/concurrency.txt:365
# 814a7f9efbf84557b8be07e768b647ae
msgid "MongoDB will allow a concurrent reader to see the result of the write operation before the write is acknowledged to the client application. For details on when writes are acknowledged for different write concern levels, see :doc:`/core/write-concern`."
msgstr ""

#: ../source/faq/concurrency.txt:370
# 8c7b0540a3ca4f23a2c99487efdfb1d8
msgid "Reads can see data which may subsequently be rolled back in rare cases such as replica set failover or power loss. It does *not* mean that read operations can see documents in a partially written or otherwise inconsistent state."
msgstr ""

#: ../source/faq/concurrency.txt:374
# bb5c76b176244490aa208cf7078c426a
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
# f43393623fdd4a9db69e31ddbf118045
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:0
# 46a69d7bb78340de9aa3dd9fe41e152a
msgid "On this page"
msgstr ""

#: ../source/faq/concurrency.txt:15
# e71f09f482ec46149f17b9dc9db791ef
msgid "MongoDB allows multiple clients to read and write the same data. In order to ensure consistency, it uses locking and other :term:`concurrency control` measures to prevent multiple clients from modifying the same piece of data simultaneously. Together, these mechanisms guarantee that all writes to a single document occur either in full or not at all and that clients never see an inconsistent view of the data."
msgstr ""

#: ../source/faq/concurrency.txt:27
# a769125eb9c444748b269e3bc02517c3
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/includes/extracts/lock-general.rst:1
# 35f0676e00694c36a076584e7af00690
msgid "MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to lock at the global, database or collection level, and allows for individual storage engines to implement their own concurrency control below the collection level (e.g., at the document-level in WiredTiger)."
msgstr ""

#: ../source/includes/extracts/lock-general.rst:7
# 5e70602e3f324f41abb25719a01c7787
msgid "MongoDB uses reader-writer locks that allow concurrent readers shared access to a resource, such as a database or collection, but in MMAPv1, give exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:31
# 2d9d507b30764773b400ef17c16af46e
msgid "In addition to a shared (S) locking mode for reads and an exclusive (X) locking mode for write operations, intent shared (IS) and intent exclusive (IX) modes indicate an intent to read or write a resource using a finer granularity lock.  When locking at a certain granularity all higher levels are locked using an :term:`intent lock`."
msgstr ""

#: ../source/faq/concurrency.txt:37
# 2fcfce024a2a4f63b38e2cd2a0504bfc
msgid "For example, when locking a collection for writing (using mode X), both the corresponding database lock and the global lock must be locked in intent exclusive (IX) mode. A single database can simultaneously be locked in IS and IX mode, but an exclusive (X) lock cannot coexist with any other modes, and a shared (S) lock can only coexists with intent shared (IS) locks."
msgstr ""

#: ../source/faq/concurrency.txt:46
# 9c8557e8672d40998ac801f9340d92b5
msgid "Locks are fair, with reads and writes being queued in order. However, to optimize throughput, when one request is granted, all other compatible requests will be granted at the same time, potentially releasing them before a conflicting request.  For example, consider a case in which an X lock was just released, and in which the conflict queue contains the following items:"
msgstr ""

#: ../source/faq/concurrency.txt:53
# 98c47a3b5f514b1fb77efd0026216b5f
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""

#: ../source/faq/concurrency.txt:55
# 8c44d3e85ff94721a7988505400a3409
msgid "In strict first-in, first-out (FIFO) ordering, only the first two IS modes would be granted. Instead MongoDB will actually grant all IS and S modes, and once they all drain, it will grant X, even if new IS or S requests have been queued in the meantime. As a grant will always move all other requests ahead in the queue, no starvation of any request is possible."
msgstr ""

#: ../source/faq/concurrency.txt:62
# 8f159c4124ae406a86f0a76120b30e86
msgid "See the Wikipedia page on `Multiple granularity locking <http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more information."
msgstr ""

#: ../source/faq/concurrency.txt:68
# 39c1edd0f3fa4f65984903712a395347
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:73
# e07b20f24f0f4f088ca094a791da8fc9
msgid "For WiredTiger"
msgstr ""

#: ../source/faq/concurrency.txt:75
# ae2fad7bca884ab8ba81f01320c26c68
msgid "Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger <storage-wiredtiger>` storage engine."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:1
# b885c8a3aeba4a40ad0647487ab8563a
msgid "For most read and write operations, WiredTiger uses optimistic concurrency control. WiredTiger uses only intent locks at the global, database and collection levels. When the storage engine detects conflicts between two operations, one will incur a write conflict causing MongoDB to transparently retry that operation."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:7
# 22eb5125e5c549c29b4ef720fa3f8f31
msgid "Some global operations, typically short lived operations involving multiple databases, still require a global \"instance-wide\" lock. Some other operations, such as dropping a collection, still require an exclusive database lock."
msgstr ""

#: ../source/faq/concurrency.txt:81
# 522546883fa14c3cb1c7c1e6dbdaff1e
msgid "For MMAPv1"
msgstr ""

#: ../source/faq/concurrency.txt:83
# 150faa2208da4f8ebccf9babd5ee07b2
msgid "The MMAPv1 storage engine uses collection-level locking as of the 3.0 release series, an improvement on earlier versions in which the database lock was the finest-grain lock. Third-party storage engines may either use collection-level locking or implement their own finer-grained concurrency control."
msgstr ""

#: ../source/faq/concurrency.txt:89
# 8e3ec156712a4a6e82ddd06b873637d3
msgid "For example, if you have six collections in a database using the MMAPv1 storage engine and an operation takes a collection-level write lock, the other five collections are still available for read and write operations. An exclusive database lock makes all six collections unavailable for the duration of the operation holding the lock."
msgstr ""

#: ../source/faq/concurrency.txt:96
# bc50bfeb7c2b42dcb603b563ebba6e0b
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:98
# 8f81fc89e4714f0ba903c57d054d85ef
msgid "For reporting on lock utilization information on locks, use any of the following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:101
#: ../source/faq/concurrency.txt:195
# 7c573b7e1235469aa61f277d35fc1a43
# 8126c675315c4a84abb7f1dc4369e21d
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:102
# 6ef3c513ac3d491195e575e1c53e7e97
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:103
# ffb83ff7a2cf4e5fb40a4d5f1dda29ec
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:104
# 5ad560f99e3f4767a2c4f1542063434f
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:105
# 3b70446b98d342169f0ae9dcac7d845b
msgid "the |mms-home| or :products:`Ops Manager, an on-premise solution available in MongoDB Enterprise Advanced </mongodb-enterprise-advanced?jmp=docs>`"
msgstr ""

#: ../source/faq/concurrency.txt:110
# 86db9dcc2a7442ad9307d1ee5dda4317
msgid "Specifically, the :serverstatus:`locks` document in the :doc:`output of serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field in the :doc:`current operation reporting </reference/method/db.currentOp>` provides insight into the type of locks and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:116
# 59011990a43f4938aa3366c7cd7893c9
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:123
# 1712b684f27d4acd9cf7e57798d21bd4
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:125
# 6c6a13a271ab4b699f9bcea76d4c3da4
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:127
# e6d034045f0d461998ac504aa82672aa
msgid "Long running read and write operations, such as queries, updates, and deletes, yield under many conditions.  MongoDB operations can also yield locks between individual document modifications in write operations that affect multiple documents like :method:`~db.collection.update()` with the ``multi`` parameter."
msgstr ""

#: ../source/faq/concurrency.txt:133
# 6f45b5c2e81d4c2c8bc5f87276800866
msgid "MongoDB's :ref:`MMAPv1 <storage-mmapv1>` storage engine uses heuristics based on its access pattern to predict whether data is likely in physical memory before performing a read. If MongoDB *predicts* that the data is not in physical memory, an operation will yield its lock while MongoDB loads the data into memory. Once data is available in memory, the operation will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:141
# bbd6c02ce01e44b0b90f71fb88371bd2
msgid "For storage engines supporting document level :term:`concurrency control`, such as :doc:`WiredTiger </core/wiredtiger>`, yielding is not necessary when accessing storage as the :term:`intent locks <intent lock>`, held at the global, database and collection level, do not block other readers and writers."
msgstr ""

#: ../source/faq/concurrency.txt:147
# eb64a73f291f460e94ba3d15b447724a
msgid "MongoDB does not yield locks when scanning an index even if it predicts that the index is not in memory."
msgstr ""

#: ../source/faq/concurrency.txt:154
# 50b0f810ec714063926b51941f0ed694
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:156
# e548e025be334d739450aebc20d0a587
msgid "The following table lists common database operations and the types of locks they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
# 7d94e9ce21984d1883350a9d0ecfba70
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
# 817dd00136a44358bc3b9eb39d2e275c
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
# 3644329ec3dd4273acf7bec71a1f6926
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
# e5e2823a74fb4bedaa4214e7b6e60333
# e919fd3a58304483afa200cf83a5a4a4
# 374b5b92472e43b9a86e1133e07e5507
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
# 40995036bac64f38b366a02ae5beaf83
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
# 7cb0ac9fc8c8439788dae8dd87594fcc
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
# 3fce86ea65cc434fbea135e55ef3efe0
# 502abf46e36f41e5b297bf5f386658a5
# 3cfae4fd4d694434b5f1e829e9009e4c
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
# 8ec9fea9aeeb477b9b5d26e5da9cccf8
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
# 4d98f815da4042348f7e6ed2da79c396
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
# 4cc9edc22091427495968cf04ebdbebb
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
# 981cc169dd5a4c01935f7052107cc5b7
msgid "Read lock and write lock, unless operations are specified as non-atomic. Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
# 8a08d5c8508f407fb3049e4870542dc1
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
# 9dcdc64c6ee741b7a804174cb8d0ca12
msgid "Building an index in the foreground, which is the default, locks the database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
# 86b99e47f00546fb8b04790a0754d90a
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:45
# e8342feedb9a46b8945df700c9b0667a
msgid "Write lock. The :method:`db.eval()` method takes a global write lock while evaluating the JavaScript function. To avoid taking this global write lock, you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:51
# e81413aa9ccd4e68bade5898f6dec7ba
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:56
# 3356010060d2405fa181ba54a154dc0e
msgid "Write lock. By default, :dbcommand:`eval` command takes a global write lock while evaluating the JavaScript function. If used with ``nolock: true``, the :dbcommand:`eval` command does *not* take a global write lock while evaluating the JavaScript function. However, the logic within the JavaScript function may take write locks for write operations."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:64
# 6004fbe59f1c47d18a497c0d9f0977d3
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:165
# 93f15e8780dc4ee2bcaf18c22d7f0d81
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:167
# a9d958f023654fb6bc875932e8d644dd
msgid "Certain administrative commands can exclusively lock the database for extended periods of time. In some deployments, for large databases, you may consider taking the :program:`mongod` instance offline so that clients are not affected. For example, if a :program:`mongod` is part of a :term:`replica set`, take the :program:`mongod` offline and let other members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:174
# 8a0b88eee02e4071ab2425e23aa1d923
msgid "The following administrative operations require an exclusive (i.e. write) lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:177
# bf94a020adaf40b18918cc78b277a4dc
msgid ":method:`db.collection.createIndex()`, when issued *without* setting ``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:179
# cc7c3674b2f14ed98673f6de45b2b5eb
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:180
# 1213449a872049cca0384b8e30eca89f
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:181
# 03d00b9f6e43462a8e7da7a92816eeb8
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:182
# 1e9bc9f544be43a99bb610d0e431ab0c
msgid ":method:`db.createCollection()`, when creating a very large (i.e. many gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:184
# 4db2feee6c3744a08d672db256f9d4de
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:185
# ef767febff5241a8b9ab231c8058ec6c
msgid ":method:`db.copyDatabase()`. This operation may lock all databases. See :ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:188
# 0535e0a27a3c436aacf721c04e1f41f9
msgid "The following administrative commands lock the database but only hold the lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:191
# 959a0e88ba0745c99cc5eb522148326b
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:192
# 50d7bfd6237046edbda5a7720ac2e74c
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:193
# 8eb6ebdf7e144725af4629bbd2c83c2d
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:194
# c6f50c48b4a54667bac5222a52abb376
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:196
# 67a26e5858ef4306815063494832c458
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:197
# bdc70061c5464c0686cf8155a8557c30
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:202
# 53b1c66e43754ce0aa1f56379cee2f60
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:204
# e7f9fb5017c040ad95cea50d420551fd
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:206
# 4bd28e59468c4f61a3332eb4e6b28e14
msgid ":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance at once."
msgstr ""

#: ../source/faq/concurrency.txt:209
# 34c4cbad3bd14e24b4adcca4cccb57aa
msgid ":method:`db.repairDatabase()` obtains a global write lock and will block other operations until it finishes."
msgstr ""

#: ../source/faq/concurrency.txt:212
# 3ad5b6bd4d33452189b2dbfe5b1f0a5d
msgid ":term:`Journaling <journal>`, which is an internal operation, locks all databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:216
# 8522dbda7fe44d13ab98667b41bace99
msgid ":doc:`User authentication </core/authentication>` requires a read lock on the ``admin`` database for deployments using :ref:`2.6 user credentials <admin-system-users-collection>`. For deployments using the 2.4 schema for user credentials, authentication locks the ``admin`` database as well as the database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:222
# dd429891083f4e41886dc1fd32b66fc0
msgid "All writes to a replica set's :term:`primary` lock both the database receiving the writes and then the ``local`` database for a short time. The lock for the ``local`` database allows the :program:`mongod` to write to the primary's :term:`oplog` and accounts for a small portion of the total time of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:229
# 97685785e3f94c24a6beaa6f5df081f0
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:231
# af16e0f74f1945f88e10cfb2742c5a17
msgid ":term:`Sharding <sharding>` improves concurrency by distributing collections over multiple :program:`mongod` instances, allowing shard servers (i.e. :program:`mongos` processes) to perform any number of operations concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/includes/extracts/lock-sharding.rst:1
# 5ce3ad55a7b14affbaf86a5ca2448033
msgid "In a sharded cluster, locks apply to each individual shard, not to the whole cluster; i.e. each :program:`mongod` instance is independent of the others in the shard cluster and uses its own :ref:`locks <faq-concurrency-locking>`. The operations on one :program:`mongod` instance do not block the operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:242
# fbee4a63e6f3468eb76c93b42f9b9dd8
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:244
# 43dc308c6c1c421e98df67e131398636
msgid "With replica sets, when MongoDB writes to a collection on the :term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which is a special collection in the ``local`` database. Therefore, MongoDB must lock both the collection's database and the ``local`` database. The :program:`mongod` must lock both databases at the same time to keep the database consistent and ensure that write operations, even with replication, are \"all-or-nothing\" operations."
msgstr ""

#: ../source/includes/extracts/lock-replica-set-primary.rst:1
# 99ca97566b6f40c6918ace2ac3f93e9f
msgid "When writing to a :term:`replica set`, the lock's scope applies to the :term:`primary`."
msgstr ""

#: ../source/faq/concurrency.txt:255
# f4565836100843e2be9f4b2b187eabca
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:257
# 3005550c147c4769af61af4ed475122b
msgid "In :term:`replication`, MongoDB does not apply writes serially to :term:`secondaries <secondary>`. Secondaries collect oplog entries in batches and then apply those batches in parallel. Secondaries do not allow reads while applying the write operations, and apply write operations in the order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:264
# 7c2a2cc093bb46dd8c72686a781c765e
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/faq/concurrency.txt:266
# 3afbebe637fa47efa8f940bd40435d2c
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/concurrency.txt:268
# b32fa22b7f9241a398ebc2fa9d1c2125
msgid "However, MongoDB does provide atomic operations on a single document. Often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/concurrency.txt:273
# 8f98aece830847a5a8b3a2dbeaa25a11
msgid "For example, in MongoDB, you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation. Relational databases might represent the same kind of data with multiple tables and rows, which would require transaction support to update the data atomically."
msgstr ""

#: ../source/faq/concurrency.txt:279
#: ../source/faq/concurrency.txt:308
# 02ed6399c8874ce1a4068bbc150c2413
# 492bd36067724ca7b3e00623d711b2bc
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/faq/concurrency.txt:282
# 27851d87124f479ab9eaa0df672d8616
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

#: ../source/faq/concurrency.txt:284
# 41ff59de04a747abb77080fcd114f01d
msgid "MongoDB provides the following guarantees in the presence of concurrent read and write operations. These guarantees hold on systems configured with either the MMAPv1 or WiredTiger storage engines."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
# e65b318176b94bdba5210c151ca2f8d9
msgid "Write operations are atomic with respect to a single document; i.e. if a write is updating multiple fields in the document, a reader will never see the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
# 74986bc129c945088482d708878be237
msgid "With a standalone :program:`mongod` instance, a set of read and write operations to a single document is serializable. With a replica set, a set of read and write operations to a single document is serializable *only* in the absence of a rollback."
msgstr ""

#: ../source/faq/concurrency.txt:290
# f869cdac85e547fda22674c17d56a05c
msgid "Correctness with respect to query predicates, e.g. :method:`db.collection.find()` will only return documents that match and :method:`db.collection.update()` will only write to matching documents."
msgstr ""

#: ../source/faq/concurrency.txt:294
# d9194233f56b41088e9fe8d4d7e3d3a1
msgid "Correctness with respect to sort. For read operations that request a sort order (e.g. :method:`db.collection.find()` or :method:`db.collection.aggregate()`), the sort order will not be violated due to concurrent writes."
msgstr ""

#: ../source/faq/concurrency.txt:299
# 3ca251ceb3334c2894f708e643ed037a
msgid "Although MongoDB provides these strong guarantees for single-document operations, read and write operations may access an arbitrary number of documents during execution.  Multi-document operations do *not* occur transactionally and are not isolated from concurrent writes. This means that the following behaviors are expected under the normal operation of the system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
# dc60accd23054fa3bccbaf112dadc153
msgid "Non-point-in-time read operations. Suppose a read operation begins at time *t*\\ :sub:`1` and starts reading documents. A write operation then commits an update to one of the documents at some later time *t*\\ :sub:`2`. The reader may see the updated version of the document, and therefore does not see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
# f5aa5cebecc14650b7660f2a1b8df9a0
msgid "Non-serializable operations. Suppose a read operation reads a document *d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write dependency such that, if the operations were to be serialized, the read operation must precede the write operation. But also suppose that the write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ :sub:`4`. This introduces a write-read dependency which would instead require the read operation to come *after* the write operation in a serializable schedule. There is a dependency cycle which makes serializability impossible."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
# e6bd2d9259e144408733d32f46e6b6a9
msgid "Reads may miss matching documents that are updated during the course of the read operation."
msgstr ""

#: ../source/faq/concurrency.txt:311
# 5c1246cc727b41c4a8c813b103846be6
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

#: ../source/faq/concurrency.txt:315
# a5475c240927452c9d3c3dab35508ab3
msgid "MongoDB 3.2 introduces :ref:`3.2-rel-notes-readConcern` option. Clients using :readconcern:`majority` ``readConcern`` cannot see the results of writes before they are made :term:`durable`."
msgstr ""

#: ../source/faq/concurrency.txt:319
# 5970957e379f4001b315fdc472e490c6
msgid "Readers, using :readconcern:`\"local\"` ``readConcern`` can see the results of writes before they are made :term:`durable`, regardless of write concern level or journaling configuration. As a result, applications may observe the following behaviors:"
msgstr ""

#: ../source/faq/concurrency.txt:324
# 21162738e80447f4a185ca9fc60abe56
msgid "MongoDB will allow a concurrent reader to see the result of the write operation before the write is acknowledged to the client application. For details on when writes are acknowledged for different write concern levels, see :doc:`/reference/write-concern`."
msgstr ""

#: ../source/faq/concurrency.txt:329
# c70bb8d4870f4bc5b77c190ec538723d
msgid "Reads can see data which may subsequently be rolled back in cases such as replica set failover or power loss. It does *not* mean that read operations can see documents in a partially written or otherwise inconsistent state."
msgstr ""

#: ../source/faq/concurrency.txt:333
# 74f5a6c34e384e65b593b05f258553d9
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""


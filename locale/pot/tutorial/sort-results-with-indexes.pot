# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/sort-results-with-indexes.txt:6
# 6b31a875e68a4d43bb12345cd370cef0
msgid "Use Indexes to Sort Query Results"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:10
# cbf92d1837094b82ad1ccdfac2829909
msgid "In MongoDB, sort operations can obtain the sort order by retrieving documents based on the ordering in an index. If the query planner cannot obtain the sort order from an index, it will sort the results in memory. Sort operations that use an index often have better performance than those that do not use an index. In addition, sort operations that do *not* use an index will abort when they use 32 megabytes of memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:20
# c3c33d4f3e3c453881a99dfc208ffd06
msgid "Sort with a Single Field Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:22
# 6d497d16f6384ae88e3282c35319965f
msgid "If an ascending or a descending index is on a single field, the sort operation on the field can be in either direction."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:25
# 2e994e26f47949bc9ce86ca4bfb3f9eb
msgid "For example, create an ascending index on the field ``a`` for a collection ``records``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:32
# 7f0ef058f43445718a565e2fc7e5b075
msgid "This index can support an ascending sort on ``a``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:38
# b0fba817c1434ef69a8bc841b591a749
msgid "The index can also support the following descending sort on ``a`` by traversing the index in reverse order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:48
# 9c096714b80c403a93e78d9a1058da56
msgid "Sort on Multiple Fields"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:50
# 8ff7a9a48dfa4581af35762a8d943c2b
msgid "Create a :ref:`compound index <index-type-compound>` to support sorting on multiple fields."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:53
# 9562792b9e73429f974ff0ba831b2af6
msgid "You can specify a sort on all the keys of the index or on a subset; however, the sort keys must be listed in the *same order* as they appear in the index. For example, an index key pattern ``{ a: 1, b: 1 }`` can support a sort on ``{ a: 1, b: 1 }`` but *not* on ``{ b: 1, a: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:59
# e72dd408d40a4dff85d22f1846a1197f
msgid "The sort must specify the *same sort direction* (i.e.ascending/descending) for all its keys as the index key pattern or specify the *reverse sort direction* for all its keys as the index key pattern. For example, an index key pattern ``{ a: 1, b: 1 }`` can support a sort on ``{ a: 1, b: 1 }`` and ``{ a: -1, b: -1 }`` but *not* on ``{ a: -1, b: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:69
# f5ebce8f8d9047618cd8e028ac24e2ad
msgid "Sort and Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:71
# d20aca65d2e24542a32671e0091b4bb4
msgid "If the sort keys correspond to the index keys or an index *prefix*, MongoDB can use the index to sort the query results. A *prefix* of a compound index is a subset that consists of one or more keys at the start of the index key pattern."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:76
# 8dc3d426493d4f4b8790936f8db86f92
msgid "For example, create a compound index on the ``data`` collection:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:82
# c5d5677c26c14ca8a36fc194e7354a87
msgid "Then, the following are prefixes for that index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:90
# 83995204a4aa4a0bac08cfd67f87568f
msgid "The following query and sort operations use the index prefixes to sort the results. These operations do not need to sort the result set in memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:98
#: ../source/tutorial/sort-results-with-indexes.txt:156
# 91f302967756466ca7db489dd08984a6
# f43cdfcfd77d48ddb147be38d6e169f3
msgid "Example"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:100
#: ../source/tutorial/sort-results-with-indexes.txt:158
# 6fa50aa12d5647289d2c48b14971579d
# d1066da183024e9db7e7b367afcf37d0
msgid "Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:102
# c828921b23d7450682ae57b34702bd18
msgid "``db.data.find().sort( { a: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:104
#: ../source/tutorial/sort-results-with-indexes.txt:108
# 5961f46383de428a9b66c76b0898af31
# 87b564bc5d634bed918c532c2f1245d6
msgid "``{ a: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:106
# 6a594b96dcf74bd3b6eed7fb4369c5be
msgid "``db.data.find().sort( { a: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:110
# 0ad6e1a12b6346d6b6f4858b5df179d4
msgid "``db.data.find().sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:112
#: ../source/tutorial/sort-results-with-indexes.txt:116
#: ../source/tutorial/sort-results-with-indexes.txt:124
#: ../source/tutorial/sort-results-with-indexes.txt:170
# ea550627d0bd4d54b4642103aee0024f
# e95de756bcf741338171a7727591a20c
# 5b8d28ad3879420f91e58fcf10f2b9bb
# 3e7bf84c62c8448b83246485d39bddde
msgid "``{ a: 1, b: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:114
# 951bb4693f7349458d3db6754e2402a5
msgid "``db.data.find().sort( { a: -1, b: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:118
# 1553c46152c74f6fbb0fbf89b370f9ee
msgid "``db.data.find().sort( { a: 1, b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:120
#: ../source/tutorial/sort-results-with-indexes.txt:166
# 23351550881e4a5381d6c18d401d1d9a
# af5cf475dad74314be7aa821c8062ac4
msgid "``{ a: 1, b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:122
# d495ec75d810408fbac2aad6242cd369
msgid "``db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:126
# 38163e320d9e4e07838c921278a2ad02
msgid "Consider the following example in which the prefix keys of the index appear in both the query predicate and the sort:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:133
# e5659261f47c41648ea6887fb09889b3
msgid "In such cases, MongoDB can use the index to retrieve the documents in order specified by the sort. As the example shows, the index prefix in the query predicate can be different from the prefix in the sort."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:138
# d6f08b25818c433a9a6d77f6ec9431cc
msgid "Sort and Non-prefix Subset of an Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:140
# edd2bf7db6e7482198baeaad5cd20413
msgid "An index can support sort operations on a non-prefix subset of the index key pattern. To do so, the query must include **equality** conditions on all the prefix keys that precede the sort keys."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:144
# 46c11f4fd1f34d72bcd69cb047a48946
msgid "For example, the collection ``data`` has the following index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:150
# 1695b2ed735240ee9271ec32671367bc
msgid "The following operations can use the index to get the sort order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:160
# fa07435a160346b9a1b4c2b3ea2a7421
msgid "``db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:162
# fbd59f860bfe4a4ea9ed84211652544e
msgid "``{ a: 1 , b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:164
# 69f696048abc409fa5037a07d34e00d0
msgid "``db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:168
# 6d63a527f0f543c5bef1f9ece88ca60d
msgid "``db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:172
# c504dfc4ccb840f194336c5fbb1338db
msgid "As the last operation shows, only the index fields *preceding* the sort subset must have the equality conditions in the query document; the other index fields may specify other conditions."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:176
# c268b88376784e07872698d91b27a170
msgid "If the query does **not** specify an equality condition on an index prefix that precedes or overlaps with the sort specification, the operation will **not** efficiently use the index. For example, the following operations specify a sort document of ``{ c: 1 }``, but the query documents do not contain equality matches on the preceding index fields ``a`` and ``b``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:188
# 56a3c651f0d84d5f8597da55a9259614
msgid "These operations **will not** efficiently use the index ``{ a: 1, b: 1, c: 1, d: 1 }`` and may not even use the index to retrieve the documents."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/sort-results-with-indexes.txt:6
# 7dde95f46cc44d7ba32402eb4b6873cb
msgid "Use Indexes to Sort Query Results"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:0
# 4e9987415f094656aa325f9abec47630
msgid "On this page"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:16
# 65979000b39c4057b62c1cd399626de0
msgid "In MongoDB, sort operations can obtain the sort order by retrieving documents based on the ordering in an index. If the query planner cannot obtain the sort order from an index, it will sort the results in memory. Sort operations that use an index often have better performance than those that do not use an index. In addition, sort operations that do *not* use an index will abort when they use 32 megabytes of memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:26
# 7e65cd029c5040a2a896d83605d9f754
msgid "Sort with a Single Field Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:28
# 524f0a99599840249728f2a4f5dd0a21
msgid "If an ascending or a descending index is on a single field, the sort operation on the field can be in either direction."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:31
# 70d51d2a60c54d2faa5c170a0523d6e4
msgid "For example, create an ascending index on the field ``a`` for a collection ``records``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:38
# 08d3da3fa75d4e8ab9d8f93dccbcfeb4
msgid "This index can support an ascending sort on ``a``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:44
# d53f565231d646288a8295fe257f05a0
msgid "The index can also support the following descending sort on ``a`` by traversing the index in reverse order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:54
# 7839c7ac9eb149199bef26153141b2ae
msgid "Sort on Multiple Fields"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:56
# a1bf46a98e75427e9e06995c840ff1e7
msgid "Create a :ref:`compound index <index-type-compound>` to support sorting on multiple fields."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:59
# 1dc5dd2dc3f04ba9bd314d0bd12e4666
msgid "You can specify a sort on all the keys of the index or on a subset; however, the sort keys must be listed in the *same order* as they appear in the index. For example, an index key pattern ``{ a: 1, b: 1 }`` can support a sort on ``{ a: 1, b: 1 }`` but *not* on ``{ b: 1, a: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:65
# e56ed7c35f0544d7af50f06fc96a7cac
msgid "The sort must specify the *same sort direction* (i.e.ascending/descending) for all its keys as the index key pattern or specify the *reverse sort direction* for all its keys as the index key pattern. For example, an index key pattern ``{ a: 1, b: 1 }`` can support a sort on ``{ a: 1, b: 1 }`` and ``{ a: -1, b: -1 }`` but *not* on ``{ a: -1, b: 1 }``."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:75
# e4753c3a80cf4bc7b5d9362833ab02d0
msgid "Sort and Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:77
# c45d03b779a441528f036e294ec47e29
msgid "If the sort keys correspond to the index keys or an index *prefix*, MongoDB can use the index to sort the query results. A *prefix* of a compound index is a subset that consists of one or more keys at the start of the index key pattern."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:82
# 8f38418944de44e49fcae8cd93203c8e
msgid "For example, create a compound index on the ``data`` collection:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:88
# 298382c159b24fb382458f556f00784d
msgid "Then, the following are prefixes for that index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:96
# 7d04be1515a14855ab265fe452f416e6
msgid "The following query and sort operations use the index prefixes to sort the results. These operations do not need to sort the result set in memory."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:104
#: ../source/tutorial/sort-results-with-indexes.txt:162
# 7e063044ef4e4e9eaafd1d17971d497c
# 7419594dae8e40789c37d308cbe8ebc9
msgid "Example"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:106
#: ../source/tutorial/sort-results-with-indexes.txt:164
# 5a394756292c48d58f9c665dd8dcf496
# 00a763f39c3246c28c94f114a301f8e9
msgid "Index Prefix"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:108
# 6838a69ac78c4c7488b9d046f57a4c9f
msgid "``db.data.find().sort( { a: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:110
#: ../source/tutorial/sort-results-with-indexes.txt:114
# a477f5e2288c407d86390f89086a0932
# 1c363d114f0a433ba430128c9600b49a
msgid "``{ a: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:112
# 85e4485b9e5f45e29e4d3638661302e1
msgid "``db.data.find().sort( { a: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:116
# 8b9184c287814259b9846bb38367a3b1
msgid "``db.data.find().sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:118
#: ../source/tutorial/sort-results-with-indexes.txt:122
#: ../source/tutorial/sort-results-with-indexes.txt:130
#: ../source/tutorial/sort-results-with-indexes.txt:176
# 7a514a59eab249298d271bc61275154e
# b6d7094db5e34d99a15de1383f551a3a
# 5bcfb06765de42eca84eb0fdc179ba00
# c99da133c5e146ffb6e2a40b0c543902
msgid "``{ a: 1, b: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:120
# d3da4c409a8e4e3c83f1815278290d48
msgid "``db.data.find().sort( { a: -1, b: -1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:124
# c0f3d0966aad4de49f323894806f87c9
msgid "``db.data.find().sort( { a: 1, b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:126
#: ../source/tutorial/sort-results-with-indexes.txt:172
# b3ba7035b926417da575defb1517a8b6
# e918ade3550645bdb75143f127cc4c54
msgid "``{ a: 1, b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:128
# d6ad5a5713fb4b2baee10e10b589a62c
msgid "``db.data.find( { a: { $gt: 4 } } ).sort( { a: 1, b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:132
# cbb3fa8c409448cb964b27a74da4114e
msgid "Consider the following example in which the prefix keys of the index appear in both the query predicate and the sort:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:139
# bac37ed968fc4f608068600eb49f37ca
msgid "In such cases, MongoDB can use the index to retrieve the documents in order specified by the sort. As the example shows, the index prefix in the query predicate can be different from the prefix in the sort."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:144
# 37f72619c847425f8e58ddeff0ab04a4
msgid "Sort and Non-prefix Subset of an Index"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:146
# 608e2fb3f2ac4f48bb89beac20905db4
msgid "An index can support sort operations on a non-prefix subset of the index key pattern. To do so, the query must include **equality** conditions on all the prefix keys that precede the sort keys."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:150
# 69f00825369b45948d0333052696f78f
msgid "For example, the collection ``data`` has the following index:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:156
# 1a763bfd91d7477692cf6ce6d11fef70
msgid "The following operations can use the index to get the sort order:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:166
# 89499e386e744e63b7f12f7e6b58ccbd
msgid "``db.data.find( { a: 5 } ).sort( { b: 1, c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:168
# d161e7e736e04cf68f113f26584be3f6
msgid "``{ a: 1 , b: 1, c: 1 }``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:170
# 4a4d3092bb9744ab808fad48598b1fca
msgid "``db.data.find( { b: 3, a: 4 } ).sort( { c: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:174
# b393da888db94e3a881621da3b06fcd2
msgid "``db.data.find( { a: 5, b: { $lt: 3} } ).sort( { b: 1 } )``"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:178
# ebd5eb41f17b49eb845de7e133d59c4a
msgid "As the last operation shows, only the index fields *preceding* the sort subset must have the equality conditions in the query document; the other index fields may specify other conditions."
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:182
# 21d4905981a845ebaec0d352b0eaec3a
msgid "If the query does **not** specify an equality condition on an index prefix that precedes or overlaps with the sort specification, the operation will **not** efficiently use the index. For example, the following operations specify a sort document of ``{ c: 1 }``, but the query documents do not contain equality matches on the preceding index fields ``a`` and ``b``:"
msgstr ""

#: ../source/tutorial/sort-results-with-indexes.txt:194
# af2b405354604e1ca762dec02079e52c
msgid "These operations **will not** efficiently use the index ``{ a: 1, b: 1, c: 1, d: 1 }`` and may not even use the index to retrieve the documents."
msgstr ""


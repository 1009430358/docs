# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-monetary-data.txt:3
# 4882bb61818d40dd8ad993eaebd0ab9c
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:0
# 385665f996604ba7a576ab95555363f3
msgid "On this page"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:14
# 8a6d2e52b16c4c0e88f2606a2de1c07f
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:16
# ebb804d282824847976c3b5f3b1abc68
msgid "MongoDB stores numeric data as either IEEE 754 standard 64-bit floating point numbers or as 32-bit or 64-bit signed integers. Applications that handle monetary data often require capturing fractional units of currency. However, arithmetic on floating point numbers, as implemented in modern hardware, often does not conform to requirements for monetary arithmetic. In addition, some fractional numeric quantities, such as one third and one tenth, have no exact representation in binary floating point numbers."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:27
# 0ae06cba51c84ebdb8d9b6547befa956
msgid "Arithmetic mentioned on this page refers to server-side arithmetic performed by :program:`mongod` or :program:`mongos`, and not to client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:31
# cb9386e23bff4fceae0a6b72d5dc53ef
msgid "This document describes two ways to model monetary data in MongoDB:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:33
# bec2b20796e844d1ace82742ae99f84b
msgid ":ref:`monetary-value-exact-precision` which multiplies the monetary value by a power of 10."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:36
# 08cfcbea1ac7434383c6aa0d4d6be992
msgid ":ref:`monetary-value-arbitrary-precision` which uses two fields for the value: one field to store the exact monetary value as a non-numeric and another field to store a floating point approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:44
# b52a2c01e7a746638c801aab6a0911b7
msgid "Use Cases for Exact Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:46
# 39665cfae2194dd9b137fd70f92e211c
msgid "If you regularly need to perform server-side arithmetic on monetary data, the exact precision model may be appropriate. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:49
# b1ec3494bd4440f3b427ff25bdf4c6ad
msgid "If you need to query the database for exact, mathematically valid matches, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:52
# 1007b9cf0ca845c5a3259c0f20817c5f
msgid "If you need to be able to do server-side arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation framework arithmetic </reference/operator/aggregation-arithmetic>`, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:60
# 9bf848a572d74227a2f32d73d3ff0cc7
msgid "Use Cases for Arbitrary Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:62
# 0a097f44e12b4f02b56b0a779d22e677
msgid "If there is no need to perform server-side arithmetic on monetary data, modeling monetary data using the arbitrary precision model may be suitable. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:66
# 383197b8ba8142d987cdf41bbc262f2a
msgid "If you need to handle arbitrary or unforeseen number of precision, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:69
# 0e6df12ff6f444938a44806d82174c62
msgid "If server-side approximations are sufficient, possibly with client-side post-processing, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:76
# ee7265100bac4540bb85d51e103f7f2c
msgid "Exact Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
# 6b72caf724d342289882c3e1a0c1cb1c
msgid "To model monetary data using the exact precision model:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:80
# d9e3736647ed4ae798b0f2b27e8d3894
msgid "Determine the maximum precision needed for the monetary value. For example, your application may require precision down to the tenth of one cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:84
# ff0b34953c154d0d8fca0008cef0053b
msgid "Convert the monetary value into an integer by multiplying the value by a power of 10 that ensures the maximum precision needed becomes the least significant digit of the integer. For example, if the required maximum precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:90
# 990e509edec4433383016d8ad6bc7de3
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:92
# a967adf4469b461695f1a77d2ab8a544
msgid "For example, the following scales ``9.99 USD`` by 1000 to preserve precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:99
# 4e0f343f963f4ec29ded64eaabbfd939
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:101
# 9dd3272411b740ae90b04636d4efe3d4
msgid "The scale factor is consistent for a currency; i.e. same scaling factor for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:104
# 4bd85b4953bc4143a30461a22145bac7
msgid "The scale factor is a constant and known property of the currency; i.e applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:107
# 5bd629a546d64407b2b35d993b89821a
msgid "When using this model, applications must be consistent in performing the appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:110
# 98506bdac9ee4003bb0bcd4479eeac6c
msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:115
# fed0adc3e0f940ac8ee972ca4b0d73d8
msgid "Arbitrary Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:117
# 429785fa62674bbd927e120e78c29d55
msgid "To model monetary data using the arbitrary precision model, store the value in two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
# 61b0d57fe43f4ee69bc2ce5e1da28137
msgid "In one field, encode the exact monetary value as a non-numeric data type; e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:123
# 63cd027892ec446d85c42bf0fde350ba
msgid "In the second field, store a double-precision floating point approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:126
# 48106ecc952146219428ab8eb5d887f4
msgid "The following example uses the arbitrary precision model to store ``9.99 USD`` for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:136
# 3445b69df05c477a8770fb2225e64a88
msgid "With some care, applications can perform range and sort queries on the field with the numeric approximation. However, the use of the approximation field for the query and sort operations requires that applications perform client-side post-processing to decode the non-numeric representation of the exact value and then filter out the returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:143
# 2bd74590fdd145db9cfa707d9363aa44
msgid "For use cases of this model, see :ref:`arbitrary-precision-model-use-case`."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-monetary-data.txt:3
# aa660c2f052d49d1a2a5d96fc289cc9e
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:8
# d4082acec5374fc7a1497da45bd3ee78
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:10
# 488a3e3bed404750a4f2e96bb80b3736
msgid "MongoDB stores numeric data as either IEEE 754 standard 64-bit floating point numbers or as 32-bit or 64-bit signed integers. Applications that handle monetary data often require capturing fractional units of currency. However, arithmetic on floating point numbers, as implemented in modern hardware, often does not conform to requirements for monetary arithmetic. In addition, some fractional numeric quantities, such as one third and one tenth, have no exact representation in binary floating point numbers."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:21
# a53aac0026454c76ac852c4e4b4262d6
msgid "Arithmetic mentioned on this page refers to server-side arithmetic performed by :program:`mongod` or :program:`mongos`, and not to client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:25
# 39bd9adf9e094700856b9623577b8b58
msgid "This document describes two ways to model monetary data in MongoDB:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:27
# e52a2c52e5414ddc919f337356de4da3
msgid ":ref:`monetary-value-exact-precision` which multiplies the monetary value by a power of 10."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:30
# b342d746ea5c42d693a07668bb26ab1e
msgid ":ref:`monetary-value-arbitrary-precision` which uses two fields for the value: one field to store the exact monetary value as a non-numeric and another field to store a floating point approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:38
# 63fa72854aab47c1817d866676a86887
msgid "Use Cases for Exact Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:40
# bb0031d21ef8461b9a1a010cbe28e556
msgid "If you regularly need to perform server-side arithmetic on monetary data, the exact precision model may be appropriate. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:43
# d88c9599a1734d2a8e6af01aecbff81b
msgid "If you need to query the database for exact, mathematically valid matches, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:46
# 8327df28e2fe4d78b31be0411aeb733e
msgid "If you need to be able to do server-side arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation framework arithmetic </reference/operator/aggregation-arithmetic>`, use :ref:`monetary-value-exact-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:54
# 19491a62a3984d28a9d671af1296e310
msgid "Use Cases for Arbitrary Precision Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:56
# a37996e0e0294dc99db6d7488df510ac
msgid "If there is no need to perform server-side arithmetic on monetary data, modeling monetary data using the arbitrary precision model may be suitable. For instance:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:60
# d6c39f521a6849bc88da033c2e26803f
msgid "If you need to handle arbitrary or unforeseen number of precision, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:63
# c1ef78c2e4b34665bc17ad8c51c5ec78
msgid "If server-side approximations are sufficient, possibly with client-side post-processing, see :ref:`monetary-value-arbitrary-precision`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:70
# c860ff57f9524e12bd6a7b0333fc2cd1
msgid "Exact Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:72
# e40e541d185b4c10ae4a43a62948e30c
msgid "To model monetary data using the exact precision model:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:74
# a2ebea087b3245cb852ad19a07835dd3
msgid "Determine the maximum precision needed for the monetary value. For example, your application may require precision down to the tenth of one cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
# 37db288a49fc47fda0c7934ea48d2fa0
msgid "Convert the monetary value into an integer by multiplying the value by a power of 10 that ensures the maximum precision needed becomes the least significant digit of the integer. For example, if the required maximum precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:84
# fb2346fc9ef542b4a5ec05aea56cbcbd
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:86
# a9611cefa7564d70a51aae93367a114b
msgid "For example, the following scales ``9.99 USD`` by 1000 to preserve precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:93
# d47e0c0233634ec995bda4d1406dea70
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:95
# cac3f1a1d7f544259e59793d0e7603a2
msgid "The scale factor is consistent for a currency; i.e. same scaling factor for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:98
# dc5698a5e044491e90e49c202d174f7d
msgid "The scale factor is a constant and known property of the currency; i.e applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:101
# b89c21d92d684e93b3f274db817b920d
msgid "When using this model, applications must be consistent in performing the appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:104
# c6edcd7470084f598da06b9a70a36616
msgid "For use cases of this model, see :ref:`exact-precision-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:109
# 21827b89353f4821bbce2ddcd64302c3
msgid "Arbitrary Precision"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:111
# e5cbf45b233f46318be9a967728ca75a
msgid "To model monetary data using the arbitrary precision model, store the value in two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:114
# d3c6022e54d74de3a9d1c9bb8dc7f81d
msgid "In one field, encode the exact monetary value as a non-numeric data type; e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:117
# a79233e122894b46975a09319e881b18
msgid "In the second field, store a double-precision floating point approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
# d2072c0cd92a420e95213dcb80c2ec6a
msgid "The following example uses the arbitrary precision model to store ``9.99 USD`` for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:130
# c5e830f6331d46738cf0c34a397b34a8
msgid "With some care, applications can perform range and sort queries on the field with the numeric approximation. However, the use of the approximation field for the query and sort operations requires that applications perform client-side post-processing to decode the non-numeric representation of the exact value and then filter out the returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:137
# 927cfa59220d4eb3ae2a890a0e6d7e59
msgid "For use cases of this model, see :ref:`arbitrary-precision-model-use-case`."
msgstr ""


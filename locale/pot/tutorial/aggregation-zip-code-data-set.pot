# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# a737949cf68f418dae2ecd90641fd1d8
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:7
# ff080cc115494f5b902ce4a3b4ae2370
msgid "The examples in this document use the ``zipcodes`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# 41e79ffec7cd4afcbe2302bb4439511e
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:15
# 90f4bf185c7841de8707d02566d24335
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:30
# 9b7e7266d9e246ed90b9b7f459d82afd
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:32
# 272ad16164d245e183233501388a80cc
msgid "The ``city`` field holds the city name. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# 730f005ddcdf4f7b96a165dfd21b2a98
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# 16499c640a644b988ca7f319a64a1c98
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:40
# 439677ce1e6a4f699054964619fd5c9d
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:43
# a75b35b772094e0bb903b191db5100f2
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:45
# b9cd14daf2834c348363ea69730a4df4
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:48
# c16e5b5b778d451da771e350e1186699
msgid "The :method:`aggregate() <db.collection.aggregate()>` method uses the :ref:`aggregation pipeline <aggregation-pipeline>` to processes documents into aggregated results. An :ref:`aggregation pipeline <aggregation-pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-reference>` with each stage processing the documents as they pass along the pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:56
# dda956630988418fa47cfee8dab0db4d
msgid "The :method:`aggregate() <db.collection.aggregate()>` method in the :program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:65
# cd6b1260a0f14ceda7e53c2bfdc56f29
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:67
# 295c410156a14ce489eb323bdda56e18
msgid "The following aggregation operation returns all states with total population greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:77
# b25d7a974a294d95bf1da799fd23ebcb
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:81
# 5fc98e659584477a8f7fe92d2fd5e7ec
msgid "The :pipeline:`$group` stage groups the documents of the ``zipcode`` collection by the ``state`` field, calculates the ``totalPop`` field for each state, and outputs a document for each unique state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:85
# 7afb0819008c4142a9c7d076a5f16e06
msgid "The new per-state documents have two fields: the ``_id`` field and the ``totalPop`` field. The ``_id`` field contains the value of the ``state``; i.e. the group by field. The ``totalPop`` field is a calculated field that contains the total population of each state. To calculate the value, :pipeline:`$group` uses the :group:`$sum` operator to add the population field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:92
# fbb0a784452c4d488487b98aa7cf11fa
msgid "After the :pipeline:`$group` stage, the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:102
# 1f5dbbcf83f548288182934519460916
msgid "The :pipeline:`$match` stage filters these grouped documents to output only those documents whose ``totalPop`` value is greater than or equal to 10 million. The :pipeline:`$match` stage does not alter the matching documents but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:107
# 4698f0487e2a4c7398ee316afd9465ca
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:116
# 9b554212ebfd44968228120d0c7b48e3
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:119
# 38501787576e4fe4ac73c66e3df5d552
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:121
# fd32d89444a14d54b3c739d6553ca3ea
msgid "The following aggregation operation returns the average populations for cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:131
# 8140f77bc566470dbc2dfcc9294f44c5
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by another :pipeline:`$group` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:135
# 0212eea02b4a4f6fb815ba1d7ea3992e
msgid "The first :pipeline:`$group` stage groups the documents by the combination of ``city`` and ``state``, uses the :group:`$sum` expression to calculate the population for each combination, and outputs a document for each ``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
# 02b4911de9df44518f89aea64d82c12d
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:154
# a616091ebf2a4499acfbb068712b61ed
msgid "A second :pipeline:`$group` stage groups the documents in the pipeline by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document), uses the :group:`$avg` expression to calculate the average city population (``avgCityPop``) for each state, and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
# 8f3d0e0e02e54f9c8349e1e73f773a54
msgid "The documents that result from this aggregation operation resembles the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:170
# 3138a03835dd47218a1acd3105e791d8
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:173
# 7deb18adea41407bbb785d273a52573e
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:175
# f54189e1581141b5b78c28bcc6af6a72
msgid "The following aggregation operation returns the smallest and largest cities by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:210
# 6999a2df84b747cbb88a691026a3735d
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another :pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:214
# c80092642b994aafb5b66347fd90cf4a
msgid "The first :pipeline:`$group` stage groups the documents by the combination of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the ``pop`` values for each combination, and outputs a document for each ``city`` and ``state`` combination."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:219
# 4878f4e615044c61a82b8a8513b31998
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:231
# 3f5e6ec5bca0443c8de675b0a970f89c
msgid "The :pipeline:`$sort` stage orders the documents in the pipeline by the ``pop`` field value, from smallest to largest; i.e. by increasing order. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:235
# 7572782e69cc4aa597460de6d8031a24
msgid "The next :pipeline:`$group` stage groups the now-sorted documents by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:239
# 4b0c2b38b8ca4e4f820d74490ac50032
msgid "The stage also calculates the following four fields for each state. Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestCity`` and ``biggestPop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestCity`` and ``smallestPop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:247
# 436dc10ad3724f65bbb630cf1debdc86
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:259
# c7efeb7f961f44c3b8dcf60f888a8c8d
msgid "The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:264
# 005ad424614e4bef9e29312ec0d0c98e
msgid "The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:280
# 92da270f478749cabf69c3388168e9b3
msgid "A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""


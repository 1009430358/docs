# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# e58db3d773ab4c6d8cf12c017bd5e37a
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:0
# 4b5825d865654b8ca9701690feea0a4d
msgid "On this page"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# 53b0e6efb0d74ceaad847ffe9bdae0cd
msgid "The examples in this document use the ``zipcodes`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:19
# 6026c7aa2e304b71b1ae6912838eafb9
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:21
# 95d5a17168864b1fb31fb67934d0762e
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# fa9c4bc55e3a4488a0eec61b29ece66a
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# d60389e6777a47269a502294e51c5048
msgid "The ``city`` field holds the city name. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
# 686a216eb38045998a13491dddb7d18c
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:44
# 45317a7a88754c3ea690c06305d8d709
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:46
# 255a295171614e259ba11eb8e7e7e9cc
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:49
# 30a7f387ff204ccb89de8c375d9ec16b
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:51
# 7aa83fb13e7a4e9692b8030dfb3b9cfe
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:54
# 0bba508da7954752b67f4ad99ee3c1b9
msgid "The :method:`aggregate() <db.collection.aggregate()>` method uses the :ref:`aggregation pipeline <aggregation-pipeline>` to processes documents into aggregated results. An :ref:`aggregation pipeline <aggregation-pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-reference>` with each stage processing the documents as they pass along the pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
# 1905aacf9ba1493ca141322bac2e4c79
msgid "The :method:`aggregate() <db.collection.aggregate()>` method in the :program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:71
# 38cd435c4a94439d81959351764eac8f
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:73
# 2009b7eb624a472aa2160f9f32a64274
msgid "The following aggregation operation returns all states with total population greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:83
# 3505db25dc8f47a98638db1e30e24656
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:87
# b436bb695f974a5a95e4c752d7b158ac
msgid "The :pipeline:`$group` stage groups the documents of the ``zipcode`` collection by the ``state`` field, calculates the ``totalPop`` field for each state, and outputs a document for each unique state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:91
# f30d2296e8b8404b9a92c30c9291c79d
msgid "The new per-state documents have two fields: the ``_id`` field and the ``totalPop`` field. The ``_id`` field contains the value of the ``state``; i.e. the group by field. The ``totalPop`` field is a calculated field that contains the total population of each state. To calculate the value, :pipeline:`$group` uses the :group:`$sum` operator to add the population field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
# bc64a070e05c4100b5e72aa247b489a5
msgid "After the :pipeline:`$group` stage, the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
# dc88444bcdf341bbb988819607d86c3e
msgid "The :pipeline:`$match` stage filters these grouped documents to output only those documents whose ``totalPop`` value is greater than or equal to 10 million. The :pipeline:`$match` stage does not alter the matching documents but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:113
# 408dc934aca14ec2bd7b604bd44d6325
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:122
# f1827ccf475a46c2b8bea5edfd069afc
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:125
# d07c7f99445d478b87d39aee4118798e
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
# d79ef5fd44364f33bfc5448ed1675611
msgid "The following aggregation operation returns the average populations for cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:137
# de04aa05e08b4bc3808cd3197de9f438
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by another :pipeline:`$group` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
# 78fc82082d384ebf9300e28f86992765
msgid "The first :pipeline:`$group` stage groups the documents by the combination of ``city`` and ``state``, uses the :group:`$sum` expression to calculate the population for each combination, and outputs a document for each ``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:147
# 0a149ae621244bd8be8b3c00283cfad2
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
# 8bdf4c1ef9f04d9d85a45f42e8dfbe0f
msgid "A second :pipeline:`$group` stage groups the documents in the pipeline by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document), uses the :group:`$avg` expression to calculate the average city population (``avgCityPop``) for each state, and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:166
# ff2b239eb23d4753b129e486b3039255
msgid "The documents that result from this aggregation operation resembles the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:176
# a99f713a286d49ccab3bd85777bc4e5f
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:179
# 5061c5388b2045bca8ffbfcfb6819e86
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:181
# d50f655bdea54b3c98b6144df44a2fda
msgid "The following aggregation operation returns the smallest and largest cities by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:216
# 25d613105cf7485ba9665f0d72592ada
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another :pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:220
# 8dcfbfd429554bca846ad76d28b3773b
msgid "The first :pipeline:`$group` stage groups the documents by the combination of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the ``pop`` values for each combination, and outputs a document for each ``city`` and ``state`` combination."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:225
# 106b8e83e5f547d99a4bb5d6f6a629d4
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:237
# e34f66437a964212b2015b6e2f9e2368
msgid "The :pipeline:`$sort` stage orders the documents in the pipeline by the ``pop`` field value, from smallest to largest; i.e. by increasing order. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:241
# 5e2c3e602d17456fb174a3dd2b3c0e4c
msgid "The next :pipeline:`$group` stage groups the now-sorted documents by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:245
# 537fba8f34dc40ec8d7d0e35d38b0ecd
msgid "The stage also calculates the following four fields for each state. Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestCity`` and ``biggestPop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestCity`` and ``smallestPop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:253
# 8bb66e095bab42c0a5dbd41eeb097dae
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:265
# ce8ba5077b3b4168a42bbcb163324873
msgid "The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:270
# 931c23fa68bb4edd86656bf2a38fe11b
msgid "The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:286
# d1715f08b1e143798475ea1168882811
msgid "A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""


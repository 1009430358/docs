# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/geospatial-tutorial.txt:3
# 6642dd6616bd40cdb0412c5ee696453b
msgid "Find Restaurants with Geospatial Queries"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:0
# cddbe95902014c7a97ec38040dcfa4e6
msgid "On this page"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:14
# 100d30a7c2d4414a8e6b2c15d9bff988
msgid "Overview"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:16
# e6019c9a03894a208f551106d2c31223
msgid "MongoDB's :term:`geospatial` indexing allows you to efficiently execute spatial queries on a collection that contains geospatial shapes and points. This tutorial will briefly introduce the concepts of geospatial indexes, and then demonstrate their use with :query:`$geoWithin`, :query:`$geoIntersects`, and :dbcommand:`geoNear`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:22
# 3b6bb646b4c541b8a3e8b8d2330c90eb
msgid "To showcase the capabilities of geospatial features and compare different approaches, this tutorial will guide you through the process of writing queries for a simple geospatial application."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:26
# 3bf8a5b8ecc54abca97dde4a62e432f1
msgid "Suppose you are designing a mobile application to help users find restaurants in New York City. The application must:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:29
# 87f38a876644450e8b2c85fbabc7ca9a
msgid "Determine the user's current neighborhood using :query:`$geoIntersects`,"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:30
# d49f1a8705e948fab5b23b0e46032f84
msgid "Show the number of restaurants in that neighborhood using :query:`$geoWithin`, and"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:32
# 955bd0f10cd041d38d5825e788fb298a
msgid "Find restaurants within a specified distance of the user using :query:`$nearSphere`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:35
# 0a88314c4aef4e63bc734c2ddbf2024c
msgid "This tutorial will use a ``2dsphere`` index to query for this data on spherical geometry."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:39
# d140423ce40c4f76b887d46186af81ba
msgid "Differences Between Flat and Spherical Geometry"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:41
# 9ce35d1596a14972b1535f286c5f7b32
msgid "Geospatial queries can use either flat or spherical geometries, depending on both the query and the type of index in use. ``2dsphere`` indexes support only spherical geometries, while ``2d`` indexes support both flat and spherical geometries."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:46
# 3e47fc273ae4404ea0ad4380f1b44150
msgid "However, queries using spherical geometries will be more performant and accurate with a ``2dsphere`` index, so you should always use ``2dsphere`` indexes on geographical geospatial fields."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:50
# 97957fa55cad4baba94d7e7f28162f3a
msgid "The following table shows what kind of geometry each geospatial operator will use:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:57
# c556f1d41a904b55bc90da80a7a8ec5f
msgid "Query Type"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:59
# 141921f43a0641f9a6195d20867c78a2
msgid "Geometry Type"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:61
# 5bfbcb79dd8c4cbab9b6f10cf584b115
msgid "Notes"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:63
# f64624f37c6748d49578c6c36bf09d82
msgid ":query:`$near` (:term:`GeoJSON` point, ``2dsphere`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:65
#: ../source/tutorial/geospatial-tutorial.txt:77
#: ../source/tutorial/geospatial-tutorial.txt:83
#: ../source/tutorial/geospatial-tutorial.txt:89
#: ../source/tutorial/geospatial-tutorial.txt:113
#: ../source/tutorial/geospatial-tutorial.txt:119
# eab4a0392e694590b68e538ef32ecebc
# 2a18928271a1476886083e7fc1f41838
# e92d77f2f5c7402d94abc7687e435595
# 7cf565d1db7b474d8d17b01f26a7505c
# ad4ced8ebe664b21b36cdd81e80383c3
# 56668b68679c47738ff565b82a9b7caf
msgid "Spherical"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:69
# b54663f90bd545c0a071ab5c75fe2231
msgid ":query:`$near` (:term:`legacy coordinates <legacy coordinate pairs>`, ``2d`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:71
#: ../source/tutorial/geospatial-tutorial.txt:95
#: ../source/tutorial/geospatial-tutorial.txt:101
#: ../source/tutorial/geospatial-tutorial.txt:107
# 61884e7af0584ecf8b3a8ed88fe5d94c
# d5343591c68e4754be4d215c674c1dc7
# b84786f2c7a5436b97114d0018ab7900
# 020d8d621ab74d1c9d60d279663cd6dd
msgid "Flat"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:75
# 3fc9e09fd8b44485b0ff565b2aff1610
msgid ":query:`$nearSphere` (:term:`GeoJSON` point, ``2dsphere`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:81
# 00a123db85bc4e79bee77d803e40f6ec
msgid ":query:`$nearSphere` (:term:`legacy coordinates <legacy coordinate pairs>`, ``2d`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:85
# 1d3cfdcd2d4e452d94dfd8aef6d99639
msgid "Use :term:`GeoJSON` points instead."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:87
# 0dda9dc01c1343f2ad50d4823c2db777
msgid ":query:`$geoWithin` : { :query:`$geometry`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:93
# 1db89f9bd4d04556bac7525376e75dd1
msgid ":query:`$geoWithin` : { :query:`$box`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:99
# 089dba8fba504139ad4757abe018ae3c
msgid ":query:`$geoWithin` : { :query:`$polygon`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:105
# 16b0010d325d48a7bebe0eb8f8cac11b
msgid ":query:`$geoWithin` : { :query:`$center`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:111
# 0310bbc638b94e359fdc748c2d2e5dab
msgid ":query:`$geoWithin` : { :query:`$centerSphere`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:117
# 9e6ea17857494b6b9217a331a58bea0a
msgid ":query:`$geoIntersects`"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:123
# 126fdc87c84b4063a5b10d0ab7713ff7
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` aggregation operator both operate in radians when using :term:`legacy coordinates <legacy coordinate pairs>`, and meters when using :term:`GeoJSON` points."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:129
# 801102ad861b429792f3dbed77d685ee
msgid "Distortion"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:131
# 02550bb11ce64f598d52e122ea216258
msgid "Spherical geometry will appear distorted when visualized on a map due to the nature of projecting a three dimensional sphere, such as the earth, onto a flat plane."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:135
# b49a351fcfd4442ea0f310edce73dac8
msgid "For example, take the specification of the spherical square defined by the longitude latitude points ``(0,0)``, ``(80,0)``, ``(80,80)``, and ``(0,80)``. The following figure depicts the area covered by this region:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:142
# 54682527cdf040cb8e1ef4ff54de4061
msgid "Searching for Restaurants"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:145
# d98d9d69dd8c4ef69906358c8b7c5daf
msgid "Prerequisites"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:147
# 03d7223415d9477fbe9e7f4ad6602b2e
msgid "Download the example datasets from `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/neighborhoods.json>`_ and `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/restaurants.json>`_. These contain the collections ``restaurants`` and ``neighborhoods`` respectively."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:152
# 2781e03f47304bd0938d372a8f353009
msgid "After downloading the datasets, import them into the database:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:159
# 31667b927bde439dac2de99daf043269
msgid "The :dbcommand:`geoNear` command requires a geospatial index, and almost always improves performance of :query:`$geoWithin` and :query:`$geoIntersects` queries."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:163
# 7508adaa5d794e55bd2775e316bf7d00
msgid "Because this data is geographical, create a ``2dsphere`` index on each collection using the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:172
# 523fd94745b64cdbbd48e5263531ca8d
msgid "Exploring the Data"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:174
# b9ca2095d23b40b7b6785d7856a16d02
msgid "Inspect an entry in the newly-created ``restaurants`` collection from within the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:181
# fcc14c3458d34e20b57d48cffd3df440
msgid "This query returns a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:193
# 1ecbcecf5a5c4e40bdb33fd3e8559b85
msgid "This restaurant document corresponds to the location shown in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:198
# 4761f8f8431d437e926a82526ccb71c7
msgid "Because the tutorial uses a ``2dsphere`` index, the geometry data in the ``location`` field must follow the doc:`GeoJSON format </reference/geojson>`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:201
# 9aa70942bafd483db47673641ae85962
msgid "Now inspect an entry in the ``neighborhoods`` collection:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:207
# a5b6a990fdd04a95adef150f36b75f0a
msgid "This query will return a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:224
# c0c712231f3843f982b405b4807e893b
msgid "This geometry corresponds to the region depicted in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:229
# 7b2e43b754c34a90bd058d0985af865e
msgid "Find the Current Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:231
# 64676e786d4445ebba39b9a9c0c2e414
msgid "Assuming the user’s mobile device can give a reasonably accurate location for the user, it is simple to find the user's current neighborhood with :query:`$geoIntersects`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:235
# cebe43fbadf44b72acbb246e80bbba51
msgid "Suppose the user is located at -73.93414657 longitude and 40.82302903 latitude. To find the current neighborhood, you will specify a point using the special :query:`$geometry` field in :term:`GeoJSON` format:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:243
# 25a805fa19d74685aacd5049ce81c594
msgid "This query will return the following result:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:265
# 5c3aa5556b794b91bdf0e6d1de51adf6
msgid "Find all Restaurants in the Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:267
# 6da6f8aa614d419ba5a7263c20f9354c
msgid "You can also query to find all restaurants contained in a given neighborhood. Run the following in the :program:`mongo` shell to find the neighborhood containing the user, and then count the restaurants within that neighborhood:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:276
# 08f8ddfdb0c94b81803f3c8b5aac33e5
msgid "This query will tell you that there are 127 restaurants in the requested neighborhood, visualized in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:282
# b040753939bc4283b8df41c3484f1ccb
msgid "Find Restaurants within a Distance"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:284
# d1c88e89727e48a396c7458c0ef7a8e8
msgid "To find restaurants within a specified distance of a point, you can use either :query:`$geoWithin` with :query:`$centerSphere` to return results in unsorted order, or :query:`nearSphere` with :query:`$maxDistance` if you need results sorted by distance."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:290
# 91ab0b1d6972404cb3d15edda5169a95
msgid "Unsorted with ``$geoWithin``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:292
# 00dd82b057af4c46b172dc97987a925a
msgid "To find restaurants within a circular region, use :query:`$geoWithin` with :query:`$centerSphere`. :query:`$centerSphere` is a MongoDB-specific syntax to denote a circular region by specifying the center and the radius in radians."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:296
# 7f55354b89ea4ca0bb1a22dde1847b82
msgid ":query:`$geoWithin` does not return the documents in any specific order, so it may show the user the furthest documents first."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:299
# de30d28e54ef4521a595675622be978e
msgid "The following will find all restaurants within five miles of the user:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:307
# 171e340f09ef4a5b97512c0c777dbc6a
msgid ":query:`$centerSphere`'s second argument accepts the radius in radians, so you must divide it by the radius of the earth in miles. See :doc:`/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes` for more information on converting between distance units."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:313
# 47be399e8fae4eeca227b92b18ce6017
msgid "Sorted with ``$nearSphere``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:315
# c731dee8c77249b8a0414052d1e2fbef
msgid "You may also use :query:`$nearSphere` and specify a :query:`$maxDistance` term in meters. This will return all restaurants within five miles of the user in sorted order from nearest to farthest:"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
# f6405b9e70ca4672aaf92d711c064aad
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
# 655affc28c8d4e42b1994dd9bd6f481f
msgid "To model hierarchical or nested data relationships, you can use references to implement tree-like structures. The following *Tree* pattern examples model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
# 0a2cada1edbc439f8e183ce80157b85c
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
# 640d33c672c84810a0ce8f18d6f0e232
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
# 470760a1fc2040daa9036c9fe886291e
msgid "The *Child References* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
# efd0492886034d9299f792776977064c
# c2650fc6666941ecbb749ab39fbdb513
# 6b74077735fc47f3b2fbb60495456bd7
# fc858f996f00496db85daffa46c58b7f
# f51ec952cd5849da9e748d13000f5123
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
# fca905626fd94174bfec94d7bd255cd0
msgid "The following example models the tree using *Child References*, storing the reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
# b35dc33810c54036b94fd3745b95a2b8
msgid "The query to retrieve the immediate children of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
# 021068c74495496186abafe41f4b4847
msgid "You can create an index on the field ``children`` to enable fast search by the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
# a957871a3c0e4b0c9ca2fea87a40da52
msgid "You can query for a node in the ``children`` field to find its parent node as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
# 1c4c6e9ee2434950ab5ff4a84f1d7ea6
msgid "The *Child References* pattern provides a suitable solution to tree storage as long as no operations on subtrees are necessary. This pattern may also provide a suitable solution for storing graphs where a node may have multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
# 97b1d5b631764b00a9b7421022677401
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
# 8f24708ac09043ae99155629ab5565cf
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
# 4fadaa04fdc544f3b4e2e501979e8b93
msgid "The *Parent References* pattern stores each tree node in a document; in addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
# 41ff926bb76f42a4b215797c7f45de92
msgid "The following example models the tree using *Parent References*, storing the reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
# 7f119a35deef42089ccb0c21d17dc80e
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
# 94d5b4a39df848c7a442cdad9e96e4df
msgid "You can create an index on the field ``parent`` to enable fast search by the parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
# 5c5c0df60a26419497a72b59c2fb9c2f
msgid "You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
# 9076dc84418648d584f242a3a733d0d0
msgid "The *Parent Links* pattern provides a simple solution to tree storage but requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
# 307e923be95044fea1f83ff3d81b9cfa
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
# c95e147ae34643149606dc7a5c5d3a09
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
# 19dfbbaa1f8140b3b82cc6b82b22e22a
msgid "The *Array of Ancestors* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
# b2bd498319374f34a1bfdf1641bb96ab
msgid "The following example models the tree using *Array of Ancestors*. In addition to the ``ancestors`` field, these documents also store the reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
# f6254f0e7eb2492197af9eb7c50e175d
msgid "The query to retrieve the ancestors or path of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
# 7715a8a3c4f44fb1a828d837f5eda268
msgid "You can create an index on the field ``ancestors`` to enable fast search by the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
# c7fc0c0527d1489094eea9a57ca04313
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
# 100275bcef804c8fae88684177de5f52
msgid "The *Array of Ancestors* pattern provides a fast and efficient solution to find the descendants and the ancestors of a node by creating an index on the elements of the ancestors field. This makes *Array of Ancestors* a good choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
# 4b0a7e890ee14446b415292aa2ececb3
msgid "The *Array of Ancestors* pattern is slightly slower than the :doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
# 3961c46e655644fbbe46d7f99a66bac2
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
# 6a39ac8664f9422eaf4f8240ce578e9d
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
# 3b76284d0d274156937bc8cd9420ce2a
msgid "The *Materialized Paths* pattern stores each tree node in a document; in addition to the tree node, document stores as a string the id(s) of the node's ancestors or path. Although the *Materialized Paths* pattern requires additional steps of working with strings and regular expressions, the pattern also provides more flexibility in working with the path, such as finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
# e4f434943d4e4ab482fc36a777bbb827
msgid "The following example models the tree using *Materialized Paths*, storing the path in the field ``path``; the path string uses the comma ``,`` as a delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
# 1671d2082c2d44cc9dac0451f69afc82
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
# a30d1ca1399c4866ac6a9c1fc496f72a
msgid "You can use regular expressions on the ``path`` field to find the descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
# 2d506ff0d38348ed8739aa8e1820b6df
msgid "You can also retrieve the descendants of ``Books`` where the ``Books`` is also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
# d7a4e1aa2521424e909919162b65b259
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
# 38222bd6ad154b18913e62479197e0b6
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
# c3bcd4a0e13f4bf89bf2d4bb134ff354
msgid "For queries from the root ``Books`` sub-tree (e.g. ``/^,Books,/`` or ``/^,Books,Programming,/``), an index on the ``path`` field improves the query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
# 71a55645165b4b14a4a792acda525c7e
msgid "For queries of sub-trees where the path from the root is not provided in the query (e.g. ``/,Databases,/``), or similar queries of sub-trees, where the node might be in the middle of the indexed string, the query must inspect the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
# 32a99f8fbe934f109c5fb907231fd729
msgid "For these queries an index *may* provide some performance improvement *if* the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
# d22ef1801f4b472395e78599535177f9
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
# 837cc0ae62764bbcaba21b30128769f2
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
# 9c58f482e33a481c80ab40c4baf8b9e4
msgid "The *Nested Sets* pattern identifies each node in the tree as stops in a round-trip traversal of the tree. The application visits each node in the tree twice; first during the initial trip, and second during the return trip. The *Nested Sets* pattern stores each tree node in a document; in addition to the tree node, document stores the id of node's parent, the node's initial stop in the ``left`` field, and its return stop in the ``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
# b00b5365c385440d88401201996e314f
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
# 9c2e529179ca4e13bc9d5f6d2ee90b8a
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
# 3d20ebce541249a4bce05d9c060fc6b2
msgid "The *Nested Sets* pattern provides a fast and efficient solution for finding subtrees but is inefficient for modifying the tree structure. As such, this pattern is best for static trees that do not change."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-tree-structures.txt:7
# eae66604eba84b2a8a7a642be5dc0e9b
msgid "Model Tree Structures in MongoDB"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:9
# 8c4abae356414f2493589cb44b226a8c
msgid "To model hierarchical or nested data relationships, you can use references to implement tree-like structures. The following *Tree* pattern examples model book categories that have hierarchical relationships."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:15
# 660f3bfc00964250beaad4e20053ebe5
msgid "Model Tree Structures with Child References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:17
# 1a67c25ac7a544a69c6e27318abd9401
msgid "(:doc:`link </tutorial/model-tree-structures-with-child-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:3
# b7b4bc0da3f9452fb169cf6505b0dd3d
msgid "The *Child References* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's children."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:7
#: ../source/tutorial/model-tree-structures-with-parent-references.txt:7
#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:7
#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:11
#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:11
# 0da699ae0ee94055b055a8d087b1fcc0
# 79ba13b9149b42008f8bc9b5b166634b
# 9a828f1e284d4af7b82afd368c8288ec
# 4cba050a9dd5468595788f32c286aaee
# 73818dcf276f415092e073fe544fc995
msgid "Consider the following hierarchy of categories:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:11
# e4df1bc75671442e96581d7b2a547994
msgid "The following example models the tree using *Child References*, storing the reference to the node's children in the field ``children``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:23
# 27a96c70cea64073b4d93810eb31f124
msgid "The query to retrieve the immediate children of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:30
# 56267993494e4552a3029c0da2370467
msgid "You can create an index on the field ``children`` to enable fast search by the child nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:37
# 52777525c9bc4e78b685ab77aed00eaf
msgid "You can query for a node in the ``children`` field to find its parent node as well as its siblings:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-child-references.txt:44
# e311768e8e4a4f8a89ce09e321ec3f16
msgid "The *Child References* pattern provides a suitable solution to tree storage as long as no operations on subtrees are necessary. This pattern may also provide a suitable solution for storing graphs where a node may have multiple parents."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:23
# 52e67a2f2d8d4df8adbdc3ba307baed7
msgid "Model Tree Structures with Parent References"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:25
# f45d0c8780ec4e37959c85c0089805f5
msgid "(:doc:`link </tutorial/model-tree-structures-with-parent-references>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:3
# 2dd7103d20574b5c82817fb01e1d5b5b
msgid "The *Parent References* pattern stores each tree node in a document; in addition to the tree node, the document stores the id of the node's parent."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:12
# 3a6992425f1a4949b60c20f360e5911b
msgid "The following example models the tree using *Parent References*, storing the reference to the parent category in the field ``parent``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:24
# 242b27655da443bdbbb383944c27214b
msgid "The query to retrieve the parent of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:31
# 25a53b754fa74d30a4b287bd5d2874e3
msgid "You can create an index on the field ``parent`` to enable fast search by the parent node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:38
# 1a93787e11bf40e6898c6b4f7c9fb1ca
msgid "You can query by the ``parent`` field to find its immediate children nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-parent-references.txt:45
# 81f699e1a41a48c597d04180983b3d24
msgid "The *Parent Links* pattern provides a simple solution to tree storage but requires multiple queries to retrieve subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:31
# e29c9638af3f4a9bb120cb90faa41376
msgid "Model Tree Structures with an Array of Ancestors"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:33
# 8c62fdbc87034d64a6de81378ca6613f
msgid "(:doc:`link </tutorial/model-tree-structures-with-ancestors-array>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:3
# 9d9b13e8fca24d4cb3d539d8b7d416d6
msgid "The *Array of Ancestors* pattern stores each tree node in a document; in addition to the tree node, document stores in an array the id(s) of the node's ancestors or path."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:11
# fa0d715721a3452e903952f41dec567c
msgid "The following example models the tree using *Array of Ancestors*. In addition to the ``ancestors`` field, these documents also store the reference to the immediate parent category in the ``parent`` field:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:24
# f9308a080069435c83515a787bfeff19
msgid "The query to retrieve the ancestors or path of a node is fast and straightforward:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:31
# e9c1137cf7a442c79994d760237b21ac
msgid "You can create an index on the field ``ancestors`` to enable fast search by the ancestors nodes:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:38
# d073213149764d7fba2ee1ce13bf529c
msgid "You can query by the field ``ancestors`` to find all its descendants:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:44
# fc1657ce0eb24ea2afbe36aeb00722c5
msgid "The *Array of Ancestors* pattern provides a fast and efficient solution to find the descendants and the ancestors of a node by creating an index on the elements of the ancestors field. This makes *Array of Ancestors* a good choice for working with subtrees."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-ancestors-array.txt:49
# 89f12a338b964dd4b60ddb6954ca7898
msgid "The *Array of Ancestors* pattern is slightly slower than the :doc:`Materialized Paths </tutorial/model-tree-structures-with-materialized-paths>` pattern but is more straightforward to use."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:39
# 0693557f45b04b5ea6a02311e2b0fa51
msgid "Model Tree Structures with Materialized Paths"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:41
# 3948da1c46eb40b788e8ad202396bccb
msgid "(:doc:`link </tutorial/model-tree-structures-with-materialized-paths>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:3
# 974ee7fb9821480dae3c7559a1cc8941
msgid "The *Materialized Paths* pattern stores each tree node in a document; in addition to the tree node, document stores as a string the id(s) of the node's ancestors or path. Although the *Materialized Paths* pattern requires additional steps of working with strings and regular expressions, the pattern also provides more flexibility in working with the path, such as finding nodes by partial paths."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:15
# f2ae08b72bc24bd5bedaef345a34cd2a
msgid "The following example models the tree using *Materialized Paths*, storing the path in the field ``path``; the path string uses the comma ``,`` as a delimiter:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:28
# 7fee3783c3a94886bae7eee2b2da3914
msgid "You can query to retrieve the whole tree, sorting by the field ``path``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:35
# 8c07433335944672b45b8eef328026f6
msgid "You can use regular expressions on the ``path`` field to find the descendants of ``Programming``:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:42
# 9f0fe0ff326e4e95bb86fc61e2fcb74a
msgid "You can also retrieve the descendants of ``Books`` where the ``Books`` is also at the topmost level of the hierarchy:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:49
# 704168a63a914d2aaa607333e9e2aa39
msgid "To create an index on the field ``path`` use the following invocation:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:56
# 9ef2293a1b1b4e929876a3b38d634173
msgid "This index may improve performance depending on the query:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:58
# f05c8e48742047e982b68891e1e0c53a
msgid "For queries from the root ``Books`` sub-tree (e.g. ``/^,Books,/`` or ``/^,Books,Programming,/``), an index on the ``path`` field improves the query performance significantly."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:62
# b388f214c84a404aad966fe9565821b7
msgid "For queries of sub-trees where the path from the root is not provided in the query (e.g. ``/,Databases,/``), or similar queries of sub-trees, where the node might be in the middle of the indexed string, the query must inspect the entire index."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-materialized-paths.txt:67
# b999a9b8ba2541db88ff68b64f2986e6
msgid "For these queries an index *may* provide some performance improvement *if* the index is significantly smaller than the entire collection."
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:47
# 7c4a098f129b4d36aac76d3699a1386c
msgid "Model Tree Structures with Nested Sets"
msgstr ""

#: ../source/tutorial/model-tree-structures.txt:49
# 8e2fe9e01b174160a90315426c19c5bf
msgid "(:doc:`link </tutorial/model-tree-structures-with-nested-sets>`)"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:3
# 9ad3b9d014184f4588a2c311277d95e2
msgid "The *Nested Sets* pattern identifies each node in the tree as stops in a round-trip traversal of the tree. The application visits each node in the tree twice; first during the initial trip, and second during the return trip. The *Nested Sets* pattern stores each tree node in a document; in addition to the tree node, document stores the id of node's parent, the node's initial stop in the ``left`` field, and its return stop in the ``right`` field."
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:15
# c6d9f0e41c774c67ae2eb6b151714b69
msgid "The following example models the tree using *Nested Sets*:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:26
# 6cc9a41141a947f8a8a89c79194b49b0
msgid "You can query to retrieve the descendants of a node:"
msgstr ""

#: ../source/tutorial/model-tree-structures-with-nested-sets.txt:33
# cf7fa3d1abd0483083964a74b97940e5
msgid "The *Nested Sets* pattern provides a fast and efficient solution for finding subtrees but is inefficient for modifying the tree structure. As such, this pattern is best for static trees that do not change."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
# eb5d205c4df74391a139cf128ce5bf0a
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:9
# 693502d646234e3d801ae7272adc990d
msgid "In order to maintain up-to-date copies of the shared data set, members of a replica set :term:`sync` or replicate data from other members. MongoDB uses two forms of data synchronization: :ref:`initial sync <replica-set-initial-sync>` to populate new members with the full data set, and replication to apply ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:19
# 1f351b995d414b8bbdd8d8f098ff3f28
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:21
# c789e141592b4e76abd0004a9d2daa52
msgid "Initial sync copies all the data from one member of the replica set to another member. A member uses initial sync when the member has no data, such as when the member is new, or when the member has data but is missing a history of the set's replication."
msgstr ""

#: ../source/core/replica-set-sync.txt:26
# 67ed13fa449a4546bc5a413df30da196
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:28
# 5c05b6cc360c41c8b8bf123e2912b0cb
msgid "Clones all databases. To clone, the :program:`mongod` queries every collection in each source database and inserts all data into its own copies of these collections.  At this time, ``_id`` indexes are also built. The clone process only copies valid data, omitting invalid documents."
msgstr ""

#: ../source/core/replica-set-sync.txt:34
# 9526fc6363e44cff88bdfd162da24aab
msgid "Applies all changes to the data set. Using the oplog from the source, the :program:`mongod` updates its data set to reflect the current state of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:38
# 2be0144d0356440ab7787d59f0192bac
msgid "Builds all indexes on all collections (except ``_id`` indexes, which were already completed)."
msgstr ""

#: ../source/core/replica-set-sync.txt:41
# 5815e9b43aa14d39b73486818be7400c
msgid "When the :program:`mongod` finishes building all index builds, the member can transition to a normal state, i.e. :term:`secondary`."
msgstr ""

#: ../source/core/replica-set-sync.txt:44
# 9a7ab998972e4a13a463a7dc38b41e09
msgid "When the clone process omits an invalid document from the sync, MongoDB writes a message to the logs that begins with ``Cloner: found corrupt document in <collection>``."
msgstr ""

#: ../source/core/replica-set-sync.txt:49
# db1e6ad3f9db4723aaeeef783b4619d0
msgid "To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
# 41cf3213ec2a40a195ffde6a41367015
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:57
# b2c17f142cad4324b57855edef0afb1c
msgid "Replica set members replicate data continuously after the initial sync. This process keeps the members up to date with all changes to the replica set's data. In most cases, secondaries synchronize from the primary. Secondaries may automatically change their *sync targets* if needed based on changes in the ping time and state of other members' replication."
msgstr ""

#: ../source/core/replica-set-sync.txt:64
# 762c3ddf339c4a0e9c69f7a4e63977ff
msgid "For a member to sync from another, both members must have the same value for the :data:`~replSetGetConfig.members[n].buildIndexes` setting."
msgstr ""

#: ../source/core/replica-set-sync.txt:68
# 10c18d95c63348d8af2c2f355bb5cbcd
msgid "Beginning in version 2.2, secondaries avoid syncing from :ref:`delayed members <replica-set-delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:73
# f079a956dc264825995b80e9700491ec
msgid "Validity and Durability"
msgstr ""

#: ../source/core/replica-set-sync.txt:75
# a9517b31e227454a8a525a3744f52050
msgid "In a replica set, the set can have at most one primary and only the primary can accept write operations. [#edge-cases-2-primaries]_ Secondaries apply operations from the primary asynchronously to provide :term:`eventual consistency`."
msgstr ""

#: ../source/core/replica-set-sync.txt:80
# e7f05d1f802e49308106db3c298eecfa
msgid ":term:`Journaling <journal>` provides single-instance write durability. Without journaling, if a MongoDB instance terminates ungracefully, you must assume that the database is in an invalid state."
msgstr ""

#: ../source/core/replica-set-sync.txt:84
# 5560e166e4d14f3dbc514b4f508ae82d
msgid "In MongoDB, clients can see the results of writes before they are made durable:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# 7495dab5e4634a3f9aa05a69e73f5316
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients can see the result of the write operations before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:5
# 60f48ff77b8749f9be5a1e3c435a5dd3
msgid "Clients can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:92
# c42bcddf6a2e4b3faefbf102259f5ed3
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:94
# ad90be2540d34bfe948486d5b0c07b26
msgid "MongoDB applies write operations in batches using multiple threads to improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 <storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-wiredtiger>`) and simultaneously applies each group of operations using a different thread. MongoDB always applies write operations to a given document in their original write order."
msgstr ""

#: ../source/core/replica-set-sync.txt:101
# 9f1162f0c2aa4efeab5eef24ab8eb0ab
msgid "While applying a batch, MongoDB blocks all read operations. As a result, secondary read queries can never return data that reflect a state that never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:106
# c722e08fd8514830980edf72c450acb9
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:109
# 14369bed03e04f7fb312e94cd8dade85
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:111
# ebd34cfd089b46c9b56dfd53a5047699
msgid "With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches memory pages that hold affected data and indexes to help improve the performance of applying oplog entries. This *pre-fetch* stage minimizes the amount of time MongoDB holds write locks while applying oplog entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:117
# 902fa332cff84ebfaf57cc6c5439796e
msgid "Optionally, you can disable all pre-fetching or only pre-fetch the index on the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` setting for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 1f458322b8a147bba86b5c4811f5b6ff
msgid "In some circumstances, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :ref:`{w: majority} write concern <wc-w>`. The node that can complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`."
msgstr ""


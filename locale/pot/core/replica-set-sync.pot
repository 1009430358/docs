# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
# eb5ff9f471614435a5a186ec851e2bac
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:0
# fd56c7c909cd499284854477ec726151
msgid "On this page"
msgstr ""

#: ../source/core/replica-set-sync.txt:15
# 096ef0533c114ef497a2e1c72b184abd
msgid "In order to maintain up-to-date copies of the shared data set, secondary members of a replica set :term:`sync` or replicate data from other members. MongoDB uses two forms of data synchronization: :ref:`initial sync <replica-set-initial-sync>` to populate new members with the full data set, and replication to apply ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:25
# c152e1a3db1b4eb38f9c1aba55ac2f9b
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:27
# 518a4995dde14444bc2b98ae42837b92
msgid "Initial sync copies all the data from one member of the replica set to another member. A member uses initial sync when the member has no data, such as when the member is new, or when the member has data but is missing a history of the set's replication."
msgstr ""

#: ../source/core/replica-set-sync.txt:32
# a0dd2be0b61744fcb6d08f9878709135
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:34
# 26f7e42489004f23bf3f88f498f79ba9
msgid "Clones all databases. To clone, the :program:`mongod` queries every collection in each source database and inserts all data into its own copies of these collections.  At this time, ``_id`` indexes are also built. The clone process only copies valid data, omitting invalid documents."
msgstr ""

#: ../source/core/replica-set-sync.txt:40
# f149df6b14254befa3153b1697e290a4
msgid "Applies all changes to the data set. Using the oplog from the source, the :program:`mongod` updates its data set to reflect the current state of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:44
# 03fcfcadab5c451dadf38c2e9536fbb2
msgid "Builds all indexes on all collections (except ``_id`` indexes, which were already completed)."
msgstr ""

#: ../source/core/replica-set-sync.txt:47
# 9f20e15e172841c4b26944375bf84bf1
msgid "When the :program:`mongod` finishes building all index builds, the member can transition to a normal state, i.e. :term:`secondary`."
msgstr ""

#: ../source/core/replica-set-sync.txt:50
# 476b63fe5f0247c8a9d08fddfa2c77c5
msgid "When the clone process omits an invalid document from the sync, MongoDB writes a message to the logs that begins with ``Cloner: found corrupt document in <collection>``."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
# f438fb5e95d543f7813ceecae38a9da1
msgid "To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:61
# 7efd82de81a74e3e8ce1db862945948c
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:63
# 6fc9bfbf116d44a68c5c3661a7d20357
msgid "Secondary members replicate data continuously after the initial sync. Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from their *sync from* source and apply these operations in an asynchronous process."
msgstr ""

#: ../source/core/replica-set-sync.txt:68
# 4e8ea8e0a9b54cdab4204ea085f31e8b
msgid "In most cases, secondaries sync from the primary. Secondaries may automatically change their *sync from* source if needed based on changes in the ping time and state of other members' replication."
msgstr ""

#: ../source/includes/fact-voting-node-sync-incompatibility.rst:1
# 6a30a3153e1343c585de8c7731400dbe
msgid "MongoDB 3.2 replica set members with :rsconf:`1 vote <members[n].votes>` cannot sync from members with  :rsconf:`0 votes <members[n].votes>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:76
# e1117516b7fc4cb8bfa30dddcca1fe75
msgid "Secondaries avoid syncing from :ref:`delayed members <replica-set-delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:80
# 431681b5a2da4ea39b4d4ab551027133
msgid "If a secondary member has :rsconf:`members[n].buildIndexes` set to ``true``, it can only sync from other members where :rsconf:`~members[n].buildIndexes` is ``true``. Members where :rsconf:`~members[n].buildIndexes` is ``false`` can sync from any other member, barring other sync restrictions. :rsconf:`~members[n].buildIndexes` is ``true`` by default."
msgstr ""

#: ../source/core/replica-set-sync.txt:89
# f08870fc28a54a559867d5b9ed41357e
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:91
# 974ab37974f6480188e1d24f2c02b83d
msgid "MongoDB applies write operations in batches using multiple threads to improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 <storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-wiredtiger>`) and simultaneously applies each group of operations using a different thread. MongoDB always applies write operations to a given document in their original write order."
msgstr ""

#: ../source/core/replica-set-sync.txt:98
# 8f8fbbe943964a4ca700522cc2cd3f4c
msgid "While applying a batch, MongoDB blocks all read operations. As a result, secondary read queries can never return data that reflect a state that never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:103
# 93fb8acefd2947a78279284fb3084d44
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:106
# 20fcefb5af064eceae88fb3d614a777c
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:108
# a075d0b251ee4cee8e996265436bf428
msgid "With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches memory pages that hold affected data and indexes to help improve the performance of applying oplog entries. This *pre-fetch* stage minimizes the amount of time MongoDB holds write locks while applying oplog entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:114
# e3c1ed394aea4afdac4d7c71aa69f376
msgid "Optionally, you can disable all pre-fetching or only pre-fetch the index on the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` setting for more information."
msgstr ""


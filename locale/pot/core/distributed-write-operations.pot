# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-write-operations.txt:3
# 4b67fa40adf349f691ab18e3b59ac803
msgid "Distributed Write Operations"
msgstr ""

#: ../source/core/distributed-write-operations.txt:10
# af1ff47835e644968ae84a78a4d5459c
msgid "Write Operations on Sharded Clusters"
msgstr ""

#: ../source/core/distributed-write-operations.txt:12
# d56f7f45913d4a03b20ef39e0d112fab
msgid "For sharded collections in a :term:`sharded cluster`, the :program:`mongos` directs write operations from applications to the shards that are responsible for the specific *portion* of the data set. The :program:`mongos` uses the cluster metadata from the :ref:`config database <sharding-config-server>` to route the write operation to the appropriate shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:21
# 73cfd083518d433aa037495af3c26802
msgid "MongoDB partitions data in a sharded collection into *ranges* based on the values of the :term:`shard key`. Then, MongoDB distributes these chunks to shards. The shard key determines the distribution of chunks to shards. This can affect the performance of write operations in the cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:29
# 5cc1640ac4424bb389b3b823f24b430f
msgid "Update operations that affect a *single* document **must** include the :term:`shard key` or the ``_id`` field. Updates that affect multiple documents are more efficient in some situations if they have the :term:`shard key`, but can be broadcast to all shards."
msgstr ""

#: ../source/core/distributed-write-operations.txt:35
# 2a19b4ec3ec749888e9193b4e5f7e9e4
msgid "If the value of the shard key increases or decreases with every insert, all insert operations target a single shard. As a result, the capacity of a single shard becomes the limit for the insert capacity of the sharded cluster."
msgstr ""

#: ../source/core/distributed-write-operations.txt:40
# 54a9bd0623624f3a8f448e0fe539a605
msgid "For more information, see :doc:`/administration/sharded-clusters` and :ref:`write-operations-bulk-insert`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:46
# bbbbf29e3be54fffae588100e386a98b
msgid "Write Operations on Replica Sets"
msgstr ""

#: ../source/core/distributed-write-operations.txt:48
# 8155c9e6a4364fc88cfc8696340f35ae
msgid "In :term:`replica sets <replica set>`, all write operations go to the set's :term:`primary`, which applies the write operation then records the operations on the primary's operation log or :term:`oplog`. The oplog is a reproducible sequence of operations to the data set. :term:`Secondary` members of the set are continuously replicating the oplog and applying the operations to themselves in an asynchronous process."
msgstr ""

#: ../source/core/distributed-write-operations.txt:58
# 6271b59fb36149dcaa0fc0e7bf72e59e
msgid "Large volumes of write operations, particularly bulk operations, may create situations where the secondary members have difficulty applying the replicating operations from the primary at a sufficient rate: this can cause the secondary's state to fall behind that of the primary. Secondaries that are significantly behind the primary present problems for normal operation of the replica set, particularly :ref:`failover <replica-set-failover-administration>` in the form of :ref:`rollbacks <replica-set-rollback>` as well as general :doc:`read consistency </applications/replication>`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:68
# c1f94a21ef3243b0aebef48596938627
msgid "To help avoid this issue, you can customize the :ref:`write concern <write-operations-write-concern>` to return confirmation of the write operation to another member [#write-concern-throttling]_ of the replica set every 100 or 1,000 operations. This provides an opportunity for secondaries to catch up with the primary. Write concern can slow the overall progress of write operations but ensure that the secondaries can maintain a largely current state with respect to the primary."
msgstr ""

#: ../source/core/distributed-write-operations.txt:78
# 2446af3128fd4ca4bd036fad47e69a47
msgid "For more information on replica sets and write operations, see :ref:`replica-set-write-concern`, :ref:`replica-set-oplog-sizing`, and :doc:`/tutorial/change-oplog-size`."
msgstr ""

#: ../source/core/distributed-write-operations.txt:82
# 154f320cbe904d31b3a88686e3260507
msgid "Intermittently issuing a write concern with a ``w`` value of ``2`` or ``majority`` will slow the throughput of write traffic; however, this practice will allow the secondaries to remain current with the state of the primary."
msgstr ""

#: ../source/includes/fact-master-slave-majority.rst:1
# 167922b8640545b9a041277b9e06a31a
msgid "In :doc:`Master/Slave </core/master-slave>` deployments, MongoDB treats ``w: \"majority\"`` as equivalent to ``w: 1``. In earlier versions of MongoDB, ``w: \"majority\"`` produces an error in :doc:`master/slave </core/master-slave>` deployments."
msgstr ""


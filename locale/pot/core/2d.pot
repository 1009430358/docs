# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/2d.txt:3
# e2557f5fe3984ce19321b1f43b56bd9c
msgid "``2d`` Indexes"
msgstr ""

#: ../source/core/2d.txt:0
# 7def1d2eab524167a6db529bf598e07d
msgid "On this page"
msgstr ""

#: ../source/core/2d.txt:13
# 767e8c6e2e944ddf89722c0bb4b00a4d
msgid "Use a ``2d`` index for data stored as points on a two-dimensional plane. The ``2d`` index is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier."
msgstr ""

#: ../source/core/2d.txt:17
# 5f6c7d4422644c528a43a75099c6c26e
msgid "Use a ``2d`` index if:"
msgstr ""

#: ../source/core/2d.txt:19
# 92d4765ce37d49de84c18e0f805ba19a
msgid "your database has legacy location data from MongoDB 2.2 or earlier, *and*"
msgstr ""

#: ../source/core/2d.txt:21
# af32fb4ed3814fca91d4bedc5876a4ff
msgid "you do not intend to store any location data as :term:`GeoJSON` objects."
msgstr ""

#: ../source/core/2d.txt:23
# 7b00c31397e34c6ea6eb8ab9efdfe331
msgid "See the :doc:`/reference/operator/query-geospatial` for the query operators that support geospatial queries."
msgstr ""

#: ../source/core/2d.txt:27
# 9a37002919dd4a71bb80a3ec1018882e
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# 9ee3acc01c784b65bffb74246400455f
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# 479e75b453554cb89500985b4b408e9e
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# 070e21f555c0446fafcf42c5fb58c0f7
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2d.txt:33
# 6b0715824b914e97a68828abf5d9cb43
msgid "Do not use a ``2d`` index if your location data includes GeoJSON objects. To index on both legacy coordinate pairs *and* GeoJSON objects, use a :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/core/2d.txt:37
# ff99cf22fe9c41569669f4736709eac8
msgid "You cannot use a ``2d`` index as a shard key when sharding a collection. However, you can create and maintain a geospatial index on a sharded collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2d.txt:42
# ffc45594827449d1a1e7facdb18247d0
msgid "Behavior"
msgstr ""

#: ../source/core/2d.txt:44
# 7fd64804f6de43d08ce25497898c24ac
msgid "The ``2d`` index supports calculations on a flat, Euclidean plane. The ``2d`` index also supports *distance-only* calculations on a sphere, but for *geometric* calculations (e.g. :query:`$geoWithin`) on a sphere, store data as GeoJSON objects and use the ``2dsphere`` index type."
msgstr ""

#: ../source/core/2d.txt:50
# 10e54d1d2f6f4b7cb4c17bc7a664f52e
msgid "A ``2d`` index can reference two fields. The first must be the location field. A ``2d`` compound index constructs queries that select first on the location field, and then filters those results by the additional criteria. A compound ``2d`` index can cover queries."
msgstr ""

#: ../source/core/2d.txt:58
# 3bfd47f639864c93ad1fed33e6a56d19
msgid "Points on a 2D Plane"
msgstr ""

#: ../source/core/2d.txt:68
# d06e5dd13d23465caef7142ffe7a3706
msgid "To store location data as legacy coordinate pairs, use an array or an embedded document. When possible, use the array format:"
msgstr ""

#: ../source/core/2d.txt:75
# e6c9d09fbb9d4ee4a47e32951c109b23
msgid "Consider the embedded document form:"
msgstr ""

#: ../source/core/2d.txt:81
# 7ddd89f431494520af97ba2af7fb6452
msgid "Arrays are preferred as certain languages do not guarantee associative map ordering."
msgstr ""

#: ../source/core/2d.txt:84
# 3be5c5658bd945068a04156c5552db49
msgid "For all points, if you use longitude and latitude, store coordinates in **longitude, latitude** order."
msgstr ""

#: ../source/core/2d.txt:88
# 2d94fc3111d84023907d789e13a5b644
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2d.txt:90
# 7bfae14cb6f14fd8b31b21145a60e1ee
msgid "``2d`` indexes are :doc:`sparse </core/index-sparse>` by default and ignores the :doc:`sparse: true </core/index-sparse>` option. If a document lacks a ``2d`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the ``2d`` index. For inserts, MongoDB inserts the document but does not add to the ``2d`` index."
msgstr ""

#: ../source/core/2d.txt:97
# fa289fa225ba42d1a875f43c32fc9197
msgid "For a compound index that includes a ``2d`` index key along with keys of other types, only the ``2d`` index field determines whether the index references a document."
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/read-isolation-consistency-recency.txt:3
# 7a1d229206ee4df5abe8b10f8bcdd7f9
msgid "Read Isolation, Consistency, and Recency"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:0
# 68f57ba8ce1040d387abc57bf554c57f
msgid "On this page"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:14
# 3ee4cbb462da424391cb50e4f0e459c8
msgid "Isolation Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:17
# 4af6ef4558e345b58159ef3cd0089bda
msgid "Read Uncommitted"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
# aed320be59234ccbac900038aff6334f
msgid "In MongoDB, clients can see the results of writes before the writes are :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# a6f0b5e9bbe047b08b0999d02d1fe7f7
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` (i.e. the default) readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
# e8b6a76ea52b418da678e9a7250184a3
msgid "Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:21
# 7d2a744318114a178f8990d4b9d3a633
msgid "Read uncommitted is the default isolation level and applies to :program:`mongod` standalone instances as well as to replica sets and sharded clusters."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:26
# 6834a0c936fb443b9e276fc9c2ae1c67
msgid "Read Uncommitted And Single Document Atomicity"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
# 5db9f837539e4b488d16ca415204b8f8
msgid "Write operations are atomic with respect to a single document; i.e. if a write is updating multiple fields in the document, a reader will never see the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
# 6fb4798ad74d48059a48fe9a6e1092c5
msgid "With a standalone :program:`mongod` instance, a set of read and write operations to a single document is serializable. With a replica set, a set of read and write operations to a single document is serializable *only* in the absence of a rollback."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:30
# 3759e52008314d728cccccbca7ea0a34
msgid "However, although the readers may not see a *partially* updated document, read uncommitted means that concurrent readers may still see the updated document before the changes are :term:`durable`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:35
# 41c9ef446bb540419cf098babcb3a70a
msgid "Read Uncommitted And Multiple Document Write"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
# 19619f75dd814265a73cbe087e404502
msgid "When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. However, you can *isolate* a single write operation that affects multiple documents using the :update:`$isolated` operator."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:39
# 151f2bfaa8a94edaab855e89532e4525
msgid "Without isolating the multi-document write operations, MongoDB exhibits the following behavior:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
# aaa1588f4e6045a79384eb03914e2774
msgid "Non-point-in-time read operations. Suppose a read operation begins at time *t*\\ :sub:`1` and starts reading documents. A write operation then commits an update to one of the documents at some later time *t*\\ :sub:`2`. The reader may see the updated version of the document, and therefore does not see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
# e7c485f29f144d508b214ea5bb317dd3
msgid "Non-serializable operations. Suppose a read operation reads a document *d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write dependency such that, if the operations were to be serialized, the read operation must precede the write operation. But also suppose that the write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ :sub:`4`. This introduces a write-read dependency which would instead require the read operation to come *after* the write operation in a serializable schedule. There is a dependency cycle which makes serializability impossible."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
# e8831cfc586b41da9c8e4990509e1ecd
msgid "Reads may miss matching documents that are updated during the course of the read operation."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:1
# f6297f123abb49d9b7b3876695962eae
msgid "Using the :update:`$isolated` operator, a write operation that affects multiple documents can prevent other processes from interleaving once the write operation modifies the first document. This ensures that no client sees the changes until the write operation completes or errors out."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:7
# eafa58b172ee4b4fb0f8c2a0199bdcd3
msgid ":update:`$isolated` does **not** work with :term:`sharded clusters <sharded cluster>`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:10
# f2ccb0f4851c4493bf67f7423b8a4d99
msgid "An isolated write operation does not provide \"all-or-nothing\" atomicity. That is, an error during the write operation does not roll back all its changes that preceded the error."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:16
# 4f60a83cec2a4bf29c3ce30a222e5674
msgid ":update:`$isolated` operator causes write operations to acquire an exclusive lock on the collection, *even for document-level locking storage engines* such as WiredTiger. That is, :update:`$isolated` operator will make WiredTiger single-threaded for the duration of the operation."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:46
# 8e14d3b3122d4121b74866320249054b
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:51
# f4ab5c4562ed48feb108858543b8f8c3
msgid "Cursor Snapshot"
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:2
# f84a776c36f44daa8b672cf8d3119f54
msgid "MongoDB cursors can return the same document more than once in some situations. As a cursor returns documents other operations may interleave with the query. If some of these operations are :doc:`updates </tutorial/update-documents>` that cause the document to move (in the case of MMAPv1, caused by document growth) or that change the indexed field on the index used by the query; then the cursor will return the same document more than once."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:10
# 9dc437c8714b40558af5f2acaf303064
msgid "In very specific cases, you can isolate the cursor from returning the same document more than once by using the :method:`cursor.snapshot()` method. :method:`~cursor.snapshot()` guarantees that the query will return each document no more than once."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:18
# 1b98d799ce9441e2b13cd7dc8afb9db3
msgid "The :method:`~cursor.snapshot()` does not guarantee that the data returned by the query will reflect a single moment in time *nor* does it provide isolation from insert or delete operations."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:23
# 98ba7624d5874541881f5e2ee3c106ee
msgid "You **cannot** use :method:`~cursor.snapshot()` with :term:`sharded collections <sharding>`."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:26
# 78e46186a3dd4e1e89df0fa0afbd74f4
msgid "You **cannot** use :method:`~cursor.snapshot()` with the :method:`~cursor.sort()` or :method:`~cursor.hint()` cursor methods."
msgstr ""

#: ../source/includes/extracts/isolate-cursor-snapshot.rst:29
# d5a92771643f480585b54901753be3f0
msgid "As an alternative, if your collection has a field or fields that are never modified, you can use a *unique* index on this field or these fields to achieve a similar result as the :method:`~cursor.snapshot()`. Query with :method:`~cursor.hint()` to explicitly force the query to use that index."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:56
# 97426877c211488ead9119ed59098a67
msgid "Consistency Guarantees"
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:59
# d99013788fe94621aef5a93565a58de6
msgid "Monotonic Reads"
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:1
# c7f7309e89934f2c972c2bd2f5875fb5
msgid "MongoDB provides monotonic reads from a standalone :program:`mongod` instance. Suppose an application performs a sequence of operations that consists of a read operation *R*\\ :sub:`1` followed later in the sequence by another read operation *R*\\ :sub:`2`. If the application performs the sequence on a standalone :program:`mongod` instance, the later read *R*\\ :sub:`2` never returns results that reflect an earlier state than that returned from *R*\\ :sub:`1`; i.e. *R*\\ :sub:`2` returns data that is monotonically increasing in recency from *R*\\ :sub:`1`."
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:13
# edb94fb9f3734e188ef9b12c09416d9f
msgid "For replica sets and sharded clusters, MongoDB provides monotonic reads if read operations specify :doc:`/reference/read-concern` ``\"majority\"`` and read preference :readmode:`primary`."
msgstr ""

#: ../source/includes/extracts/monotonic-reads.rst:17
# 0e7a96dfce214030a31bc6e925d6d770
msgid "In previous versions, MongoDB cannot make monotonic read guarantees from replica sets and sharded clusters."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:64
# e73e8053b06c4f3f862b7a62ad34f46e
msgid "Monotonic Writes"
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:1
# bb553bfe5976440c824eb3af362618fa
msgid "MongoDB provides  monotonic write guarantees for standalone :program:`mongod` instances, replica sets, and sharded clusters."
msgstr ""

#: ../source/includes/extracts/monotonic-writes.rst:4
# 1ef91d95b65342deaf7e3c524d6d84de
msgid "Suppose an application performs a sequence of operations that consists of a write operation *W*\\ :sub:`1` followed later in the sequence by a write operation *W*\\ :sub:`2`. MongoDB guarantees that *W*\\ :sub:`1` operation precedes *W*\\ :sub:`2`."
msgstr ""

#: ../source/core/read-isolation-consistency-recency.txt:69
# a7d4d908343240448c5d8ab403e1bd10
msgid "Recency"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:2
# 4e3dad88cde94154b74429b86fdee75f
msgid "In MongoDB, in a replica set with one primary member [#edge-cases-2-primaries]_,"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:5
# 18d17905df96485b84ce1042b05eff02
msgid "With :readconcern:`\"local\"` ``readConcern``, reads from the primary reflect the latest writes in absence of a failover;"
msgstr ""

#: ../source/includes/extracts/replica-read-consistency-single-primary.rst:8
# 987991a5f9a144b58474f73df8de0c47
msgid "With :readconcern:`\"majority\"` ``readConcern``, read operations from the primary or the secondaries have :term:`eventual consistency`."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 276a1eeba09b43299884e2ef207a113e
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""


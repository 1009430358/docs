# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline-optimization.txt:3
# 6ddbd08a29df4c349e4aace127f19481
msgid "Aggregation Pipeline Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:7
# 548c67dfaf6a4d3a9e49812c1f8669fe
msgid "Aggregation pipeline operations have an optimization phase which attempts to reshape the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:10
# 1aa781e202124d37a47a3cdb5d70d0cc
msgid "To see how the optimizer transforms a particular aggregation pipeline, include the :method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()` method."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# abd2a437c83840a0bf76be5f60d667a5
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:19
# 83941775632446fdb2291d4290377b05
msgid "Projection Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:21
# c73f1062697341fd83c65146002f8302
msgid "The aggregation pipeline can determine if it requires only a subset of the fields in the documents to obtain the results. If so, the pipeline will only use those required fields, reducing the amount of data passing through the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:29
# a8828ff5f20b4882bba442ece7a86a8e
msgid "Pipeline Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:34
# 18ea7b77ad914e10b2b3701d86b4784e
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:36
# b1d3b98137b34a13b0ba0a8298381204
msgid "When you have a sequence with :pipeline:`$sort` followed by a :pipeline:`$match`, the :pipeline:`$match` moves before the :pipeline:`$sort` to minimize the number of objects to sort. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:46
#: ../source/core/aggregation-pipeline-optimization.txt:71
# ef590d067df9432294e010f2b47e959e
# f2b5d2061fe2440fac9658ef468d2327
msgid "During the optimization phase, the optimizer transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:57
# 211c5488abfa40b6b796e126e3812f61
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:59
# f546b711361945ab8d0ff6947b009a1f
msgid "When you have a sequence with :pipeline:`$skip` followed by a :pipeline:`$limit`, the :pipeline:`$limit` moves before the :pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value increases by the :pipeline:`$skip` amount."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:64
#: ../source/core/aggregation-pipeline-optimization.txt:101
# 00273e33767f41b88bc207ae07930bcc
# f3da581239ef4f768e94f8fa907bf061
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:79
# df5bb44428094beaafa814ad784b20f0
msgid "This optimization allows for more opportunities for :ref:`agg-sort-limit-coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. See :ref:`agg-sort-limit-coalescence` for details on the coalescence and :ref:`agg-sort-skip-limit-sequence` for an example."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:85
# 6865a86f54a84717846fde9029767ffb
msgid "For aggregation operations on :doc:`sharded collections <aggregation-pipeline-sharded-collections>`, this optimization reduces the results returned from each shard."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:90
# 4470fb9d11504a388b635c60d3889767
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:92
# 4f7c5d4b8930413fb57df4b6b9832c73
msgid "When possible, when the pipeline has the :pipeline:`$redact` stage immediately followed by the :pipeline:`$match` stage, the aggregation can sometimes add a portion of the :pipeline:`$match` stage before the :pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at the start of a pipeline, the aggregation can use an index as well as query the collection to limit the number of documents that enter the pipeline. See :ref:`aggregation-pipeline-operators-and-performance` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:108
# 481101cc32184da7a08df158b63f5f09
msgid "The optimizer can add the same :pipeline:`$match` stage before the :pipeline:`$redact` stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:120
# 854b6ec032d54ce7a2bd4275af669f23
msgid "Pipeline Coalescence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:122
# 6977d7c45c8d44b78643431c7719711b
msgid "When possible, the optimization phase coalesces a pipeline stage into its predecessor. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:129
# adf78e74b8f5468c94b6d1072619ecf2
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:131
# 89cff24ecedb493eb70b880b6abd0cdc
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`. This allows the sort operation to only maintain the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory [#coalescence-allowDiskUse]_. See :ref:`sort-and-memory` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:139
# 86ba68fd24ef4b64bea5d114065fea14
msgid "The optimization will still apply when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:146
# 17747cc2d5d04d2bb52572fe7851c1b7
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:148
# 21d1968f12ab4dd88ef8bce95d3a1595
msgid "When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`, the two stages can coalesce into a single :pipeline:`$limit` where the limit amount is the *smaller* of the two initial limit amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:159
# 1f331669bb71445a8c77a285723e4773
msgid "Then the second :pipeline:`$limit` stage can coalesce into the first :pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage where the limit amount ``10`` is the minimum of the two initial limits ``100`` and ``10``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:171
# 2328cf2162ca4d1c8f6e92e5d092fdf6
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:173
# f61bb735cc784a75a807e8b5cf5ba050
msgid "When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, the two stages can coalesce into a single :pipeline:`$skip` where the skip amount is the *sum* of the two initial skip amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:183
# 5863eee018b743ae9d5f6454a019129b
msgid "Then the second :pipeline:`$skip` stage can coalesce into the first :pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage where the skip amount ``7`` is the sum of the two initial limits ``5`` and ``2``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:195
# d18a414eddb949bd9b7fff58bd4ddd45
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:197
# 19d8787df8f844e7968681f156941b4e
msgid "When a :pipeline:`$match` immediately follows another :pipeline:`$match`, the two stages can coalesce into a single :pipeline:`$match` combining the conditions with an :expression:`$and`. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:208
# cdce3580ea394890951a97551a0da2e2
msgid "Then the second :pipeline:`$match` stage can coalesce into the first :pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:217
# 60054c9cf38c4a02b66e17f2f6674c0b
msgid "Examples"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:219
# 853dae6ceee34ce0a3a5706a3829e4a4
msgid "The following examples are some sequences that can take advantage of both sequence reordering and coalescence. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:226
# 62f5638c11d24ba392cfb3109d7bbe31
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:228
# 24964f4963094c77ac512017482c4156
msgid "A pipeline contains a sequence of :pipeline:`$sort` followed by a :pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:237
# de4e3c364a3e4bb99f213587a588344d
msgid "First, the optimizer performs the :ref:`agg-skip-limit-optimization` to transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:246
# 3f0e6ee717df42daba25d03893b08db3
msgid "The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` amount with the reordering. See :ref:`agg-skip-limit-optimization` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:250
# c401c8cf457742c197e44660b1fa17a7
msgid "The reordered sequence now has :pipeline:`$sort` immediately preceding the :pipeline:`$limit`, and the pipeline can coalesce the two stages to decrease memory usage during the sort operation. See :ref:`agg-sort-limit-coalescence` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:256
# 8f0a0518f77441bd9e5c3ccdff57fac9
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:258
# 81298f49250f402998756b2fc752f567
msgid "A pipeline contains a sequence of alternating :pipeline:`$limit` and :pipeline:`$skip` stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:268
# 13e8c3867e224667b897d32bed2bddd5
msgid "The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ $skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit amount:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:279
# b8f7cafbe6ef4694ac7c555aba4c2cd6
msgid "The optimizer then coalesces the two :pipeline:`$limit` stages into a single :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into a single :pipeline:`$skip` stage. The resulting sequence is the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:289
# d0bf5eef8f514fb8a0bf584ce71f0c2f
msgid "See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-coalescence` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:293
# 10e09378b40b4e39a0a066b8cf91d7d3
msgid ":method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()`"
msgstr ""


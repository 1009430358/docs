# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/aggregation-pipeline-optimization.txt:3
# 7a00aa9f95584699954f4f38647e72cd
msgid "Aggregation Pipeline Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:0
# 73517aa17c3e400cafbbb59ee3fab3a4
msgid "On this page"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:13
# 70fa9d4ab90a42f2b6c5fcebfa74e2ce
msgid "Aggregation pipeline operations have an optimization phase which attempts to reshape the pipeline for improved performance."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:16
# e51aeb9e570343d984ed087db162d3c8
msgid "To see how the optimizer transforms a particular aggregation pipeline, include the :method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()` method."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# 4d5089a6178345ea901dcaf086ed00ff
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:25
# bf3d964db74f41c6a68d32099c2f13c3
msgid "Projection Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:27
# e89455a0229e434aba82accf8600b5ba
msgid "The aggregation pipeline can determine if it requires only a subset of the fields in the documents to obtain the results. If so, the pipeline will only use those required fields, reducing the amount of data passing through the pipeline."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:35
# a3680699aefe4aaf8a804366152af55a
msgid "Pipeline Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:40
# 6b57efd323fa41bbafaabb280286e2bf
msgid "``$sort`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:42
# ebc15ba0a3334cb5a711e597e1539fe3
msgid "When you have a sequence with :pipeline:`$sort` followed by a :pipeline:`$match`, the :pipeline:`$match` moves before the :pipeline:`$sort` to minimize the number of objects to sort. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:52
#: ../source/core/aggregation-pipeline-optimization.txt:77
#: ../source/core/aggregation-pipeline-optimization.txt:141
# 53b8dbf6cf424dcfa4fe7b486a97636e
# de5a6d5711a4426da7c24435b7beba80
# a148454b77c5457dadb7453454af49a0
msgid "During the optimization phase, the optimizer transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:63
# ebcb3db679a34870a24b6fcc1b41c10c
msgid "``$skip`` + ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:65
# a56ac0bdd2b04673b8a9ad8a6b425de2
msgid "When you have a sequence with :pipeline:`$skip` followed by a :pipeline:`$limit`, the :pipeline:`$limit` moves before the :pipeline:`$skip`. With the reordering, the :pipeline:`$limit` value increases by the :pipeline:`$skip` amount."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:70
#: ../source/core/aggregation-pipeline-optimization.txt:107
# 58dee6424b7e479ca21937cedf1c9653
# 9cbe437e2374456ab17961912a1d2873
msgid "For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:85
# 8cc9bb4703e94cfaad81fa28506933fd
msgid "This optimization allows for more opportunities for :ref:`agg-sort-limit-coalescence`, such as with ``$sort`` + ``$skip`` + ``$limit`` sequences. See :ref:`agg-sort-limit-coalescence` for details on the coalescence and :ref:`agg-sort-skip-limit-sequence` for an example."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:91
# e9ac6d82eec140eb897a0246dcbdc935
msgid "For aggregation operations on :doc:`sharded collections <aggregation-pipeline-sharded-collections>`, this optimization reduces the results returned from each shard."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:96
# 24ef0b67d4fe427e85a108602fc7760a
msgid "``$redact`` + ``$match`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:98
# c2ebfc32f16a4ad5a49fea79aaced332
msgid "When possible, when the pipeline has the :pipeline:`$redact` stage immediately followed by the :pipeline:`$match` stage, the aggregation can sometimes add a portion of the :pipeline:`$match` stage before the :pipeline:`$redact` stage. If the added :pipeline:`$match` stage is at the start of a pipeline, the aggregation can use an index as well as query the collection to limit the number of documents that enter the pipeline. See :ref:`aggregation-pipeline-operators-and-performance` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:114
# 7ceff7ed23be4caf9f374ea9db165f0e
msgid "The optimizer can add the same :pipeline:`$match` stage before the :pipeline:`$redact` stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:126
# 444104796b1a45d9b8e8e341096df9fb
msgid "``$project`` + ``$skip`` or ``$limit`` Sequence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:130
# fbb12ce3ae80489cb5316e2532ee6162
msgid "When you have a sequence with :pipeline:`$project` followed by either :pipeline:`$skip` or :pipeline:`$limit`, the :pipeline:`$skip` or :pipeline:`$limit` moves before :pipeline:`$project`. For example, if the pipeline consists of the following stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:150
# 6768fafe653e43f0857c68f0692463f0
msgid "This optimization allows for more opportunities for :ref:`agg-sort-limit-coalescence`, such as with ``$sort`` + ``$limit`` sequences. See :ref:`agg-sort-limit-coalescence` for details on the coalescence."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:158
# a77cb629b8ca4166a21de883736b8009
msgid "Pipeline Coalescence Optimization"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:160
# 6c89bee0fb3b4b17bde55474e7c64f94
msgid "When possible, the optimization phase coalesces a pipeline stage into its predecessor. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:167
# 4996e3ff239e4297899845808f71ceec
msgid "``$sort`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:169
# 62b6ca05ffef465fb2b8135dee4c5af4
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit`, the optimizer can coalesce the :pipeline:`$limit` into the :pipeline:`$sort`. This allows the sort operation to only maintain the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory [#coalescence-allowDiskUse]_. See :ref:`sort-and-memory` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:177
# 8b758d9c051940a59022a4b983254453
msgid "The optimization will still apply when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:184
# 5d6062196268440ba91db298b316a4fa
msgid "``$limit`` + ``$limit`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:186
# 7106f40a37174b89a75e54e17e4fa216
msgid "When a :pipeline:`$limit` immediately follows another :pipeline:`$limit`, the two stages can coalesce into a single :pipeline:`$limit` where the limit amount is the *smaller* of the two initial limit amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:197
# c1b59ddb6c3147c7a35c439bde11f949
msgid "Then the second :pipeline:`$limit` stage can coalesce into the first :pipeline:`$limit` stage and result in a single :pipeline:`$limit` stage where the limit amount ``10`` is the minimum of the two initial limits ``100`` and ``10``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:209
# 90ac488b49484af09f5929f458cfba86
msgid "``$skip`` + ``$skip`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:211
# 8468e976dd514b1a8f446387cf0ec6ce
msgid "When a :pipeline:`$skip` immediately follows another :pipeline:`$skip`, the two stages can coalesce into a single :pipeline:`$skip` where the skip amount is the *sum* of the two initial skip amounts. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:221
# aaa8346e10034dc3950d3517d335fdf2
msgid "Then the second :pipeline:`$skip` stage can coalesce into the first :pipeline:`$skip` stage and result in a single :pipeline:`$skip` stage where the skip amount ``7`` is the sum of the two initial limits ``5`` and ``2``."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:233
# aff1c278d0324ef98fd6a9984321105f
msgid "``$match`` + ``$match`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:235
# 46b9bb0c2ea347cfafac36586b68df6b
msgid "When a :pipeline:`$match` immediately follows another :pipeline:`$match`, the two stages can coalesce into a single :pipeline:`$match` combining the conditions with an :expression:`$and`. For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:246
# 1bdbbe0179e84bac8aec52bf5c52dc6c
msgid "Then the second :pipeline:`$match` stage can coalesce into the first :pipeline:`$match` stage and result in a single :pipeline:`$match` stage"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:257
# 891a9a573f794be3bb0239d81bd4d4e7
msgid "``$lookup`` + ``$unwind`` Coalescence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:261
# 8683a72901264b7897bd96f4f4587dd9
msgid "When a :pipeline:`$unwind` immediately follows another :pipeline:`$lookup`, and the :pipeline:`$unwind` operates on the ``as`` field of the :pipeline:`$lookup`, the optimizer can coalesce the :pipeline:`$unwind` into the :pipeline:`$lookup` stage. This avoids creating large intermediate documents."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:267
# d8573e9e4d1c4d5b929b29b92e10ae2c
msgid "For example, a pipeline contains the following sequence:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:281
# c7b1f8a316024e6fbb7b50b6f89e3900
msgid "The optimizer can coalesce the :pipeline:`$unwind` stage into the :pipeline:`$lookup` stage. If you run the aggregation with ``explain`` option, the ``explain`` output shows the coalesced stage:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:298
# cc98b4d1a985466a8c4f554a79cedd96
msgid "Examples"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:300
# 2539e7fc045a460c81bff8741909a2da
msgid "The following examples are some sequences that can take advantage of both sequence reordering and coalescence. Generally, coalescence occurs *after* any sequence reordering optimization."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:307
# c84b3b1caed045e9a14e6894a9beeb05
msgid "``$sort`` + ``$skip`` + ``$limit`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:309
# d330cbadd2704275b064e8553f39f480
msgid "A pipeline contains a sequence of :pipeline:`$sort` followed by a :pipeline:`$skip` followed by a :pipeline:`$limit`:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:318
# fd123fbabf0d4cb59095d35d03e05682
msgid "First, the optimizer performs the :ref:`agg-skip-limit-optimization` to transforms the sequence to the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:327
# 0acb618c585e4e0a873b4ae2bbbe9364
msgid "The :ref:`agg-skip-limit-optimization` increases the :pipeline:`$limit` amount with the reordering. See :ref:`agg-skip-limit-optimization` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:331
# 80d3a062895f48398d011e21ec744f72
msgid "The reordered sequence now has :pipeline:`$sort` immediately preceding the :pipeline:`$limit`, and the pipeline can coalesce the two stages to decrease memory usage during the sort operation. See :ref:`agg-sort-limit-coalescence` for more information."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:337
# 27704e1a78134b4781d86aeb0a89ff95
msgid "``$limit`` + ``$skip`` + ``$limit`` + ``$skip`` Sequence"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:339
# cff5c32b39fa4544bc0759d7af5666e5
msgid "A pipeline contains a sequence of alternating :pipeline:`$limit` and :pipeline:`$skip` stages:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:349
# ba1f7cb719b94cdbbd3490bc1bc84a08
msgid "The :ref:`agg-skip-limit-optimization` reverses the position of the ``{ $skip: 5 }`` and ``{ $limit: 10 }`` stages and increases the limit amount:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:360
# be99ae49f43749b4844b5668cb852909
msgid "The optimizer then coalesces the two :pipeline:`$limit` stages into a single :pipeline:`$limit` stage and the two :pipeline:`$skip` stages into a single :pipeline:`$skip` stage. The resulting sequence is the following:"
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:370
# da7d13427a42468f8963ddf89a8445a2
msgid "See :ref:`agg-limit-limit-coalescence` and :ref:`agg-skip-skip-coalescence` for details."
msgstr ""

#: ../source/core/aggregation-pipeline-optimization.txt:374
# f199ef673db04ef197e9e442830b004e
msgid ":method:`explain <db.collection.aggregate()>` option in the :method:`db.collection.aggregate()`"
msgstr ""


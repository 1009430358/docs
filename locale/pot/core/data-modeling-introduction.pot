# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-modeling-introduction.txt:3
# bd235a9381e343f69a0b5cb1db36f923
msgid "Data Modeling Introduction"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:0
# e06063164a7e488bbbe10ac00734ac2f
msgid "On this page"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:13
# 8731019c61014260b4852376c59bf73f
msgid "Data in MongoDB has a *flexible schema*. Unlike SQL databases, where you must determine and declare a table's schema before inserting data, MongoDB's :term:`collections <collection>` do not enforce :term:`document` structure. This flexibility facilitates the mapping of documents to an entity or an object. Each document can match the data fields of the represented entity, even if the data has substantial variation. In practice, however, the documents in a collection share a similar structure."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:22
# feceec64e6b64014b6d34095010ec3be
msgid "The key challenge in data modeling is balancing the needs of the application, the performance characteristics of the database engine, and the data retrieval patterns. When designing data models, always consider the application usage of the data (i.e. queries, updates, and processing of the data) as well as the inherent structure of the data itself."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:30
# d485d091f7cc40ba80ac7b8413abd5ad
msgid "Document Structure"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:34
# 9a37102db6fd4e8989d6794eebabfaa8
msgid "The key decision in designing data models for MongoDB applications revolves around the structure of documents and how the application represents relationships between data. There are two tools that allow applications to represent these relationships: *references* and *embedded documents*."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:41
# d49aab9292e34204a9fc9f38acda2522
msgid "References"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:43
# a4dba58d0db443dda5eb63fa494cdcfd
msgid "References store the relationships between data by including links or *references* from one document to another. Applications can resolve these :doc:`references </reference/database-references>` to access the related data. Broadly, these are *normalized* data models."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:50
# 49f235ead8d74a0d9d9d0e8cb7aabcb2
msgid "See :ref:`data-modeling-referencing` for the strengths and weaknesses of using references."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:54
# 98dfc11735b248bbbb6ff335a329a6c2
msgid "Embedded Data"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:56
# 4f63c76d211a429eaaf6de4eedaf3149
msgid "Embedded documents capture relationships between data by storing related data in a single document structure. MongoDB documents make it possible to embed document structures in a field or array within a document. These *denormalized* data models allow applications to retrieve and manipulate related data in a single database operation."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:65
# 3dc82e126d444d58a4ddfcbdb8601a1e
msgid "See :ref:`data-modeling-embedding` for the strengths and weaknesses of embedding documents."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:71
# e667610f575b4a72aa2c46260ae94f3e
msgid "Atomicity of Write Operations"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:73
# 79d15eecc6e94ed7acb0aa1d5094c9f4
msgid "In MongoDB, write operations are atomic at the :term:`document` level, and no single write operation can atomically affect more than one document or more than one collection. A denormalized data model with embedded data combines all related data for a represented entity in a single document. This facilitates atomic write operations since a single write operation can insert or update the data for an entity. Normalizing the data would split the data across multiple collections and would require multiple write operations that are not atomic collectively."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:83
# cf044c3bf08a464780deb88592dbae2e
msgid "However, schemas that facilitate atomic writes may limit ways that applications can use the data or may limit ways to modify applications. The :ref:`Atomicity Considerations <data-model-atomicity>` documentation describes the challenge of designing a schema that balances flexibility and atomicity."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:90
# 69a52868cf7348728fa4f8cd4d0db86d
msgid "Document Growth"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:92
# 7065c3b44aa0492db6aa6a46fb29ed8c
msgid "Some updates, such as pushing elements to an array or adding new fields, increase a :term:`document's <document>` size."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:95
# dce22f925bb54d4badf35150c273b39a
msgid "For the MMAPv1 storage engine, if the document size exceeds the allocated space for that document, MongoDB relocates the document on disk. When using the MMAPv1 storage engine, growth consideration can affect the decision to normalize or denormalize data. See :ref:`Document Growth Considerations <data-model-document-growth>` for more about planning for and managing document growth for MMAPv1."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:103
# 8b3b944b1dd84ce18ac916a14aba4474
msgid "Data Use and Performance"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:105
# 1b5143a904c542c89ee0fa2f6c854de1
msgid "When designing a data model, consider how applications will use your database. For instance, if your application only uses recently inserted documents, consider using :doc:`/core/capped-collections`. Or if your application needs are mainly read operations to a collection, adding indexes to support common queries can improve performance."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:111
# b1da9659abb14dcba119a1c74464b355
msgid "See :doc:`/core/data-model-operations` for more information on these and other operational considerations that affect data model designs."
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:4
# afd38959100f401a93769ed0922f021a
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:6
# dea04b3c2b534898bd7e89ccdd00f1da
msgid "`Thinking in Documents Part 1 (Blog Post) <https://www.mongodb.com/blog/post/thinking-documents-part-1?jmp=docs>`_"
msgstr ""


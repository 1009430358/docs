# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-modeling-introduction.txt:3
# 6d14ff97538549d2947244d43890b494
msgid "Data Modeling Introduction"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:7
# 19620bf1190441e1adc44484d01bae5c
msgid "Data in MongoDB has a *flexible schema*. Unlike SQL databases, where you must determine and declare a table's schema before inserting data, MongoDB's :term:`collections <collection>` do not enforce :term:`document` structure. This flexibility facilitates the mapping of documents to an entity or an object. Each document can match the data fields of the represented entity, even if the data has substantial variation. In practice, however, the documents in a collection share a similar structure."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:16
# 09fa898008aa4eb89f1e0670d65ef961
msgid "The key challenge in data modeling is balancing the needs of the application, the performance characteristics of the database engine, and the data retrieval patterns. When designing data models, always consider the application usage of the data (i.e. queries, updates, and processing of the data) as well as the inherent structure of the data itself."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:24
# e7e0c84e894943bb93659b993d99022a
msgid "Document Structure"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:28
# 20271b3301944f49ba8198301deb3571
msgid "The key decision in designing data models for MongoDB applications revolves around the structure of documents and how the application represents relationships between data. There are two tools that allow applications to represent these relationships: *references* and *embedded documents*."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:35
# 1915a68a6c2e48a9b6d59cf2366f5717
msgid "References"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:37
# a6d77702f7f94952b96db933b8faa09e
msgid "References store the relationships between data by including links or *references* from one document to another. Applications can resolve these :doc:`references </reference/database-references>` to access the related data. Broadly, these are *normalized* data models."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:44
# ace638b96eea4409bd84df17cbeb2917
msgid "See :ref:`data-modeling-referencing` for the strengths and weaknesses of using references."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:48
# 4d14018b75ad4f308d3c90a6aafc7a86
msgid "Embedded Data"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:50
# fa5674a41274441083b87ff758193bc8
msgid "Embedded documents capture relationships between data by storing related data in a single document structure. MongoDB documents make it possible to embed document structures in a field or array within a document. These *denormalized* data models allow applications to retrieve and manipulate related data in a single database operation."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:59
# 0f0f9d1aa7674280bcc87f5873ccecf8
msgid "See :ref:`data-modeling-embedding` for the strengths and weaknesses of embedding documents."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:65
# b712a900e036469097f0532e30ba1e54
msgid "Atomicity of Write Operations"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:67
# b7e9b064801e4a66970decb2f9250554
msgid "In MongoDB, write operations are atomic at the :term:`document` level, and no single write operation can atomically affect more than one document or more than one collection. A denormalized data model with embedded data combines all related data for a represented entity in a single document. This facilitates atomic write operations since a single write operation can insert or update the data for an entity. Normalizing the data would split the data across multiple collections and would require multiple write operations that are not atomic collectively."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:77
# 385531d861fa42e8a71ae7295c485b2f
msgid "However, schemas that facilitate atomic writes may limit ways that applications can use the data or may limit ways to modify applications. The :ref:`Atomicity Considerations <data-model-atomicity>` documentation describes the challenge of designing a schema that balances flexibility and atomicity."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:84
# ffc4179682304201980032b5a39da8cc
msgid "Document Growth"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:86
# 3ae81599f18a48899b809099ec8c8260
msgid "Some updates, such as pushing elements to an array or adding new fields, increase a :term:`document's <document>` size."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:89
# 14163e7ee40845e0a55e549809eb2bf2
msgid "For the MMAPv1 storage engine, if the document size exceeds the allocated space for that document, MongoDB relocates the document on disk. When using the MMAPv1 storage engine, growth consideration can affect the decision to normalize or denormalize data. See :ref:`Document Growth Considerations <data-model-document-growth>` for more about planning for and managing document growth for MMAPv1."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:97
# e45e3c73ea444dcab4cf78bcd740b0d5
msgid "Data Use and Performance"
msgstr ""

#: ../source/core/data-modeling-introduction.txt:99
# 4c302c7c07984190994070fb51f029b7
msgid "When designing a data model, consider how applications will use your database. For instance, if your application only uses recently inserted documents, consider using :doc:`/core/capped-collections`. Or if your application needs are mainly read operations to a collection, adding indexes to support common queries can improve performance."
msgstr ""

#: ../source/core/data-modeling-introduction.txt:105
# f2b24b58cc2a43ed8d69a6583d1a6c84
msgid "See :doc:`/core/data-model-operations` for more information on these and other operational considerations that affect data model designs."
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:4
# 7c880c52509e4607a2e6dd78492454d7
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-data-modeling-introduction.rst:6
# 43596879a6fb4eeab783d920df8ea096
msgid "`Thinking in Documents Part 1 (Blog Post) <https://www.mongodb.com/blog/post/thinking-documents-part-1?jmp=docs>`_"
msgstr ""


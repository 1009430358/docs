# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/journaling.txt:5
# 6b9178a0c7de47078f9b5b145cde30d2
msgid "Journaling"
msgstr ""

#: ../source/core/journaling.txt:0
# 68bc849109ae4c17adc4812b0f8fdaa8
msgid "On this page"
msgstr ""

#: ../source/core/journaling.txt:15
# d04ad19ed6f146eb8c8e402f37598e89
msgid "To provide durability in the event of a failure, MongoDB uses *write ahead logging* to on-disk :term:`journal` files."
msgstr ""

#: ../source/core/journaling.txt:21
# d081d7326aef4ab2bce99a7eff2cd188
msgid "Journaling and the WiredTiger Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:25
# 9dd3c9b4aa00465296cb210f44430d19
msgid "The *log* mentioned in this section refers to the WiredTiger write-ahead log (i.e. the journal) and not the MongoDB log file."
msgstr ""

#: ../source/core/journaling.txt:28
# 444b63c60fcb479e9f29a6c17001bb94
msgid ":doc:`WiredTiger </core/wiredtiger>` uses :ref:`checkpoints <storage-wiredtiger-checkpoints>` to provide a consistent view of data on disk and allow MongoDB to recover from the last checkpoint. However, if MongoDB exits unexpectedly in between checkpoints, journaling is required to recover information that occurred after the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:34
# a79691dea76140a89f8cd100a095c517
msgid "With journaling, the recovery process:"
msgstr ""

#: ../source/core/journaling.txt:36
# 92fe001741c549d3a3922f0bcffdb82f
msgid "Looks in the data files to find the identifier of the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:39
# 772f9e8b68ae455f83c9701b7a32a0ea
msgid "Searches in the journal files for the record that matches the identifier of the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:42
# 40c1cba29e4d48a4837c3c08a0a7d73e
msgid "Apply the operations in the journal files since the last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:47
#: ../source/core/journaling.txt:121
# b246205787f94ab5b724411e6baec724
# 634ec04723424d8a931d4a169098c410
msgid "Journaling Process"
msgstr ""

#: ../source/core/journaling.txt:51
# 8cdb05f1f9754bcb83c8d0a88b340e89
msgid "With journaling, WiredTiger creates one journal record for each client initiated write operation. The journal record includes any internal write operations caused by the initial write. For example, an update to a document in a collection may result in modifications to the indexes; WiredTiger creates a single journal record that includes both the update operation and its associated index modifications."
msgstr ""

#: ../source/core/journaling.txt:58
# a0555ea881954c80955f81462aab86ea
msgid "MongoDB configures WiredTiger to use in-memory buffering for storing the journal records. Threads coordinate to allocate and copy into their portion of the buffer. All journal records up to 128 kB are buffered."
msgstr ""

#: ../source/core/journaling.txt:63
# b794838d29f8457797104cece873b577
msgid "WiredTiger syncs the buffered journal records to disk according to the following intervals or conditions:"
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:1
# bed7112c2fcb440dae755db2b896b8ec
msgid "Every 50 milliseconds."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:4
# dc7b0efb3a404294a6db03ca187456c6
msgid "MongoDB sets checkpoints to occur in WiredTiger on user data at an interval of 60 seconds or when 2 GB of journal data has been written, whichever occurs first."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:8
# 6c890294e0924e3cad2933a30fbcc6ac
msgid "If the write operation includes a write concern of :writeconcern:`j: true <j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

#: ../source/includes/extracts/wt-journal-frequency.rst:11
# 36f8e07bd02841058c930a7b655ee8d5
msgid "Because MongoDB uses a journal file size limit of 100 MB, WiredTiger creates a new journal file approximately every 100 MB of data. When WiredTiger creates a new journal file, WiredTiger syncs the previous journal file."
msgstr ""

#: ../source/core/journaling.txt:70
# 2bfaccaa4fc7444d8a6dc732138abc15
msgid "In between write operations, while the journal records remain in the WiredTiger buffers, updates can be lost following a hard shutdown of :program:`mongod`."
msgstr ""

#: ../source/core/journaling.txt:75
# febbaefc19b64f3fa22a258ec9ea3802
msgid "The :dbcommand:`serverStatus` command returns information on the WiredTiger journal statistics in the :data:`wiredTiger.log <data:: serverStatus.wiredTiger.log>` field."
msgstr ""

#: ../source/core/journaling.txt:80
#: ../source/core/journaling.txt:179
# 17a9b0bfd8524ac8afdee25a3051563f
# 2b5c4583b6d84de1852ff08504a20b03
msgid "Journal Files"
msgstr ""

#: ../source/core/journaling.txt:82
# 3122bc3a36aa4854bb81c71017ba5f54
msgid "For the journal files, MongoDB creates a subdirectory named ``journal`` under the :setting:`~storage.dbPath` directory. WiredTiger journal files have names with the following format ``WiredTigerLog.<sequence>`` where ``<sequence>`` is a zero-padded number starting from ``0000000001``."
msgstr ""

#: ../source/core/journaling.txt:88
# 1e586d3d60db4554969ada55b8312eed
msgid "Journal files contain a record per each write operation. Each record has a unique identifier."
msgstr ""

#: ../source/core/journaling.txt:91
# 09ad71d5c63b43d59733607e59ed4ac0
msgid "MongoDB configures WiredTiger to use snappy compression for the journaling data."
msgstr ""

#: ../source/includes/fact-wiredtiger-log-compression-limit.rst:1
# ff406f14151d4d28afdb846dc019b104
msgid "Minimum log record size for WiredTiger is 128 bytes. If a log record is 128 bytes or smaller, WiredTiger does not compress that record."
msgstr ""

#: ../source/core/journaling.txt:96
# d4684615dea24e9c93c6fcc424a8adfa
msgid "WiredTiger journal files for MongoDB have a maximum size limit of approximately 100 MB. Once the file exceeds that limit, WiredTiger creates a new journal file."
msgstr ""

#: ../source/core/journaling.txt:100
# 6380e9b23e4b4201b83ed593d7bb905c
msgid "WiredTiger automatically removes old journal files to maintain only the files needed to recover from last checkpoint."
msgstr ""

#: ../source/core/journaling.txt:103
# ed7aed769137439198cfc16c0f2d7633
msgid "WiredTiger will pre-allocate journal files."
msgstr ""

#: ../source/core/journaling.txt:108
# 579f4652fc534859990f55fe2b0749e9
msgid "Journaling and the MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:110
# 8b50d1767d4e4c74bbee7a15548738ae
msgid "With :doc:`MMAPv1 </core/mmapv1>`, when a write operation occurs, MongoDB updates the in-memory view. With journaling enabled, MongoDB writes the in-memory changes first to on-disk journal files. If MongoDB should terminate or encounter an error before committing the changes to the data files, MongoDB can use the journal files to apply the write operation to the data files and maintain a consistent state."
msgstr ""

#: ../source/core/journaling.txt:123
# d697a48bde55409c9fde590c7eb3288d
msgid "With journaling, MongoDB's storage layer has two internal views of the data set: the *private view*, used to write to the journal files, and the *shared view*, used to write to the data files:"
msgstr ""

#: ../source/core/journaling.txt:127
# 1e689d952c58474b8e56435bd354cb3e
msgid "MongoDB first applies write operations to the private view."
msgstr ""

#: ../source/core/journaling.txt:129
# a740d93a8597445aa50964cf7751c9a7
msgid "MongoDB then applies the changes in the private view to the on-disk :ref:`journal files <journaling-journal-files>` in the ``journal`` directory roughly every 100 milliseconds. MongoDB records the write operations to the on-disk journal files in batches called *group commits*. Grouping the commits help minimize the performance impact of journaling since these commits must block all writers during the commit. Writes to the journal are atomic, ensuring the consistency of the on-disk journal files. For information on the frequency of the commit interval, see :setting:`storage.journal.commitIntervalMs`."
msgstr ""

#: ../source/core/journaling.txt:140
# 98b46b1c248646418e8964ae1fc86bda
msgid "Upon a journal commit, MongoDB applies the changes from the journal to the shared view."
msgstr ""

#: ../source/core/journaling.txt:143
# 567222aa1b7d41d5b6eb5a7d4d4e33e3
msgid "Finally, MongoDB applies the changes in the shared view to the data files. More precisely, at default intervals of 60 seconds, MongoDB asks the operating system to flush the shared view to the data files. The operating system may choose to flush the shared view to disk at a higher frequency than 60 seconds, particularly if the system is low on free memory. To change the interval for writing to the data files, use the :setting:`storage.syncPeriodSecs` setting."
msgstr ""

#: ../source/core/journaling.txt:151
# 042b9258d1334264886f7cb02fcb0ee3
msgid "If the :program:`mongod` instance were to crash without having applied the writes to the data files, the journal could replay the writes to the shared view for eventual write to the data files."
msgstr ""

#: ../source/core/journaling.txt:155
# d0214a262f564be28e2383eeed52fba6
msgid "When MongoDB flushes write operations to the data files, MongoDB notes which journal writes have been flushed. Once a journal file contains only flushed writes, it is no longer needed for recovery and MongoDB can recycle it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:160
# ab6956b159594685aaee0f9c01d65416
msgid "Once the journal operations have been applied to the shared view and flushed to disk (i.e. pages in the shared view and  private view are in sync), MongoDB asks the operating system to remap the shared view to the private view in order to save physical RAM. MongoDB routinely asks the operating system to remap the shared view to the private view in order to save physical RAM. Upon a new remapping, the operating system knows that physical memory pages can be shared between the shared view and the private view mappings."
msgstr ""

#: ../source/core/journaling.txt:171
# a2a3d9feeac9427a9e7d6237fa896353
msgid "The interaction between the shared view and the on-disk data files is similar to how MongoDB works *without* journaling. Without journaling, MongoDB asks the operating system to flush in-memory changes to the data files every 60 seconds."
msgstr ""

#: ../source/core/journaling.txt:181
# 16597f608708410f8dccae36861a00c1
msgid "With journaling enabled, MongoDB creates a subdirectory named ``journal`` under the :setting:`~storage.dbPath` directory. The ``journal`` directory contains journal files named ``j._<sequence>`` where ``<sequence>`` is an integer starting from ``0`` and a \"last sequence number\" file ``lsn``."
msgstr ""

#: ../source/core/journaling.txt:187
# 187330a70376463da7fb00f0bcfcf55c
msgid "Journal files contain the write ahead logs; each journal entry describes the bytes the write operation changed in the data files. Journal files are append-only files. When a journal file holds 1 gigabyte of data, MongoDB creates a new journal file. If you use the :setting:`storage.smallFiles` option when starting :program:`mongod`, you limit the size of each journal file to 128 megabytes."
msgstr ""

#: ../source/core/journaling.txt:194
# dcf6a5aa5f664e28beae5d3b7f92854b
msgid "The ``lsn`` file contains the last time MongoDB flushed the changes to the data files."
msgstr ""

#: ../source/core/journaling.txt:197
# 4f6b9659dcdb4374872dda9d3e49574f
msgid "Once MongoDB applies all the write operations in a particular journal file to the data files, MongoDB can recycle it for a new journal file."
msgstr ""

#: ../source/core/journaling.txt:200
# b82bd999beec4d91a3cd66488d7581ef
msgid "Unless you write *many* bytes of data per second, the ``journal`` directory should contain only two or three journal files."
msgstr ""

#: ../source/core/journaling.txt:203
# 91fe0712333345269e151227ae08a64c
msgid "A clean shutdown removes all the files in the journal directory. A dirty shutdown (crash) leaves files in the journal directory; these are used to automatically recover the database to a consistent state when the mongod process is restarted."
msgstr ""

#: ../source/core/journaling.txt:209
# cd83e2a6a1ce40e0b8f15a7cfee62b9e
msgid "Journal Directory"
msgstr ""

#: ../source/core/journaling.txt:211
# b907a72ebbd7472bb2cfe734eecb58e0
msgid "To speed the frequent sequential writes that occur to the current journal file, you can ensure that the journal directory is on a different filesystem from the database data files."
msgstr ""

#: ../source/core/journaling.txt:217
# 427cbb05006541cbb65a800ecc76edcb
msgid "If you place the journal on a different filesystem from your data files, you *cannot* use a filesystem snapshot alone to capture valid backups of a :setting:`~storage.dbPath` directory. In this case, use :method:`~db.fsyncLock()` to ensure that database files are consistent before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is complete."
msgstr ""

#: ../source/core/journaling.txt:225
# 7753a07c6e68449baf2b323ad221b31a
msgid "Preallocation Lag"
msgstr ""

#: ../source/core/journaling.txt:227
# a716bf5081a14fdeb79ba58811e1e18e
msgid "MongoDB may preallocate journal files if the :program:`mongod` process determines that it is more efficient to preallocate journal files than create new journal files as needed."
msgstr ""

#: ../source/core/journaling.txt:231
# 737662e27c6d4522ae0c0d93d2f6c657
msgid "Depending on your filesystem, you might experience a preallocation lag the first time you start a :program:`mongod` instance with journaling enabled. The amount of time required to pre-allocate files might last several minutes; during this time, you will not be able to connect to the database. This is a one-time preallocation and does not occur with future invocations."
msgstr ""

#: ../source/core/journaling.txt:238
# 0602b83fa32145ae82bd2c4a9fe76fe9
msgid "To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""

#: ../source/core/journaling.txt:243
# 3bb42032a7874d128d7e083e1fb5b0e7
msgid "Journaling and the In-Memory Storage Engine"
msgstr ""

#: ../source/core/journaling.txt:245
# 9a1bde70e4bb419695895aca3f4626cf
msgid "Starting in MongoDB Enterprise version 3.2.6, the :doc:`In-Memory Storage Engine </core/inmemory>` is part of general availability (GA). Because its data is kept in memory, there is no separate journal. Write operations with a write concern of :writeconcern:`j: true <j>` are immediately acknowledged."
msgstr ""

#: ../source/core/journaling.txt:251
# 32ea8a13883940f4af8c27cdd6feb82e
msgid ":ref:`In-Memory Storage Engine: Durability <inmemory-durability>`"
msgstr ""


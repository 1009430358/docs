# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-atomicity.txt:3
# 1fcec390390149c9b7ce33ec116c1c81
msgid "Atomicity and Transactions"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:7
# 613672e21449423785f4751708a528a5
msgid "In MongoDB, a write operation is atomic on the level of a single document, even if the operation modifies multiple embedded documents *within* a single document."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:11
# 9f5f013d05074e599a4660324b40cf81
msgid "When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. However, you can *isolate* a single write operation that affects multiple documents using the :update:`$isolated` operator."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:18
# d9e93cd35ba44b35a9d2cd487bf61209
msgid "``$isolated`` Operator"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:20
# b6b4325e70b44683b6a45ec3cffb338d
msgid "Using the :update:`$isolated` operator, a write operation that affect multiple documents can prevent other processes from interleaving once the write operation modifies the first document. This ensures that no client sees the changes until the write operation completes or errors out."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:26
# 52f00f9c44ea4f05a795541ccb7c9de1
msgid "Isolated write operation does not provide \"all-or-nothing\" atomicity. That is, an error during the write operation does not roll back all its changes that preceded the error."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:30
# 3c637f37dc474b60a5ad4e497fd4dcd7
msgid "The :update:`$isolated` operator does **not** work on sharded clusters."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:32
# e28c5c0b5fbd46ab8e3a5510d373e8f7
msgid "For an example of an update operation that uses the :update:`$isolated` operator, see :update:`$isolated`. For an example of a remove operation that uses the :update:`$isolated` operator, see :ref:`isolate-remove-operations`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:38
# b7944acaf1a84375bf0059ee215e8c63
msgid "Transaction-Like Semantics"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:40
# 99f52a73c9eb404b83a10854bb467e17
msgid "Since a single document can contain multiple embedded documents, single-document atomicity is sufficient for many practical use cases. For cases where a sequence of write operations must operate as if in a single transaction, you can implement a :doc:`two-phase commit </tutorial/perform-two-phase-commits>` in your application."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:46
# 48dae93c7cb2417f86b0d7adf310429a
msgid "However, two-phase commits can only offer transaction-*like* semantics. Using two-phase commit ensures data consistency, but it is possible for applications to return intermediate data during the two-phase commit or rollback."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:51
# 577161c9ced74a3daffdb54ebb3ce276
msgid "For more information on two-phase commit and rollback, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:57
# 26740e96ab9a41928f1bd838ff3d0be8
msgid "Concurrency Control"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:59
# c1f118fd8e0a49aab2bd21c1022b9e24
msgid "Concurrency control allows multiple applications to run concurrently without causing data inconsistency or conflicts."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:62
# 40604ff00183492da1ff599189c56861
msgid "An approach may be to create a :ref:`unique index <index-type-unique>` on a field (or fields) that should have only unique values (or unique combination of values) prevents duplicate insertions or updates that result in duplicate values. For examples of use cases, see :ref:`update() and Unique Index <update-with-unique-indexes>` and :ref:`findAndModify() and Unique Index <upsert-and-unique-index>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:69
# 533c3fff3f724dc899a651a0ab3856d1
msgid "Another approach is to specify the expected current value of a field in the query predicate for the write operations. For an example, see :doc:`Update if Current </tutorial/update-if-current>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:73
# 732376f0b99a445e9a8f7e0666c84efa
msgid "The two-phase commit pattern provides a variation where the query predicate includes the :ref:`application identifier <2-phase-commits-concurrency>` as well as the expected state of the data in the write operation."
msgstr ""


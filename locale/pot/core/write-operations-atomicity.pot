# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-atomicity.txt:3
# a6bdd1661ab14c09940f396b220f6628
msgid "Atomicity and Transactions"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:0
# 5c0b144e93ce49c398c1302be8d2555f
msgid "On this page"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:13
# d15b14ac4cf14544b23a5c70ad582c0f
msgid "In MongoDB, a write operation is atomic on the level of a single document, even if the operation modifies multiple embedded documents *within* a single document."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
# 9ddc666cc8294616b7403e8b23e0e2b6
msgid "When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. However, you can *isolate* a single write operation that affects multiple documents using the :update:`$isolated` operator."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:22
# e3f2a4919b8a4407982b07c1d0a367bd
msgid "``$isolated`` Operator"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:1
# 71f6c6d4bec04c26ad12e7aacb3cdf74
msgid "Using the :update:`$isolated` operator, a write operation that affects multiple documents can prevent other processes from interleaving once the write operation modifies the first document. This ensures that no client sees the changes until the write operation completes or errors out."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:7
# e2fa5e78927241819ef219e5b7d8dee0
msgid ":update:`$isolated` does **not** work with :term:`sharded clusters <sharded cluster>`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:10
# 23ba98878d30496abbc0cc84bb914b1c
msgid "An isolated write operation does not provide \"all-or-nothing\" atomicity. That is, an error during the write operation does not roll back all its changes that preceded the error."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:16
# 2f6cf728b383455ea53bfd6853d4255c
msgid ":update:`$isolated` operator causes write operations to acquire an exclusive lock on the collection, *even for document-level locking storage engines* such as WiredTiger. That is, :update:`$isolated` operator will make WiredTiger single-threaded for the duration of the operation."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:26
# 2afdfdf1d7394c5fa6e1cf3cb86643b0
msgid "The :update:`$isolated` operator does **not** work on sharded clusters."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:28
# f613e6f345674851bdee6287e24fd788
msgid "For an example of an update operation that uses the :update:`$isolated` operator, see :update:`$isolated`. For an example of a remove operation that uses the :update:`$isolated` operator, see :ref:`isolate-remove-operations`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:34
# 56ca74909507496695ec8100cbcaae05
msgid "Transaction-Like Semantics"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:36
# 5ad9ccb06c78464a8ba2a3ffa6ecc8ab
msgid "Since a single document can contain multiple embedded documents, single-document atomicity is sufficient for many practical use cases. For cases where a sequence of write operations must operate as if in a single transaction, you can implement a :doc:`two-phase commit </tutorial/perform-two-phase-commits>` in your application."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:42
# 45f303b079804d5793907d7e0f3de34e
msgid "However, two-phase commits can only offer transaction-*like* semantics. Using two-phase commit ensures data consistency, but it is possible for applications to return intermediate data during the two-phase commit or rollback."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:47
# 06211fb5c2014735b2e3f7bd9842ff8c
msgid "For more information on two-phase commit and rollback, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:53
# d27b844e1a564de99e7bbe9f2e3a1cd8
msgid "Concurrency Control"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:55
# 939b885e3ea44da7af8792e7447bc730
msgid "Concurrency control allows multiple applications to run concurrently without causing data inconsistency or conflicts."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:58
# e16e6c86e3f54fffb98d60ed0c1c76a0
msgid "One approach is to create a :ref:`unique index <index-type-unique>` on a field that can only have unique values. This prevents insertions or updates from creating duplicate data. Create a unique index on multiple fields to force uniqueness on that combination of field values. For examples of use cases, see :ref:`update() and Unique Index <update-with-unique-indexes>` and :ref:`findAndModify() and Unique Index <upsert-and-unique-index>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:66
# c51df874ab1443afa3b38e34ac0143c1
msgid "Another approach is to specify the expected current value of a field in the query predicate for the write operations. The two-phase commit pattern provides a variation where the query predicate includes the :ref:`application identifier <2-phase-commits-concurrency>` as well as the expected state of the data in the write operation."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:72
# 45417eab21e54f04b7f727f6da956b0c
msgid ":doc:`/core/read-isolation-consistency-recency`"
msgstr ""


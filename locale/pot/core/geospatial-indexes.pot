# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/geospatial-indexes.txt:3
# 9cffb3212aeb40f48a5bb6ba99bfbf84
msgid "``2d`` Index Internals"
msgstr ""

#: ../source/core/geospatial-indexes.txt:0
# 52e9f48521cd4b3fbb014a8bdd009fef
msgid "On this page"
msgstr ""

#: ../source/core/geospatial-indexes.txt:13
# ff7ea888cce041919a9d1bd02dd14a0c
msgid "This document provides a more in-depth explanation of the internals of MongoDB's ``2d`` geospatial indexes. This material is not necessary for normal operations or application development but may be useful for troubleshooting and for further understanding."
msgstr ""

#: ../source/core/geospatial-indexes.txt:21
# 7635e47be26443e9899241e1351a8d4f
msgid "Calculation of Geohash Values for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:23
# e523777ea9ab4072ad6799f513fd380b
msgid "When you create a geospatial index on :term:`legacy coordinate pairs <legacy coordinate pairs>`, MongoDB computes :term:`geohash` values for the coordinate pairs within the specified :ref:`location range <geospatial-indexes-range>` and then indexes the geohash values."
msgstr ""

#: ../source/core/geospatial-indexes.txt:28
# 3c21a2e7e8a945a587b993b55230dcf8
msgid "To calculate a geohash value, recursively divide a two-dimensional map into quadrants. Then assign each quadrant a two-bit value. For example, a two-bit representation of four quadrants would be:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:38
# fa365e462aa74c1989ab22b2d622e743
msgid "These two-bit values (``00``, ``01``, ``10``, and ``11``) represent each of the quadrants and all points within each quadrant. For a geohash with two bits of resolution, all points in the bottom left quadrant would have a geohash of ``00``. The top left quadrant would have the geohash of ``01``. The bottom right and top right would have a geohash of ``10`` and ``11``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:45
# 93162ba2a08d4de4bf8ae5b76f39248e
msgid "To provide additional precision, continue dividing each quadrant into sub-quadrants. Each sub-quadrant would have the geohash value of the containing quadrant concatenated with the value of the sub-quadrant. The geohash for the upper-right quadrant is ``11``, and the geohash for the sub-quadrants would be (clockwise from the top left): ``1101``, ``1111``, ``1110``, and ``1100``, respectively."
msgstr ""

#: ../source/core/geospatial-indexes.txt:62
# e48f3452067d4d8a96a03967182c3602
msgid "Multi-location Documents for ``2d`` Indexes"
msgstr ""

#: ../source/core/geospatial-indexes.txt:65
# b0ffb4e263af4e40ae1e5a7321956eca
msgid ":doc:`2dsphere </core/2dsphere>` indexes can cover multiple geospatial fields in a document, and can express lists of points using :ref:`geojson-multipoint` embedded documents."
msgstr ""

#: ../source/core/geospatial-indexes.txt:69
# 0eb2a3c794894c72b78a3de9c0463c11
msgid "While ``2d`` geospatial indexes do not support more than one geospatial field in a document, you can use a :ref:`multi-key index <index-type-multi-key>` to index multiple coordinate pairs in a single document. In the simplest example you may have a field (e.g. ``locs``) that holds an array of coordinates, as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:84
# 9442b0374f704a6382e1b0a1ce120b3f
msgid "The values of the array may be either arrays, as in ``[ 55.5, 42.3 ]``, or embedded documents, as in ``{ lng : 55.5 , lat : 42.3 }``."
msgstr ""

#: ../source/core/geospatial-indexes.txt:87
# 3223a61556694262960c8c950204075d
msgid "You could then create a geospatial index on the ``locs`` field, as in the following:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:94
# 4035025bed654535b7b2fcdf84a53696
msgid "You may also model the location data as a field inside of an embedded document. In this case, the document would contain a field (e.g. ``addresses``) that holds an array of documents where each document has a field (e.g. ``loc:``) that holds location coordinates. For example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:115
# a6c15dbb656b452e89bca34b9d772611
msgid "You could then create the geospatial index on the ``addresses.loc`` field as in the following example:"
msgstr ""

#: ../source/core/geospatial-indexes.txt:122
# cdcfd5efbd3943b4bdeb15d65aee93e6
msgid "To include the location field with the distance field in multi-location document queries, specify ``includeLocs: true`` in the :dbcommand:`geoNear` command."
msgstr ""


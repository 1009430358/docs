# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/mmapv1.txt:5
# cef70502a90e41ff8e16979b24170f4f
msgid "MMAPv1 Storage Engine"
msgstr ""

#: ../source/core/mmapv1.txt:0
# 4be9574875d8425f80db136d92b62583
msgid "On this page"
msgstr ""

#: ../source/core/mmapv1.txt:15
# bf5251cf26bb49fd8547d857217040a0
msgid "MMAPv1 is MongoDB's original storage engine based on memory mapped files. It excels at workloads with high volume inserts, reads, and in-place updates."
msgstr ""

#: ../source/core/mmapv1.txt:21
# 248ed636079d42ee8d91717e71b1007f
msgid "Starting in MongoDB 3.2, the MMAPv1 is no longer the default storage engine; instead, the :doc:`WiredTiger </core/wiredtiger>` storage engine is the default storage engine . See :ref:`3.2-storage-engine-compatibility`."
msgstr ""

#: ../source/core/mmapv1.txt:27
# 8f0dec836dc243418b6bbb3fa2123abe
msgid "Journal"
msgstr ""

#: ../source/core/mmapv1.txt:29
# a0e09fbc1885427b95e686dc548ddb43
msgid "In order to ensure that all modifications to a MongoDB data set are durably written to disk, MongoDB, by default, records all modifications to an on-disk journal. MongoDB writes more frequently to the journal than it writes the data files."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:1
# 005171cce7804ee98e643a14cbeacd4d
msgid "In the default configuration for the :doc:`MMAPv1 storage engine </core/mmapv1>`, MongoDB writes to the data files on disk every 60 seconds and writes to the :term:`journal` files roughly every 100 milliseconds."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:6
# a7f55621f71c4d139314c7aa26813321
msgid "To change the interval for writing to the data files, use the :setting:`storage.syncPeriodSecs` setting. For the journal files, see :setting:`storage.journal.commitIntervalMs` setting."
msgstr ""

#: ../source/includes/fact-mmapv1-write-to-disk.rst:10
# 46349e2b769744ca99521f8de80ed578
msgid "These values represent the *maximum* amount of time between the completion of a write operation and when MongoDB writes to the data files or to the journal files. In many cases MongoDB and the operating system flush data to disk more frequently, so that the above values represents a theoretical maximum."
msgstr ""

#: ../source/core/mmapv1.txt:36
# 78da6a2d575d4c45b7b3f25a9c7c9a6c
msgid "The journal allows MongoDB to successfully recover data from data files after a :program:`mongod` instance exits without flushing all changes. See :doc:`/core/journaling` for more information about the journal in MongoDB."
msgstr ""

#: ../source/core/mmapv1.txt:42
# 6f1a322ee6fc45e29cad3bd8c8d133d1
msgid "Record Storage Characteristics"
msgstr ""

#: ../source/core/mmapv1.txt:44
# 0fc73a778eb844a78e4e180294a3dde1
msgid "All records are contiguously located on disk, and when a document becomes larger than the allocated record, MongoDB must allocate a new record. New allocations require MongoDB to move a document and update all indexes that refer to the document, which takes more time than in-place updates and leads to storage fragmentation."
msgstr ""

#: ../source/core/mmapv1.txt:53
# b53de660927941a3b5d51f912bbdb7f3
msgid "By default, MongoDB uses :ref:`power-of-2-allocation` so that every document in MongoDB is stored in a *record* which contains the document itself and extra space, or :term:`padding`. Padding allows the document to grow as the result of updates while minimizing the likelihood of reallocations."
msgstr ""

#: ../source/core/mmapv1.txt:62
# cf05e0e7335f4aab8ac8b581c0e69823
msgid "Record Allocation Strategies"
msgstr ""

#: ../source/core/mmapv1.txt:64
# 9f8a8c3448694ced95e5c27af106ffd0
msgid "MongoDB supports multiple record allocation strategies that determine how :program:`mongod` adds padding to a document when creating a record. Because documents in MongoDB may grow after insertion and all records are contiguous on disk, the padding can reduce the need to relocate documents on disk following updates. Relocations are less efficient than in-place updates and can lead to storage fragmentation. As a result, all padding strategies trade additional space for increased efficiency and decreased fragmentation."
msgstr ""

#: ../source/core/mmapv1.txt:73
# eaf6937169674f46b189154529e50ee2
msgid "Different allocation strategies support different kinds of workloads: the :ref:`power of 2 allocations <power-of-2-allocation>` are more efficient for insert/update/delete workloads; while :ref:`exact fit allocations <exact-fit-allocation>` is ideal for collections *without* update and delete workloads."
msgstr ""

#: ../source/core/mmapv1.txt:82
# 45a827292538414e8ea0d0acc247a486
msgid "Power of 2 Sized Allocations"
msgstr ""

#: ../source/core/mmapv1.txt:86
# 94b99bea8ed7462a9b34c2a7964636b8
msgid "MongoDB 3.0 uses the power of 2 sizes allocation as the default record allocation strategy for MMAPv1. With the power of 2 sizes allocation strategy, each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, 256, 512 ... 2 MB). For documents larger than 2 MB, the allocation is rounded up to the nearest multiple of 2 MB."
msgstr ""

#: ../source/core/mmapv1.txt:92
# 125f05973183440e9293d00ea588daa5
msgid "The power of 2 sizes allocation strategy has the following key properties:"
msgstr ""

#: ../source/core/mmapv1.txt:95
# fe59ece9fe024d4d9521224bb375c916
msgid "Can efficiently reuse freed records to reduce fragmentation. Quantizing record allocation sizes into a fixed set of sizes increases the probability that an insert will fit into the free space created by an earlier document deletion or relocation."
msgstr ""

#: ../source/core/mmapv1.txt:100
# 41258c727a2b480382c49f73787a7c8e
msgid "Can reduce moves. The added padding space gives a document room to grow without requiring a move. In addition to saving the cost of moving, this results in less updates to indexes. Although the power of 2 sizes strategy can minimize moves, it does not eliminate them entirely."
msgstr ""

#: ../source/core/mmapv1.txt:109
# b5651c991106427fba39bc5d4fe9d8e9
msgid "No Padding Allocation Strategy"
msgstr ""

#: ../source/core/mmapv1.txt:113
# 13d02e67c66543558e27f99ba79ef7c0
msgid "For collections whose workloads do not change the document sizes, such as workloads that consist of insert-only operations or update operations that do not increase document size (such as incrementing a counter), you can disable the :ref:`power of 2 allocation <power-of-2-allocation>` using the :dbcommand:`collMod` command with the :collflag:`noPadding` flag or the :method:`db.createCollection()` method with the ``noPadding`` option."
msgstr ""

#: ../source/core/mmapv1.txt:121
# 7ab27453354a4f4fa6c1b03a7c49b340
msgid "Prior to version 3.0.0, MongoDB used an allocation strategy that included a dynamically calculated :data:`padding <collStats.paddingFactor>` as a factor of the document size."
msgstr ""

#: ../source/core/mmapv1.txt:128
# 5951bf773c36487cb5fec9cf6386e9d9
msgid "Memory Use"
msgstr ""

#: ../source/core/mmapv1.txt:130
# 475b196f0f004261b6c596fec330e840
msgid "With MMAPv1, MongoDB automatically uses all free memory on the machine as its cache. System resource monitors show that MongoDB uses a lot of memory, but its usage is dynamic. If another process suddenly needs half the server's RAM, MongoDB will yield cached memory to the other process."
msgstr ""

#: ../source/core/mmapv1.txt:136
# 7663e392cd3f40baa051df2d55ca53ed
msgid "Technically, the operating system's virtual memory subsystem manages MongoDB's memory. This means that MongoDB will use as much free memory as it can, swapping to disk as needed. Deployments with enough memory to fit the application's working data set in RAM will achieve the best performance."
msgstr ""


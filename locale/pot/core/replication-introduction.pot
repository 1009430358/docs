# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replication-introduction.txt:5
# 6d3388767d3e4230a7132c1b445d720c
msgid "Replication Introduction"
msgstr ""

#: ../source/core/replication-introduction.txt:11
# 0c343c98456145e09a02f6b1c70b4033
msgid "Replication is the process of synchronizing data across multiple servers."
msgstr ""

#: ../source/core/replication-introduction.txt:15
# ca89de4629774f44aea661dacdfec2bd
msgid "Purpose of Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:17
# d3d4cf945eb04c1f85376e96faa0c5a9
msgid "Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication protects a database from the loss of a single server. Replication also allows you to recover from hardware failure and service interruptions. With additional copies of the data, you can dedicate one to disaster recovery, reporting, or backup."
msgstr ""

#: ../source/core/replication-introduction.txt:24
# 2a3318b742eb4e09af9e765404a368af
msgid "In some cases, you can use replication to increase read capacity. Clients have the ability to send read and write operations to different servers. You can also maintain copies in different data centers to increase the locality and availability of data for distributed applications."
msgstr ""

#: ../source/core/replication-introduction.txt:31
# f0deb957874547ee83f88525e64950e3
msgid "Replication in MongoDB"
msgstr ""

#: ../source/core/replication-introduction.txt:33
# 0a57e389b721493b9c004da99009ded3
msgid "A replica set is a group of :program:`mongod` instances that host the same data set. One :program:`mongod`, the primary, receives all write operations. All other instances, secondaries, apply operations from the primary so that they have the same data set."
msgstr ""

#: ../source/core/replication-introduction.txt:38
# c3aa85602fc1413aa081b841dfb30a97
msgid "The :doc:`primary </core/replica-set-primary>` accepts all write operations from clients. A replica set can have only one primary. [#edge-cases-2-primaries]_ To support replication, the primary records all changes to its data sets in its :doc:`oplog </core/replica-set-oplog>`. For more information on primary node operation, see :doc:`/core/replica-set-primary`."
msgstr ""

#: ../source/core/replication-introduction.txt:47
# a03cd9917aab4415b339381db5a484f1
msgid "The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's oplog and apply the operations to their data sets such that the secondaries' data sets reflect the primary's data set. If the primary is unavailable, the replica set will elect a secondary to be primary. For more information on secondary members, see :doc:`/core/replica-set-secondary`."
msgstr ""

#: ../source/core/replication-introduction.txt:56
# 96ea3a90efab477b8a1d847bb5aa0378
msgid "You may add an extra :program:`mongod` instance to a replica set as an :doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a data set. The purpose of an arbiter is to maintain a quorum in a replica set by responding to heartbeat and election requests by other replica set members. Because they do not store a data set, arbiters can be a good way to provide replica set quorum functionality with a cheaper resource cost than a fully functional replica set member with a data set. If your replica set has an even number of members, add an arbiter to obtain a majority of votes in an election for primary. Arbiters do not require dedicated hardware. For more information on arbiters, see :doc:`/core/replica-set-arbiter`."
msgstr ""

#: ../source/core/replication-introduction.txt:70
# 8a57a781319e4160a262a01a212ac6d8
msgid "An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter whereas a :doc:`primary </core/replica-set-primary>` may step down and become a :doc:`secondary </core/replica-set-secondary>` and a :doc:`secondary </core/replica-set-secondary>` may become the primary during an election."
msgstr ""

#: ../source/core/replication-introduction.txt:79
# 2e1f34b9d7a644d0b5ac3fcf126f870b
msgid "Asynchronous Replication"
msgstr ""

#: ../source/core/replication-introduction.txt:81
# 1b39a8e862d24ff98354fd6ed79d2479
msgid "Secondaries apply operations from the primary asynchronously. By applying operations after the primary, sets can continue to function despite the failure of one or more members. For more information on replication mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""

#: ../source/core/replication-introduction.txt:88
# 6e617b1239f640a1943d370c7c25a2d1
msgid "Automatic Failover"
msgstr ""

#: ../source/core/replication-introduction.txt:90
# e7b32d98887149048fc26f4e97bbb5e2
msgid "When a primary does not communicate with the other members of the set for more than 10 seconds, the replica set will attempt to select another member to become the new primary. The first secondary that receives a majority of the votes becomes primary."
msgstr ""

#: ../source/core/replication-introduction.txt:97
# 0f8de51cb7a0464bb5341c0d5e399ac1
msgid "See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more information."
msgstr ""

#: ../source/core/replication-introduction.txt:101
# e3dcd5c12c9d4d0398b55d4ac28ffe1e
msgid "Read Operations"
msgstr ""

#: ../source/core/replication-introduction.txt:103
# d7534fbae0c643a399212fd358c7efda
msgid "When a replica set has one and only one primary, reads from that primary provide :term:`strict consistency`. [#edge-cases-2-primaries]_"
msgstr ""

#: ../source/core/replication-introduction.txt:106
# f30335267ec1411aa177b6104064bc41
msgid "By default, clients read from the primary; however, clients can specify a :doc:`read preference </core/read-preference>` to send read operations to secondaries. :ref:`Asynchronous replication <asynchronous-replication>` to secondaries means that reads from secondaries may return data that does not reflect the state of the data on the primary. For information on reading from replica sets, see :doc:`/core/read-preference`."
msgstr ""

#: ../source/core/replication-introduction.txt:114
# f96bf06441454574bf4141280fee7597
msgid "In MongoDB, clients can see the results of writes before they are made durable:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# 7cea4094fcc648d8961754e9f72816f4
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients can see the result of the write operations before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:5
# e392d3f5f90b4b5392445d404bcf6b92
msgid "Clients can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/core/replication-introduction.txt:122
# b37a315bb2944f52bb24662664d258c7
msgid "Additional Features"
msgstr ""

#: ../source/core/replication-introduction.txt:124
# ba2dca451c284cd89b3f624e5974d6bd
msgid "Replica sets provide a number of options to support application needs. For example, you may deploy a replica set with :doc:`members in multiple data centers </core/replica-set-architecture-geographically-distributed>`, or control the outcome of elections by adjusting the :data:`~replSetGetConfig.members[n].priority` of some members. Replica sets also support dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/core/replication-introduction.txt:133
# c2b0d4497f354ce1a9b205e0c22ef9cc
msgid "See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 73d0745e278b4cc7ac1af363f7e09ba7
msgid "In some circumstances, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :ref:`{w: majority} write concern <wc-w>`. The node that can complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`."
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:4
# 2e40c4730e4c4cb48d40635ea7ed340e
msgid "Additional Resources"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:6
# 8ef48367dab1481da41f3cc0266ff121
msgid "`Quick Reference Cards <https://www.mongodb.com/lp/misc/quick-reference-cards?jmp=docs>`_"
msgstr ""

#: ../source/includes/extracts/additional-resources-replication-introduction.rst:7
# 93709ae867d645738331b79b08e68602
msgid "`Webinar: Managing Your Mission Critical App - Ensuring Zero Downtime <http://www.mongodb.com/webinar/managing-mission-critical-app-downtime?jmp=docs>`_"
msgstr ""


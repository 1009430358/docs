# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/data-model-operations.txt:3
# d754b9704c774df0a1c2fb7c89e76b31
msgid "Operational Factors and Data Models"
msgstr ""

#: ../source/core/data-model-operations.txt:0
# bc10a5903d234e85bc4b41f78a39cf3e
msgid "On this page"
msgstr ""

#: ../source/core/data-model-operations.txt:13
# 83840068f90846fa91df97ce5bcd5750
msgid "Modeling application data for MongoDB depends on both the data itself, as well as the characteristics of MongoDB itself. For example, different data models may allow applications to use more efficient queries, increase the throughput of insert and update operations, or distribute activity to a sharded cluster more effectively."
msgstr ""

#: ../source/core/data-model-operations.txt:19
# 1c5a11acd87f48e4af593e7ce754feb4
msgid "These factors are *operational* or address requirements that arise outside of the application but impact the performance of MongoDB based applications. When developing a data model, analyze all of your application's :doc:`read and write operations </crud>` in conjunction with the following considerations."
msgstr ""

#: ../source/core/data-model-operations.txt:28
# 5774cb119ca4429e98a4b6b50c65885f
msgid "Document Growth"
msgstr ""

#: ../source/core/data-model-operations.txt:32
# 22fd1e0a8f324d10897494453edac453
msgid "Some updates to documents can increase the size of documents. These updates include pushing elements to an array (i.e. :update:`$push`) and adding new fields to a document."
msgstr ""

#: ../source/core/data-model-operations.txt:36
# c6b96e988af240879828fa26c5cd1bc3
msgid "When using the MMAPv1 storage engine, document growth can be a consideration for your data model. For MMAPv1, if the document size exceeds the allocated space for that document, MongoDB will relocate the document on disk. With MongoDB 3.0.0, however, the default use of the :ref:`power-of-2-allocation` minimizes the occurrences of such re-allocations as well as allows for the effective reuse of the freed record space."
msgstr ""

#: ../source/core/data-model-operations.txt:44
# 1141baaf143a44c3a2d99b31fbf54d5f
msgid "When using MMAPv1, if your applications require updates that will frequently cause document growth to exceeds the current power of 2 allocation, you may want to refactor your data model to use references between data in distinct documents rather than a denormalized data model."
msgstr ""

#: ../source/core/data-model-operations.txt:50
# 11fbf732febb41d795769e0561640c2a
msgid "You may also use a *pre-allocation* strategy to explicitly avoid document growth. Refer to the :ecosystem:`Pre-Aggregated Reports Use Case </use-cases/pre-aggregated-reports>` for an example of the *pre-allocation* approach to handling document growth."
msgstr ""

#: ../source/core/data-model-operations.txt:55
# 5cbba19f734b4fc5b7f0bc1902973de5
msgid "See :doc:`/core/mmapv1` for more information on MMAPv1."
msgstr ""

#: ../source/core/data-model-operations.txt:61
# 1903e654523348fdbe55998839487cb0
msgid "Atomicity"
msgstr ""

#: ../source/core/data-model-operations.txt:63
# f09768822e6d4b9ead2977988a9d611f
msgid "In MongoDB, operations are atomic at the :term:`document` level. No **single** write operation can change more than one document. Operations that modify more than a single document in a collection still operate on one document at a time. [#record-atomicity]_ Ensure that your application stores all fields with atomic dependency requirements in the same document. If the application can tolerate non-atomic updates for two pieces of data, you can store these data in separate documents."
msgstr ""

#: ../source/core/data-model-operations.txt:72
# 76138c67482c4610a46c45b43119771f
msgid "A data model that embeds related data in a single document facilitates these kinds of atomic operations. For data models that store references between related pieces of data, the application must issue separate read and write operations to retrieve and modify these related pieces of data."
msgstr ""

#: ../source/core/data-model-operations.txt:78
# 33e70878c6fe4116bc01194140b7f263
msgid "See :ref:`data-modeling-atomic-operation` for an example data model that provides atomic updates for a single document."
msgstr ""

#: ../source/core/data-model-operations.txt:81
# 848c9e5d3cf44766a31ac0e8ff66be8d
msgid "Document-level atomic operations include all operations within a single MongoDB document record: operations that affect multiple embedded documents within that single record are still atomic."
msgstr ""

#: ../source/core/data-model-operations.txt:87
# 6fa76a0c9e664bdda9554a59a2dc1f36
msgid "Sharding"
msgstr ""

#: ../source/core/data-model-operations.txt:89
# 0b6a5153ca8f44ab8dcb4fa46beea8f9
msgid "MongoDB uses :term:`sharding` to provide horizontal scaling. These clusters support deployments with large data sets and high-throughput operations. Sharding allows users to :term:`partition` a :term:`collection` within a database to distribute the collection's documents across a number of :program:`mongod` instances or :term:`shards <shard>`."
msgstr ""

#: ../source/core/data-model-operations.txt:96
# fa79819113414a629de69822368ab044
msgid "To distribute data and application traffic in a sharded collection, MongoDB uses the :ref:`shard key <shard-key>`. Selecting the proper :ref:`shard key <shard-key>` has significant implications for performance, and can enable or prevent query isolation and increased write capacity. It is important to consider carefully the field or fields to use as the shard key."
msgstr ""

#: ../source/core/data-model-operations.txt:103
# 7ce96ec0b4dd4704b218f586e0a77f13
msgid "See :doc:`/core/sharding-introduction` and :doc:`/core/sharding-shard-key` for more information."
msgstr ""

#: ../source/core/data-model-operations.txt:109
# 22723756fcd043ebb1861ba549663365
msgid "Indexes"
msgstr ""

#: ../source/core/data-model-operations.txt:111
# 4289cf39f352479abea067ea7c574ef0
msgid "Use indexes to improve performance for common queries. Build indexes on fields that appear often in queries and for all operations that return sorted results. MongoDB automatically creates a unique index on the ``_id`` field."
msgstr ""

#: ../source/core/data-model-operations.txt:116
# 47d470122dac49ff80424da28a567133
msgid "As you create indexes, consider the following behaviors of indexes:"
msgstr ""

#: ../source/core/data-model-operations.txt:118
# 59bb696fdfe84607b1c7b4c1e525a92f
msgid "Each index requires at least 8 kB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:120
# 8995e86bb367491b97abde4f6368f440
msgid "Adding an index has some negative performance impact for write operations. For collections with high write-to-read ratio, indexes are expensive since each insert must also update any indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:124
# eafef05e8ec2421c836c4f4d9154272e
msgid "Collections with high read-to-write ratio often benefit from additional indexes. Indexes do not affect un-indexed read operations."
msgstr ""

#: ../source/core/data-model-operations.txt:127
# 4304ec89db6e4765aabc5a12b349a3cb
msgid "When active, each index consumes disk space and memory. This usage can be significant and should be tracked for capacity planning, especially for concerns over working set size."
msgstr ""

#: ../source/core/data-model-operations.txt:131
# e7b29bdde1c44f63aa7261a7e61babe2
msgid "See :doc:`/applications/indexes` for more information on indexes as well as :doc:`/tutorial/analyze-query-plan/`. Additionally, the MongoDB :doc:`database profiler </tutorial/manage-the-database-profiler>` may help identify inefficient queries."
msgstr ""

#: ../source/core/data-model-operations.txt:139
# a44aa5c2c69f4e20aedcc7742e4a106d
msgid "Large Number of Collections"
msgstr ""

#: ../source/core/data-model-operations.txt:141
# 41e9ab29717c43fca0ac21807a531693
msgid "In certain situations, you might choose to store related information in several collections rather than in a single collection."
msgstr ""

#: ../source/core/data-model-operations.txt:144
# ea1ae54114404be9b4fc2623be62eb25
msgid "Consider a sample collection ``logs`` that stores log documents for various environment and applications. The ``logs`` collection contains documents of the following form:"
msgstr ""

#: ../source/core/data-model-operations.txt:153
# 9546e2ae2ccb49a7bf0141cb8aba3135
msgid "If the total number of documents is low, you may group documents into collection by type. For logs, consider maintaining distinct log collections, such as ``logs_dev`` and ``logs_debug``. The ``logs_dev`` collection would contain only the documents related to the dev environment."
msgstr ""

#: ../source/core/data-model-operations.txt:159
# fdfc7ea2271241e585ba102e3659dbd5
msgid "Generally, having a large number of collections has no significant performance penalty and results in very good performance. Distinct collections are very important for high-throughput batch processing."
msgstr ""

#: ../source/core/data-model-operations.txt:163
# 00c4c0e81cd041e090482a3aba7d6b52
msgid "When using models that have a large number of collections, consider the following behaviors:"
msgstr ""

#: ../source/core/data-model-operations.txt:166
# 4d6db445d9c44874a077b22655d6fe48
msgid "Each collection has a certain minimum overhead of a few kilobytes."
msgstr ""

#: ../source/core/data-model-operations.txt:168
# 7b93a5ed121c4f69b7dfba1621fc6c30
msgid "Each index, including the index on ``_id``, requires at least 8 kB of data space."
msgstr ""

#: ../source/core/data-model-operations.txt:171
# 15feb5957b9b4c27a1f2dfbd3a180849
msgid "For each :term:`database`, a single namespace file (i.e. ``<database>.ns``) stores all meta-data for that database, and each index and collection has its own entry in the namespace file. MongoDB places :limit:`limits on the size of namespace files <Size of Namespace File>`."
msgstr ""

#: ../source/core/data-model-operations.txt:177
# 5afcf72ab9be4d749ec8885f85a18744
msgid "MongoDB using the ``mmapv1`` storage engine has :limit:`limits on the number of namespaces <Number of Namespaces>`. You may wish to know the current number of namespaces in order to determine how many additional namespaces the database can support. To get the current number of namespaces, run the following in the :program:`mongo` shell:"
msgstr ""

#: ../source/core/data-model-operations.txt:188
# d45eda8675324367a91bd135825cd2ac
msgid "The limit on the number of namespaces depend on the ``<database>.ns`` size. The namespace file defaults to 16 MB."
msgstr ""

#: ../source/core/data-model-operations.txt:191
# b11eccc66cb1415fb106d0494bd5e969
msgid "To change the size of the *new* namespace file, start the server with the option :option:`--nssize \\<new size MB\\> <--nssize>`. For existing databases, after starting up the server with :option:`--nssize`, run the :method:`db.repairDatabase()` command from the :program:`mongo` shell. For impacts and considerations on running :method:`db.repairDatabase()`, see :dbcommand:`repairDatabase`."
msgstr ""

#: ../source/core/data-model-operations.txt:202
# dbaeb209a52247458633c31255f0766c
msgid "Collection Contains Large Number of Small Documents"
msgstr ""

#: ../source/core/data-model-operations.txt:204
# 26376f30646845b1956f5978a66b1f76
msgid "You should consider embedding for performance reasons if you have a collection with a large number of small documents. If you can group these small documents by some logical relationship *and* you frequently retrieve the documents by this grouping, you might consider \"rolling-up\" the small documents into larger documents that contain an array of embedded documents."
msgstr ""

#: ../source/core/data-model-operations.txt:211
# a82df0c2f18b4508a066dbc66907cbfa
msgid "\"Rolling up\" these small documents into logical groupings means that queries to retrieve a group of documents involve sequential reads and fewer random disk accesses. Additionally, \"rolling up\" documents and moving common fields to the larger document benefit the index on these fields. There would be fewer copies of the common fields *and* there would be fewer associated key entries in the corresponding index. See :doc:`/indexes` for more information on indexes."
msgstr ""

#: ../source/core/data-model-operations.txt:219
# df1a7855d98149d383f75ff526b19719
msgid "However, if you often only need to retrieve a subset of the documents within the group, then \"rolling-up\" the documents may not provide better performance. Furthermore, if small, separate documents represent the natural model for the data, you should maintain that model."
msgstr ""

#: ../source/core/data-model-operations.txt:227
# df23dc83032f4dd884d422c63ae59a8b
msgid "Storage Optimization for Small Documents"
msgstr ""

#: ../source/core/data-model-operations.txt:229
# 6d9a3086a8784b4e87a03715900e69cd
msgid "Each MongoDB document contains a certain amount of overhead. This overhead is normally insignificant but becomes significant if all documents are just a few bytes, as might be the case if the documents in your collection only have one or two fields."
msgstr ""

#: ../source/core/data-model-operations.txt:234
# 8eedee7bd7fe4a2a82c7ab3ad82bf778
msgid "Consider the following suggestions and strategies for optimizing storage utilization for these collections:"
msgstr ""

#: ../source/core/data-model-operations.txt:237
# 8ec67dce23e64fbf970a7af2b1660f1f
msgid "Use the ``_id`` field explicitly."
msgstr ""

#: ../source/core/data-model-operations.txt:239
# 642df1cb3279485987211b786bec9ffe
msgid "MongoDB clients automatically add an ``_id`` field to each document and generate a unique 12-byte :term:`ObjectId` for the ``_id`` field. Furthermore, MongoDB always indexes the ``_id`` field. For smaller documents this may account for a significant amount of space."
msgstr ""

#: ../source/core/data-model-operations.txt:245
# d0965b9142d84515b8aea93016531fb3
msgid "To optimize storage use, users can specify a value for the ``_id`` field explicitly when inserting documents into the collection. This strategy allows applications to store a value in the ``_id`` field that would have occupied space in another portion of the document."
msgstr ""

#: ../source/core/data-model-operations.txt:250
# 4c94251242d54b2db7b7dc14180721f7
msgid "You can store any value in the ``_id`` field, but because this value serves as a primary key for documents in the collection, it must uniquely identify them. If the field's value is not unique, then it cannot serve as a primary key as there would be collisions in the collection."
msgstr ""

#: ../source/core/data-model-operations.txt:256
# 426ee7371b76453fae46cf8a5e68964c
msgid "Use shorter field names."
msgstr ""

#: ../source/core/data-model-operations.txt:260
# bc44fc2ab9f44064848bf9cf14a424b0
msgid "Shortening field names reduces expressiveness and does not provide considerable benefit for larger documents and where document overhead is not of significant concern. Shorter field names do not reduce the size of indexes, because indexes have a predefined structure."
msgstr ""

#: ../source/core/data-model-operations.txt:266
# 50f85306c4384ef9897b7a2537c901c9
msgid "In general, it is not necessary to use short field names."
msgstr ""

#: ../source/core/data-model-operations.txt:268
# a39482b4ff2642b29b21a2d660cc4b4f
msgid "MongoDB stores all field names in every document. For most documents, this represents a small fraction of the space used by a document; however, for small documents the field names may represent a proportionally large amount of space. Consider a collection of small documents that resemble the following:"
msgstr ""

#: ../source/core/data-model-operations.txt:278
# 79c9c5860d2c42ca877175a5d64f2835
msgid "If you shorten the field named ``last_name`` to ``lname`` and the field named ``best_score`` to ``score``, as follows, you could save 9 bytes per document."
msgstr ""

#: ../source/core/data-model-operations.txt:286
# 130432e801b24e0e84e19acb8cf74a31
msgid "Embed documents."
msgstr ""

#: ../source/core/data-model-operations.txt:288
# 554f30e8bcee46808bee881becd79ca2
msgid "In some cases you may want to embed documents in other documents and save on the per-document overhead. See :ref:`faq-developers-embed-documents`."
msgstr ""

#: ../source/core/data-model-operations.txt:293
# 464ac6947bee435c9a58ff0673b92515
msgid "Data Lifecycle Management"
msgstr ""

#: ../source/core/data-model-operations.txt:295
# 6908be37004a44dcb4bc39329d2bba5b
msgid "Data modeling decisions should take data lifecycle management into consideration."
msgstr ""

#: ../source/core/data-model-operations.txt:298
# c1833b37c853445eb636f6cec2d50169
msgid "The :doc:`Time to Live or TTL feature </tutorial/expire-data>` of collections expires documents after a period of time. Consider using the TTL feature if your application requires some data to persist in the database for a limited period of time."
msgstr ""

#: ../source/core/data-model-operations.txt:303
# f08c2a0c29a246aa925a9c63256da588
msgid "Additionally, if your application only uses recently inserted documents, consider :doc:`/core/capped-collections`. Capped collections provide *first-in-first-out* (FIFO) management of inserted documents and efficiently support operations that insert and read documents based on insertion order."
msgstr ""


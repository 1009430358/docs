# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-05-31 19:15-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/index-text.txt:5
# 48854d5b867d43129d1d057aefd7dce5
msgid "Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:0
# 80382d4922d744d1be60d3e19225c0c0
msgid "On this page"
msgstr ""

#: ../source/core/index-text.txt:17
# 3bd891754fc24bf7b21f2e8f3280d1d6
msgid "Starting in MongoDB 3.2, MongoDB introduces a version 3 of the ``text`` index. Key features of the new version of the index are:"
msgstr ""

#: ../source/core/index-text.txt:20
# 37bd2176463947d3941012bc5b5d64a1
msgid "Improved :ref:`case insensitivity <text-index-case-insensitivity>`"
msgstr ""

#: ../source/core/index-text.txt:22
# 16532d0a9c734171a83ff6612ef2e13f
msgid ":ref:`Diacritic insensitivity <text-index-diacritic-insensitivity>`"
msgstr ""

#: ../source/core/index-text.txt:24
# fddc88660718497fb1e624fc59d3b00f
msgid "Additional :ref:`delimiters for tokenization <text-index-tokenization-delimiters>`"
msgstr ""

#: ../source/core/index-text.txt:27
# 807195750b784e7e8a9e0b2b807da2de
msgid "Starting in MongoDB 3.2, version 3 is the default version for new ``text`` indexes."
msgstr ""

#: ../source/core/index-text.txt:31
# e96d73867bd94a47be79b8316fc08d11
msgid "Overview"
msgstr ""

#: ../source/includes/fact-text-index.rst:1
# c662d4147dcc42cba8aaaf1ac1b741b2
msgid "MongoDB provides :ref:`text indexes <index-feature-text>` to support text search queries on string content. ``text`` indexes can include any field whose value is a string or an array of string elements."
msgstr ""

#: ../source/core/index-text.txt:38
# bcefea9fe4c94e0999aad178747d06d1
msgid "Create Text Index"
msgstr ""

#: ../source/includes/fact-text-index-limit-one.rst:1
#: ../source/includes/fact-text-index-limit-one.rst:1
# 0ca85a285b7f407f9e4123805bd4f32e
# ba03fa44d0324ba2887f9ed90af44266
msgid "A collection can have at most **one** ``text`` index."
msgstr ""

#: ../source/core/index-text.txt:44
# 54743ea9dcdf4c0b8fb19d27e893fae5
msgid "To create a ``text`` index, use the :method:`db.collection.createIndex()` method. To index a field that contains a string or an array of string elements, include the field and specify the string literal ``\"text\"`` in the index document, as in the following example:"
msgstr ""

#: ../source/core/index-text.txt:54
# 29421e4ccf69431fa4c961e8fcec4572
msgid "You can index multiple fields for the ``text`` index. The following example creates a ``text`` index on the fields ``subject`` and ``comments``:"
msgstr ""

#: ../source/core/index-text.txt:67
# c370002b4dbd42a1bb07df1f2f359d4a
msgid "A :doc:`compound index </core/index-compound>` can include ``text`` index keys in combination with ascending/descending index keys. For more information, see :ref:`text-index-compound`."
msgstr ""

#: ../source/core/index-text.txt:71
# 01c822cd5bd44353a5429fd4611c637d
msgid "In order to drop a ``text`` index, use the index name. See :ref:`drop-text-index` for more information."
msgstr ""

#: ../source/core/index-text.txt:75
# 0874a840c74241dea64e80cdf32f1130
msgid "Specify Weights"
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:1
# b76dae78a4b747099afad0c5d2ac7067
msgid "For a ``text`` index, the *weight* of an indexed field denotes the significance of the field relative to the other indexed fields in terms of the text search score."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:5
# 3a62d7531fee491297bf44ebd4948e12
msgid "For each indexed field in the document, MongoDB multiplies the number of matches by the weight and sums the results. Using this sum, MongoDB then calculates the score for the document. See :projection:`$meta` operator for details on returning and sorting by text scores."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:10
# 82b91e6149fe4be5b3585d6a5129c277
msgid "The default weight is 1 for the indexed fields. To adjust the weights for the indexed fields, include the ``weights`` option in the :method:`db.collection.createIndex()` method."
msgstr ""

#: ../source/core/index-text.txt:79
# e0c75627f0414f25b6462e0f4f002fdd
msgid "For more information using weights to control the results of a text search, see :doc:`/tutorial/control-results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:85
# 926cefd727b544c383125d48abb5000b
msgid "Wildcard Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:87
# 3667a237f4b14308b1bc58e7ad1e2b89
msgid "When creating a ``text`` index on multiple fields, you can also use the wildcard specifier (``$**``). With a wildcard text index, MongoDB indexes every field that contains string data for each document in the collection. The following example creates a text index using the wildcard specifier:"
msgstr ""

#: ../source/core/index-text.txt:97
# 5aa34675204e4d43992dd3cbca07f4d6
msgid "This index allows for text search on all fields with string content. Such an index can be useful with highly unstructured data if it is unclear which fields to include in the text index or for ad-hoc querying."
msgstr ""

#: ../source/core/index-text.txt:102
# 661330ed5c2a4f39b604b7e689031c65
msgid "Wildcard text indexes are ``text`` indexes on multiple fields. As such, you can assign weights to specific fields during index creation to control the ranking of the results. For more information using weights to control the results of a text search, see :doc:`/tutorial/control-results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:108
# a9f91f94d28b4109989110c0a8978eab
msgid "Wildcard text indexes, as with all text indexes, can be part of a compound indexes. For example, the following creates a compound index on the field ``a`` as well as the wildcard specifier:"
msgstr ""

#: ../source/core/index-text.txt:116
# 65add297142d4b2b9517a24f9e1b84a3
msgid "As with all :ref:`compound text indexes <text-index-compound>`, since the ``a`` precedes the text index key, in order to perform a :query:`$text` search with this index, the query predicate must include an equality match conditions ``a``. For information on compound text indexes, see :ref:`Compound Text Indexes <text-index-compound>`."
msgstr ""

#: ../source/core/index-text.txt:125
# 8ea4832206924b02a6fca5393f39446a
msgid "Case Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:129
# f9a1dd0908f44d22b246cef04a061022
msgid "The version 3 ``text`` index supports the common ``C``, simple ``S``, and for Turkish languages, the special ``T`` case foldings as specified in `Unicode 8.0 Character Database Case Folding <http://www.unicode.org/Public/8.0.0/ucd/CaseFolding.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:136
# 6c67a957f71b439db0170fe767031b87
msgid "The case foldings expands the case insensitivity of the ``text`` index to include characters with diacritics, such as ``é`` and ``É``, and characters from non-Latin alphabets, such as \"И\" and \"и\" in the Cyrillic alphabet."
msgstr ""

#: ../source/core/index-text.txt:148
# c5b4269e4dea49a9b0f476ff9458b926
msgid "Version 3 of the ``text`` index is also :ref:`diacritic insensitive <text-index-diacritic-insensitivity>`. As such, the index also does not distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:152
# 7e151292ea0c4c4ca264380dfdd01bf5
msgid "Previous versions of the ``text`` index are case insensitive for ``[A-z]`` only; i.e. case insensitive for non-diacritics Latin characters only . For all other characters, earlier versions of the text index treat them as distinct."
msgstr ""

#: ../source/core/index-text.txt:160
# dfa0b8ee78054f2c91363bbaaac20b81
msgid "Diacritic Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:164
# 1c87649ed9184821be06af2603226855
msgid "With version 3, ``text`` index is diacritic insensitive. That is, the index does not distinguish between characters that contain diacritical marks and their non-marked counterpart, such as ``é``, ``ê``, and ``e``. More specifically, the ``text`` index strips the characters categorized as diacritics in `Unicode 8.0 Character Database Prop List <http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:171
# e2875a79578a4e7da31d89ead86f39b1
msgid "Version 3 of the ``text`` index is also :ref:`case insensitive <text-index-case-insensitivity>` to characters with diacritics. As such, the index also does not distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:176
# b0ccbff96a004213ac273e695f0f1bca
msgid "Previous versions of the ``text`` index treat characters with diacritics as distinct."
msgstr ""

#: ../source/core/index-text.txt:182
# 58315ed9d11b4769824c60fa6c513f2f
msgid "Tokenization Delimiters"
msgstr ""

#: ../source/core/index-text.txt:186
# 4d00f5e258dd4d248d07911c8898733d
msgid "For tokenization, version 3 ``text`` index uses the delimiters categorized under ``Dash``, ``Hyphen``, ``Pattern_Syntax``, ``Quotation_Mark``, ``Terminal_Punctuation``, and ``White_Space`` in `Unicode 8.0 Character Database Prop List <http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:192
# 44bfdd7796c94fa0acd85a7324b9a8e4
msgid "For example, if given a string ``\"Il a dit qu'il «était le meilleur joueur du monde»\"``, the ``text`` index treats ``«``, ``»``, and spaces as delimiters."
msgstr ""

#: ../source/core/index-text.txt:196
# 63bdc524dffb45e4815de93c3483d606
msgid "Previous versions of the index treat ``«`` as part of the term ``\"«était\"`` and ``»`` as part of the term ``\"monde»\"``."
msgstr ""

#: ../source/core/index-text.txt:200
# f8648aefbd3f4fe8920a7fccbe6b4a81
msgid "Index Entries"
msgstr ""

#: ../source/core/index-text.txt:202
# 79305c2a00b4415e8feae3c18373281d
msgid "``text`` index tokenizes and stems the terms in the indexed fields for the index entries. ``text`` index stores one index entry for each unique stemmed term in each indexed field for each document in the collection. The index uses simple :ref:`language-specific <text-index-supported-languages>` suffix stemming."
msgstr ""

#: ../source/core/index-text.txt:211
# 85ef0261a75e47d281b174c2bce61dea
msgid "Supported Languages and Stop Words"
msgstr ""

#: ../source/core/index-text.txt:213
# 923d496f0049497c9d7272e3ef86cd83
msgid "MongoDB supports text search for various languages. ``text`` indexes drop language-specific stop words (e.g. in English, ``the``, ``an``, ``a``, ``and``, etc.) and use simple language-specific suffix stemming. For a list of the supported languages, see :ref:`text-search-languages`."
msgstr ""

#: ../source/includes/fact-text-search-language-none.rst:3
# 7292d80463284de1babc84faf9bd3baa
msgid "If you specify a language value of ``\"none\"``, then the |text-obj| uses simple tokenization with no list of stop words and no stemming."
msgstr ""

#: ../source/core/index-text.txt:222
# 68ca9e52da39412199505b15b44b34a4
msgid "To specify a language for the ``text`` index, see :doc:`/tutorial/specify-language-for-text-index`."
msgstr ""

#: ../source/core/index-text.txt:226
# 6891abffb393493796d1340c698bd8f0
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/index-text.txt:228
# 0c61a56183324e5085af1402012670c8
msgid "``text`` indexes are :doc:`sparse </core/index-sparse>` by default and ignore the :doc:`sparse: true </core/index-sparse>` option. If a document lacks a ``text`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the ``text`` index. For inserts, MongoDB inserts the document but does not add to the ``text`` index."
msgstr ""

#: ../source/core/index-text.txt:235
# a05456a231464335b57626c42e615a56
msgid "For a compound index that includes a ``text`` index key along with keys of other types, only the ``text`` index field determines whether the index references a document. The other keys do not determine whether the index references the documents or not."
msgstr ""

#: ../source/core/index-text.txt:241
# 8b21236d20a24196b3c67d5cb0749b31
msgid "Restrictions"
msgstr ""

#: ../source/core/index-text.txt:244
# 8360e920194a46d98b69672a20c67d3d
msgid "One Text Index Per Collection"
msgstr ""

#: ../source/core/index-text.txt:249
# d1ded32e72b641469c9506be1b18329e
msgid "Text Search and Hints"
msgstr ""

#: ../source/includes/fact-hint-text-query-restriction.rst:3
# df78699d49ef4f639041a3da6f61519c
msgid "You cannot use :method:`~cursor.hint()` if the query includes a :query:`$text` query expression."
msgstr ""

#: ../source/core/index-text.txt:256
# 381a2d2d19d74b5dba75d93c628fdad9
msgid "Text Index and Sort"
msgstr ""

#: ../source/core/index-text.txt:258
# b902a95a9eed4215a8ea93c5ae7acb8b
msgid "Sort operations cannot obtain sort order from a ``text`` index, even from a :ref:`compound text index <text-index-compound>`; i.e. sort operations cannot use the ordering in the text index."
msgstr ""

#: ../source/core/index-text.txt:265
# eec6645d86ce434597446103f41aa73e
msgid "Compound Index"
msgstr ""

#: ../source/core/index-text.txt:267
# 040e076227f94b968d1770ee24a8e2ee
msgid "A :doc:`compound index </core/index-compound>` can include a ``text`` index key in combination with ascending/descending index keys. However, these compound indexes have the following restrictions:"
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:1
# f587c3efd5c849fd820cb3b29d10a048
msgid "A compound ``text`` index cannot include any other special index types, such as :ref:`multi-key <index-type-multi-key>` or :ref:`geospatial <index-feature-geospatial>` index fields."
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:5
# bef166c0f4da49deb14582695a50c3d8
msgid "If the compound ``text`` index includes keys **preceding** the ``text`` index key, to perform a :query:`$text` search, the query predicate must include **equality match conditions** on the preceding keys."
msgstr ""

#: ../source/core/index-text.txt:273
# 140097bd10a84e8c9e70db7f4f795c8b
msgid "See also :ref:`text-index-and-sort` for additional limitations."
msgstr ""

#: ../source/core/index-text.txt:275
# 8989e3614b194234b9185ccfef96a2c5
msgid "For an example of a compound text index, see :doc:`/tutorial/limit-number-of-items-scanned-for-text-search`."
msgstr ""

#: ../source/core/index-text.txt:281
# 758851da48cd4c9fa18f178642814b2e
msgid "Drop a Text Index"
msgstr ""

#: ../source/core/index-text.txt:283
# d8531c57fac941e5b3360980a865f79b
msgid "To drop a ``text`` index, pass the *name* of the index to the :method:`db.collection.dropIndex()` method. To get the name of the index, run the :method:`db.collection.getIndexes()` method."
msgstr ""

#: ../source/core/index-text.txt:287
# 941589dd6fef4c8d897b09eac4e43c53
msgid "For information on the default naming scheme for ``text`` indexes as well as overriding the default name, see :doc:`/tutorial/avoid-text-index-name-limit`."
msgstr ""

#: ../source/core/index-text.txt:292
# aba05746cdf04d07a802c9db1da98097
msgid "Storage Requirements and Performance Costs"
msgstr ""

#: ../source/core/index-text.txt:294
# 4772c07d1b804be19e77d351d52cf340
msgid "``text`` indexes have the following storage requirements and performance costs:"
msgstr ""

#: ../source/core/index-text.txt:297
# 99a5675434d74b25899c9e081a7ca395
msgid "``text`` indexes can be large. They contain one index entry for each unique post-stemmed word in each indexed field for each document inserted."
msgstr ""

#: ../source/core/index-text.txt:301
# 6e274a226f5b40a3b284c4ae8667c799
msgid "Building a ``text`` index is very similar to building a large multi-key index and will take longer than building a simple ordered (scalar) index on the same data."
msgstr ""

#: ../source/core/index-text.txt:305
# ee3a721c499a4aed95bc799976e96d91
msgid "When building a large ``text`` index on an existing collection, ensure that you have a sufficiently high limit on open file descriptors. See the :doc:`recommended settings </reference/ulimit>`."
msgstr ""

#: ../source/core/index-text.txt:309
# 5d04db6e67e944d7a7fbe3d9ac42c356
msgid "``text`` indexes will impact insertion throughput because MongoDB must add an index entry for each unique post-stemmed word in each indexed field of each new source document."
msgstr ""

#: ../source/core/index-text.txt:313
# 3db482c8b8c74269a3e659a95cdce30e
msgid "Additionally, ``text`` indexes do not store phrases or information about the proximity of words in the documents. As a result, phrase queries will run much more effectively when the entire collection fits in RAM."
msgstr ""

#: ../source/core/index-text.txt:319
# 93d0644b93c444748460e61e5418fe16
msgid "Text Search Support"
msgstr ""

#: ../source/core/index-text.txt:321
# 2d2a1015ac874c099d95fb92095094a4
msgid "The ``text`` index supports :query:`$text` query operations. For examples of text search, see the :query:`$text reference page <$text>`. For examples of :query:`$text` operations in aggregation pipelines, see :doc:`/tutorial/text-search-in-aggregation`."
msgstr ""


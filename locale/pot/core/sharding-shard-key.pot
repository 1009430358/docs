# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/sharding-shard-key.txt:10
# bfff129173ef491d9cd8335e80701c14
msgid "Shard Keys"
msgstr ""

#: ../source/core/sharding-shard-key.txt:14
# 40a43564067d4fee9090d54baaa0d7eb
msgid "The shard key determines the distribution of the collection's :term:`documents <document>` among the cluster's :term:`shards <shard>`. The shard key is either an indexed :term:`field` or an indexed compound field that exists in every document in the collection."
msgstr ""

#: ../source/core/sharding-shard-key.txt:20
# 0894d96065b240b19ed23aa46bb2a888
msgid "MongoDB partitions data in the collection using ranges of shard key values. Each range, or :term:`chunk`, defines a non-overlapping range of shard key values. MongoDB distributes the chunks, and their documents, among the shards in the cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:27
# 2185d93fed7a48318fb81afdd79b8d81
msgid "When a chunk grows beyond the :ref:`chunk size <sharding-chunk-size>`, MongoDB attempts to :term:`split <split>` the chunk into smaller chunks, always based on ranges in the shard key."
msgstr ""

#: ../source/core/sharding-shard-key.txt:32
# 6c4cec8a8d7e4a26857e650b6c33942f
msgid "Considerations"
msgstr ""

#: ../source/core/sharding-shard-key.txt:34
# 6e27ca955df74352ad090f6fe71d303d
msgid "Shard keys are immutable and cannot be changed after insertion. See the :ref:`system limits for sharded cluster <limits-sharding>` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:38
# 8c557b6a2e8342b799913d91b2811037
msgid "The index on the shard key **cannot** be a :ref:`multikey index <index-type-multikey>`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:44
# 54cb7b7325f24ba1a6614978af68472d
msgid "Hashed Shard Keys"
msgstr ""

#: ../source/core/sharding-shard-key.txt:48
# ea6f0319446343f4bef931f09bc4ee8e
msgid "Hashed shard keys use a :ref:`hashed index <index-hashed-index>` of a single field as the :term:`shard key` to partition data across your sharded cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:52
# ccb52f61fce240baa81f927aba4b6c56
msgid "The field you choose as your hashed shard key should have a good cardinality, or large number of different values. Hashed keys work well with fields that increase monotonically like :term:`ObjectId` values or timestamps."
msgstr ""

#: ../source/core/sharding-shard-key.txt:57
# 277eb6a4c2284335a5acdbaeb7a53c79
msgid "If you shard an empty collection using a hashed shard key, MongoDB will automatically create and migrate chunks so that each shard has two chunks.  You can control how many chunks MongoDB will create with the ``numInitialChunks`` parameter to :dbcommand:`shardCollection` or by manually creating chunks on the empty collection using the :dbcommand:`split` command."
msgstr ""

#: ../source/core/sharding-shard-key.txt:64
# 369c9db86a8848d4907ad10b644f2c29
msgid "To shard a collection using a hashed shard key, see :doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:0
# d7ad59e020344e39a34cd054a55865fb
msgid "Tip"
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:3
# 454013680b46474f990be1ec9c8a765e
msgid "MongoDB automatically computes the hashes when resolving queries using hashed indexes.  Applications do **not** need to compute hashes."
msgstr ""

#: ../source/core/sharding-shard-key.txt:70
# af3fd4b09993474caf344aca78ad5157
msgid "Impacts of Shard Keys on Cluster Operations"
msgstr ""

#: ../source/core/sharding-shard-key.txt:72
# 67571575110342e5aee6f00c0692bff5
msgid "The shard key affects write and query performance by determining how the MongoDB partitions data in the cluster and how effectively the :program:`mongos` instances can direct operations to the cluster. Consider the following operational impacts of shard key selection:"
msgstr ""

#: ../source/core/sharding-shard-key.txt:82
# 9ed000d80d224eb0a088abedcda0b135
msgid "Write Scaling"
msgstr ""

#: ../source/core/sharding-shard-key.txt:84
# a077247505004415bf30cee09de0e1f6
msgid "Some possible shard keys will allow your application to take advantage of the increased write capacity that the cluster can provide, while others do not. Consider the following example where you shard by the values of the default :term:`_id` field, which is :term:`ObjectId`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:89
# b44c24abd1ce4d8b8271f32968836690
msgid "MongoDB generates ``ObjectId`` values upon document creation to produce a unique identifier for the object. However, the most significant bits of data in this value represent a time stamp, which means that they increment in a regular and predictable pattern. Even though this value has :ref:`high cardinality <sharding-shard-key-cardinality>`, when using this, *any date, or other monotonically increasing number* as the shard key, all insert operations will be storing data into a single chunk, and therefore, a single shard. As a result, the write capacity of this shard will define the effective write capacity of the cluster."
msgstr ""

#: ../source/core/sharding-shard-key.txt:100
# 312d2bf388e14d9e92656e2643e33f82
msgid "A shard key that increases monotonically will not hinder performance if you have a very low insert rate, or if most of your write operations are :method:`~db.collection.update()` operations distributed through your entire data set. Generally, choose shard keys that have *both* high cardinality and will distribute write operations across the *entire cluster*."
msgstr ""

#: ../source/core/sharding-shard-key.txt:107
# fa14348fe1d24add8624f1c9efeb981b
msgid "Typically, a computed shard key that has some amount of \"randomness,\" such as ones that include a cryptographic hash (i.e. MD5 or SHA1) of other content in the document, will allow the cluster to scale write operations. However, random shard keys do not typically provide :ref:`query isolation <sharding-shard-key-query-isolation>`, which is another important characteristic of shard keys."
msgstr ""

#: ../source/core/sharding-shard-key.txt:114
# 9f3c9e3cc64048018706aac432454329
msgid "MongoDB makes it possible to shard a collection on a hashed index. This can greatly improve write scaling. See :doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:122
# c107790ae4484415b2637d9cff9e52dd
msgid "Querying"
msgstr ""

#: ../source/core/sharding-shard-key.txt:124
# 3b232af180e14b17982cda82dc3a2697
msgid "The :program:`mongos` provides an interface for applications to interact with sharded clusters that hides the complexity of :term:`data partitioning <partition>`. A :program:`mongos` receives queries from applications, and uses metadata from the :ref:`config server <sharding-config-server>`, to route queries to the :program:`mongod` instances with the appropriate data. While the :program:`mongos` succeeds in making all querying operational in sharded environments, the :term:`shard key` you select can have a profound affect on query performance."
msgstr ""

#: ../source/core/sharding-shard-key.txt:134
# 999c1d9e02b74c9eaf601b1381df79ae
msgid "The :doc:`/core/sharded-cluster-query-router` and :ref:`config server <sharding-config-server>` sections for a more general overview of querying in sharded environments."
msgstr ""

#: ../source/core/sharding-shard-key.txt:142
# c509aa98982f49c4b335349cfae1a273
msgid "Query Isolation"
msgstr ""

#: ../source/core/sharding-shard-key.txt:144
# 068b72e6adb4404999a4923ec20f30a3
msgid "Generally, the fastest queries in a sharded environment are those that :program:`mongos` will route to a single shard, using the :term:`shard key` and the cluster meta data from the :ref:`config server <sharding-config-server>`. For queries that don't include the shard key, :program:`mongos` must query all shards, wait for their responses and then return the result to the application. These \"scatter/gather\" queries can be long running operations."
msgstr ""

#: ../source/core/sharding-shard-key.txt:152
# 5bfa68c0276f4b7cb11cb1c0b306b177
msgid "If your query includes the first component of a compound shard key [#shard-key-index]_, the :program:`mongos` can route the query directly to a single shard, or a small number of shards, which provides better performance. Even if you query values of the shard key that reside in different chunks, the :program:`mongos` will route queries directly to specific shards."
msgstr ""

#: ../source/core/sharding-shard-key.txt:159
# de84b534ef034a70b2724d9e0b4d5346
msgid "To select a shard key for a collection:"
msgstr ""

#: ../source/core/sharding-shard-key.txt:161
# fdcb876f888b4c79a8924e14f8e26963
msgid "determine the most commonly included fields in queries for a given application"
msgstr ""

#: ../source/core/sharding-shard-key.txt:164
# e978903be4674b2a94a6e2b52b1d04d2
msgid "find which of these operations are most performance dependent."
msgstr ""

#: ../source/core/sharding-shard-key.txt:168
# fbf5c49e27aa4cbcbe2fd83cbd75332b
msgid "If this field has low cardinality (i.e not sufficiently selective) you should add a second field to the shard key making a compound shard key. The data may become more splittable with a compound shard key."
msgstr ""

#: ../source/core/sharding-shard-key.txt:0
# a5a8961e24af4a84af8dbf63dcf1f55f
msgid "See"
msgstr ""

#: ../source/core/sharding-shard-key.txt:176
# 2e412561033046a185901a70fded7794
msgid "In many ways, you can think of the shard key a cluster-wide index. However, be aware that sharded systems cannot enforce cluster-wide unique indexes *unless* the unique field is in the shard key. Consider the :doc:`/core/indexes` page for more information on indexes and compound indexes."
msgstr ""

#: ../source/core/sharding-shard-key.txt:183
# a59dc54f7a974839a93230c9eda917e3
msgid "Sorting"
msgstr ""

#: ../source/core/sharding-shard-key.txt:185
# 70e33bbe0ee94bf7835b8331eb4efa5c
msgid "In sharded systems, the :program:`mongos` performs a merge-sort of all sorted query results from the shards. See :doc:`/core/sharded-cluster-query-router` and :ref:`index-sort` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:191
# 72ccfef0da6845b490b3ef21103a0e0e
msgid "Indivisible Chunks"
msgstr ""

#: ../source/core/sharding-shard-key.txt:193
# 6be5aa990d514ec38d21c95e9e56c79a
msgid "An insufficiently granular shard key can result in chunks that are \"unsplittable\". See :ref:`shard-key-selection-divisible` for more information."
msgstr ""

#: ../source/core/sharding-shard-key.txt:198
# c99b0c8820ad46748e01669f14c2e235
msgid "Additional Information"
msgstr ""

#: ../source/core/sharding-shard-key.txt:200
# a671bedcd7a545499faa247f3536dac4
msgid ":doc:`/tutorial/choose-a-shard-key`"
msgstr ""

#: ../source/core/sharding-shard-key.txt:202
# ed0c6d9138ed49e39b56cfdee956b2bb
msgid ":doc:`/tutorial/shard-collection-with-a-hashed-shard-key`."
msgstr ""

#: ../source/core/sharding-shard-key.txt:1
#: ../source/core/sharding-shard-key.txt:1
#: ../source/core/sharding-shard-key.txt:78
#: ../source/core/sharding-shard-key.txt:138
# 7b87df214f614a5ca66abcfc020d7106
# 7b87df214f614a5ca66abcfc020d7106
# 8be898353ae448439478e54b9db919df
# fc8511e2fb66431d97fc739b0bc33b6d
msgid "shard key"
msgstr ""

#: ../source/core/sharding-shard-key.txt:1
# 7b87df214f614a5ca66abcfc020d7106
msgid "sharding"
msgstr ""

#: ../source/core/sharding-shard-key.txt:78
# 8be898353ae448439478e54b9db919df
msgid "write scaling"
msgstr ""

#: ../source/core/sharding-shard-key.txt:138
# fc8511e2fb66431d97fc739b0bc33b6d
msgid "query isolation"
msgstr ""


# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2015
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-08-20 19:13-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/distributed-queries.txt:6
# b7b3d02d3d654ab394237dde41831ae7
msgid "Distributed Queries"
msgstr ""

#: ../source/core/distributed-queries.txt:14
# db9763d5141447bfb8ca23935530f24f
msgid "Read Operations to Sharded Clusters"
msgstr ""

#: ../source/core/distributed-queries.txt:16
# 3b7b24d8c50a4f2380106dc51bee357a
msgid ":term:`Sharded clusters <sharded cluster>` allow you to partition a data set among a cluster of :program:`mongod` instances in a way that is nearly transparent to the application. For an overview of sharded clusters, see the :doc:`/sharding` section of this manual."
msgstr ""

#: ../source/core/distributed-queries.txt:21
# ee1ce2671dac4d608cf8e6f2f1580208
msgid "For a sharded cluster, applications issue operations to one of the :program:`mongos` instances associated with the cluster."
msgstr ""

#: ../source/core/distributed-queries.txt:26
# b990ed9899e14012ac44011e471a87df
msgid "Read operations on sharded clusters are most efficient when directed to a specific shard. Queries to sharded collections should include the collection's :ref:`shard key <sharding-shard-key>`. When a query includes a shard key, the :program:`mongos` can use cluster metadata from the :ref:`config database <sharding-config-server>` to route the queries to shards."
msgstr ""

#: ../source/core/distributed-queries.txt:35
# fe16998ad50c42b6a862babc98af2194
msgid "If a query does not include the shard key, the :program:`mongos` must direct the query to *all* shards in the cluster. These *scatter gather* queries can be inefficient. On larger clusters, scatter gather queries are unfeasible for routine operations."
msgstr ""

#: ../source/core/distributed-queries.txt:42
# 45570a5709dd4e6b8c5a185f00c0eec1
msgid "For more information on read operations in sharded clusters, see the :doc:`/core/sharded-cluster-query-router` and :ref:`sharding-shard-key` sections."
msgstr ""

#: ../source/core/distributed-queries.txt:51
# 191bf1d9eff7468bb56a1ac5d24c548f
msgid "Read Operations to Replica Sets"
msgstr ""

#: ../source/core/distributed-queries.txt:53
# 13ceafb3a2724cc98d432aa154135f87
msgid ":term:`Replica sets <replica set>` use :term:`read preferences <read preference>` to determine where and how to route read operations to members of the replica set. By default, MongoDB always reads data from a replica set's :term:`primary`. You can modify that behavior by changing the :ref:`read preference mode <replica-set-read-preference-modes>`."
msgstr ""

#: ../source/core/distributed-queries.txt:60
# bce84ee6899f4600b978f2d550f42626
msgid "You can configure the :ref:`read preference mode <replica-set-read-preference-modes>` on a per-connection or per-operation basis to allow reads from :term:`secondaries <secondary>` to:"
msgstr ""

#: ../source/core/distributed-queries.txt:65
# fb5707b5c9924707bf3e0f9dbb93e8fc
msgid "reduce latency in multi-data-center deployments,"
msgstr ""

#: ../source/core/distributed-queries.txt:67
# 1d152de5cb2f44d78a882d319f36c29b
msgid "improve read throughput by distributing high read-volumes (relative to write volume),"
msgstr ""

#: ../source/core/distributed-queries.txt:70
# a22e28540eb64c5b91b7f12b9aa375c5
msgid "for backup operations, and/or"
msgstr ""

#: ../source/core/distributed-queries.txt:72
# 1eb785e60c62413d982db1a8e40f5c48
msgid "to allow reads during :ref:`failover <replica-set-failover>` situations."
msgstr ""

#: ../source/core/distributed-queries.txt:77
# 9935d8d1ce31485aa9021a3f055f48aa
msgid "Read operations from secondary members of replica sets are not guaranteed to reflect the current state of the primary, and the state of secondaries trails the primary by some amount of time. [#edge-cases-2-primaries]_"
msgstr ""

#: ../source/core/distributed-queries.txt:82
# 57f5f5f51c0c41b18d36acb0743d919c
msgid "For more information on read preference or on the read preference modes, see :doc:`/core/read-preference` and :ref:`replica-set-read-preference-modes`."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# 17f6cbbd0904446c9754884062e521ab
msgid "In some circumstances, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :ref:`{w: majority} write concern <wc-w>`. The node that can complete :ref:`{w: majority} <wc-w>` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`."
msgstr ""

#: ../source/core/distributed-queries.txt:1
#: ../source/core/distributed-queries.txt:46
# d7cb5aeddbbe40f9ae00ac265f926e45
# f3a6821a273d4191bfab895106e8a3e4
msgid "read operation"
msgstr ""

#: ../source/core/distributed-queries.txt:1
# d7cb5aeddbbe40f9ae00ac265f926e45
msgid "architecture"
msgstr ""

#: ../source/core/distributed-queries.txt:46
#: ../source/core/distributed-queries.txt:47
# f3a6821a273d4191bfab895106e8a3e4
# 7f1e45f577d8473dbea415de6e91c875
msgid "connection pooling"
msgstr ""

#: ../source/core/distributed-queries.txt:47
# 7f1e45f577d8473dbea415de6e91c875
msgid "read operations"
msgstr ""


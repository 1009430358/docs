title:
  text: Commit changes.
  character: '`'
stepnum: 1
ref: git-commit-changes
pre: Commit your changes. Verify that you have committed everything by running ``git status`` on your working branch.
action:
  language: sh
  code: |
        git status
post: |
  Ensure there is nothing to commit and the working directory is
  clean. If uncommitted changes exist, commit the changes if needed.
  If these changes are not needed, discard the changes; you may need
  to recompile and rerun the tests.
--- 
title:
  text: Pull in changes made by others.
  character: '`'
stepnum: 2
ref: git-pull-rebase
pre: Pull in changes made by others since you forked your repo and replay your commits on top.
action:
  language: sh
  code: |
      git pull --rebase upstream master
post: |
  The operation "replays" your work on top of the commits that
  have happened since you began. For more information, see
  `<http://git-scm.com/book/en/Git-Branching-Rebasing>`_.
--- 
title:
  text: Resolve any conflicts that may occur during rebase.
  character: '`'
stepnum: 3
ref: git-resolve-conflicts
content: |
  ``git status`` will give you detailed instructions on the necessary
  steps to resolve any issues.
  Once resolved, ``git add`` the resolved files and use ``git rebase
  --continue`` until you're done rebasing.
--- 
title:
  text: Recompile and test.
  character: '`'
stepnum: 4
ref: git-recompile-and-test
content: |
  Rebuild the code to ensure that you have merged successfully. If you
  have added any new asserts, rebuilding the code can catch new assert
  code conflicts since each assert must have a globally unique error
  number.
 
  Rerun the tests as well to ensure other changes has not broken your
  changes, or vice versa.
...

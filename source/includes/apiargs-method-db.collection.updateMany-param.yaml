arg_name: param
description: |
  The selection criteria for the update. The same :ref:`query
  selectors <query-selectors>` as in the :method:`find()
  <db.collection.find()>` method are available.
  
  Specify an empty document ``{ }`` to update all documents in 
  the collection.

interface: method
name: filter
operation: db.collection.updateMany
optional: false
position: 1
type: document
---
arg_name: param
description: |
  The modifications to apply.
  
  Use :doc:`/reference/operator/update/` such as :update:`$set`, 
  :update:`$unset`, or :update:`$rename`.
  
  Using the :ref:`update() <update-parameter>` pattern of 
  ``field: value`` for the ``update`` parameter throws an error. 
  
interface: method
name: update
operation: db.collection.updateMany
optional: false
position: 2
type: document
---
arg_name: param
description: |
  When ``true``, if no documents match the ``filter``, a new document is 
  created using the equality comparisons in ``filter`` with the modifications 
  from ``update``.
  
  :doc:`Comparison </reference/operator/query>` operations from the ``filter`` 
  will not be included in the new document.
  
  If the ``filter`` only has comparison operations, then only the 
  modifications from the ``update`` will be applied to the new document.
  
  See :ref:`updateMany-example-update-multiple-documents-with-upsert`
  
interface: method
name: upsert
operation: db.collection.updateMany
optional: true
position: 3
type: boolean
---
arg_name: param
description: |
  A document expressing the :doc:`write concern
  </reference/write-concern>`. Omit to use the default write concern.

interface: method
name: writeConcern
operation: db.collection.updateMany
optional: true
position: 4
type: document
...
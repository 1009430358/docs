title: Disable the balancer process.
stepnum: 1
ref: disable-balancer
pre: |
   To disable the :ref:`balancer <sharding-internals-balancing>`,
   connect the :program:`mongo` shell to a :program:`mongos` instance and run
   :method:`sh.stopBalancer()` in the ``config`` database.
action:
   language: javascript
   code: |
      use config
      sh.stopBalancer()
post: |
   For more information, see the
   :ref:`sharding-balancing-disable-temporarily` procedure.

   .. warning:: If you do not stop the balancer, the backup could have
      duplicate data or omit data as :term:`chunks <chunk>` migrate while
      recording backups.
---
title: Lock one secondary member of each replica set.
stepnum: 2
ref: lock-replica-set-members
pre: |
   Lock a secondary member of each replica set in the sharded cluster,
   and, if your sharded cluster uses a replica set for the config
   servers, one secondary of the :ref:`config server replica set (CSRS)
   <replset-config-servers>`.

   Ensure that the :term:`oplog` has sufficient capacity to allow these
   secondaries to catch up to the state of the primaries after
   finishing the backup procedure. See :ref:`replica-set-oplog-sizing`
   for more information.
action:
  - heading: Lock shard replica set secondary.
    pre: |
      For each shard replica set in the sharded cluster, connect a
      :program:`mongo` shell to the secondary member's
      :program:`mongod` instance and run :method:`db.fsyncLock()`. 
    language: javascript
    code: |
      db.fsyncLock()
    post: |
      When calling :method:`db.fsyncLock()`, ensure that the connection
      is kept open to allow a subsequent call to
      :method:`db.fsyncUnlock()`.
  - heading: Lock config server replica set secondary.
    pre: |
      If locking a secondary of the CSRS, confirm that the member
      recognizes that the balancer is disabled and the last migration has
      finished.
      Connect a :program:`mongo` shell to the secondary member's
      :program:`mongod` instance. To confirm that the member recognizes
      that the balancer is disabled:
    language: javascript
    code: |
         use config
         rs.slaveOk()
         db.settings.find({ "_id" : "balancer", "stopped" : true })
    post: |
       If the member recognizes that the balancer is disabled, the query 
       should return a document.  Otherwise, wait until the query returns
       a document.
  - pre: |
      To confirm that the CSRS secondary member has replicated past the
      last completed migration, check the ``changelog`` collection in the ``config`` database.
      The last logged ``moveChunk`` operation should be a commit.
    language: javascript
    code: |
         use config;
         db.changelog.find({what:/^moveChunk/}).sort({time:-1}).next().what"
    post: |
      The query should return ``"moveChunk.commit"``.  If not, wait until
      the chunk migration completes.
  - pre: |
       If the secondary member recognizes that the balancer is disabled
       and the last migration is complete, lock the member.
    language: javascript
    code: |
       db.fsyncLock()
    post: |
      When calling :method:`db.fsyncLock()`, ensure that the connection is
      kept open to allow a subsequent call to :method:`db.fsyncUnlock()`.
---
title: Backup one config server.
stepnum: 3
ref: backup-config-server
pre: |
   Run :program:`mongodump` against a config server :program:`mongod`
   instance to back up the cluster's metadata. You only need to back up
   one config server. If you are using CSRS config servers and locked a
   config server secondary in the previous step, perform this step
   against the locked config server.
action:
  - pre: |
      Use :program:`mongodump` with the :option:`--oplog` option to
      backup one of the :ref:`config servers
      <sharding-config-server>`.
    language: sh
    code: |
      mongodump --oplog
  - pre: |
      If your deployment uses CSRS config servers, unlock the config server
      node before proceeding to the next step.
      To unlock the CSRS member, use :method:`db.fsyncUnlock()` method in
      the :program:`mongo` shell used to lock the instance.
    language: javascript
    code: |
      db.fsyncUnlock()
---
title: Back up a replica set member for each shard.
stepnum: 4
ref: backup-replica-set-members
pre: |
   Back up the locked replica set members of the shards using
   :program:`mongodump` with the
   :option:`--oplog` option. You may back up the
   shards in parallel.
action:
   language: sh
   code: |
      mongodump --oplog
---
title: Unlock replica set members for each shard.
stepnum: 5
ref: restart-replica-set-members
pre: |
  To unlock the replica set members, use :method:`db.fsyncUnlock()`
  method in the :program:`mongo` shell. For each locked member, use the
  same :program:`mongo` shell used to lock the instance.
action: 
  language: javascript
  code: |
    db.fsyncUnlock()
post: |
  Allow these members to catch up with the state of the primary.
---
title: Re-enable the balancer process.
stepnum: 6
ref: reenable-balancer-process
pre: |
  To re-enable to balancer, connect the :program:`mongo` shell to a
  :program:`mongos` instance and run
  :method:`sh.setBalancerState()`.
action:
   language: javascript
   code: |
      use config
      sh.setBalancerState(true)
...
